
SoftStarter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fc0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08009190  08009190  00019190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095bc  080095bc  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  080095bc  080095bc  000195bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095c4  080095c4  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095c8  080095c8  000195c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  080095cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000244  08009810  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08009810  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a01  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002abb  00000000  00000000  00032c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00035730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  000366a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249df  00000000  00000000  000374f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e13  00000000  00000000  0005bed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deeda  00000000  00000000  0006fcea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ebc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051cc  00000000  00000000  0014ec14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000244 	.word	0x20000244
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009178 	.word	0x08009178

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000248 	.word	0x20000248
 800020c:	08009178 	.word	0x08009178

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_ADC1_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_ADC1_Init+0x98>)
 800100c:	4a17      	ldr	r2, [pc, #92]	; (800106c <MX_ADC1_Init+0xa0>)
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_ADC1_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_ADC1_Init+0x98>)
 8001018:	2201      	movs	r2, #1
 800101a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_ADC1_Init+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_ADC1_Init+0x98>)
 8001026:	2201      	movs	r2, #1
 8001028:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <MX_ADC1_Init+0x98>)
 800102c:	f001 f94e 	bl	80022cc <HAL_ADC_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001036:	f000 fcfd 	bl	8001a34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800103a:	2301      	movs	r3, #1
 800103c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800103e:	2301      	movs	r3, #1
 8001040:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_ADC1_Init+0x98>)
 800104c:	f001 fb92 	bl	8002774 <HAL_ADC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001056:	f000 fced 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000260 	.word	0x20000260
 8001068:	40012000 	.word	0x40012000
 800106c:	0f000001 	.word	0x0f000001

08001070 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <HAL_ADC_MspInit+0x8c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d12f      	bne.n	80010f2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_ADC_MspInit+0x90>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_ADC_MspInit+0x90>)
 800109c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_ADC_MspInit+0x90>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_ADC_MspInit+0x90>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <HAL_ADC_MspInit+0x90>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_ADC_MspInit+0x90>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010ca:	2302      	movs	r3, #2
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ce:	2303      	movs	r3, #3
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <HAL_ADC_MspInit+0x94>)
 80010de:	f001 ff25 	bl	8002f2c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 2);
 80010e2:	2202      	movs	r2, #2
 80010e4:	2100      	movs	r1, #0
 80010e6:	2012      	movs	r0, #18
 80010e8:	f001 fe57 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010ec:	2012      	movs	r0, #18
 80010ee:	f001 fe70 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	; 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40012000 	.word	0x40012000
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000

08001108 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <MX_GPIO_Init+0xb4>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <MX_GPIO_Init+0xb4>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <MX_GPIO_Init+0xb4>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_GPIO_Init+0xb4>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <MX_GPIO_Init+0xb4>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_GPIO_Init+0xb4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_GPIO_Init+0xb4>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <MX_GPIO_Init+0xb4>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_GPIO_Init+0xb4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2101      	movs	r1, #1
 8001176:	4812      	ldr	r0, [pc, #72]	; (80011c0 <MX_GPIO_Init+0xb8>)
 8001178:	f002 f86c 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800117c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001180:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001186:	2302      	movs	r3, #2
 8001188:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	4619      	mov	r1, r3
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <MX_GPIO_Init+0xbc>)
 8001192:	f001 fecb 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001196:	2301      	movs	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	4619      	mov	r1, r3
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <MX_GPIO_Init+0xb8>)
 80011ae:	f001 febd 	bl	8002f2c <HAL_GPIO_Init>

}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40020800 	.word	0x40020800

080011c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011cc:	f001 f80c 	bl	80021e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011d0:	f000 f82a 	bl	8001228 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011d4:	f7ff ff98 	bl	8001108 <MX_GPIO_Init>
	MX_TIM3_Init();
 80011d8:	f000 fddc 	bl	8001d94 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80011dc:	f000 ff60 	bl	80020a0 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80011e0:	f000 fd8a 	bl	8001cf8 <MX_TIM2_Init>
	MX_ADC1_Init();
 80011e4:	f7ff fef2 	bl	8000fcc <MX_ADC1_Init>
	MX_TIM10_Init();
 80011e8:	f000 fe72 	bl	8001ed0 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	htim3.Instance->CCMR1 |= TIM_CCMR1_OC1CE;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <main+0x4c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699a      	ldr	r2, [r3, #24]
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <main+0x4c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011fa:	619a      	str	r2, [r3, #24]
	HAL_UART_Receive_IT(&huart2, proto, 4);
 80011fc:	2204      	movs	r2, #4
 80011fe:	4906      	ldr	r1, [pc, #24]	; (8001218 <main+0x50>)
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <main+0x54>)
 8001202:	f004 f90c 	bl	800541e <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <main+0x58>)
 8001208:	f002 fe76 	bl	8003ef8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <main+0x5c>)
 800120e:	f002 fe73 	bl	8003ef8 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001212:	e7fe      	b.n	8001212 <main+0x4a>
 8001214:	20000314 	.word	0x20000314
 8001218:	200002b8 	.word	0x200002b8
 800121c:	200003a4 	.word	0x200003a4
 8001220:	200002cc 	.word	0x200002cc
 8001224:	2000035c 	.word	0x2000035c

08001228 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	2234      	movs	r2, #52	; 0x34
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f005 f8b4 	bl	80063a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <SystemClock_Config+0xd4>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a29      	ldr	r2, [pc, #164]	; (80012fc <SystemClock_Config+0xd4>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <SystemClock_Config+0xd4>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001268:	2300      	movs	r3, #0
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <SystemClock_Config+0xd8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001274:	4a22      	ldr	r2, [pc, #136]	; (8001300 <SystemClock_Config+0xd8>)
 8001276:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b20      	ldr	r3, [pc, #128]	; (8001300 <SystemClock_Config+0xd8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001288:	2302      	movs	r3, #2
 800128a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2310      	movs	r3, #16
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001294:	2302      	movs	r3, #2
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001298:	2300      	movs	r3, #0
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800129c:	2308      	movs	r3, #8
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 84;
 80012a0:	2354      	movs	r3, #84	; 0x54
 80012a2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4618      	mov	r0, r3
 80012b6:	f002 fb31 	bl	800391c <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80012c0:	f000 fbb8 	bl	8001a34 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c8:	2302      	movs	r3, #2
 80012ca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012da:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	2102      	movs	r1, #2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f001 ffd0 	bl	8003288 <HAL_RCC_ClockConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0xca>
	{
		Error_Handler();
 80012ee:	f000 fba1 	bl	8001a34 <Error_Handler>
	}
}
 80012f2:	bf00      	nop
 80012f4:	3750      	adds	r7, #80	; 0x50
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	40007000 	.word	0x40007000

08001304 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1){
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7f1b      	ldrb	r3, [r3, #28]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d113      	bne.n	800133c <HAL_TIM_OC_DelayElapsedCallback+0x38>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, tpulso[borda]);
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 800131c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	635a      	str	r2, [r3, #52]	; 0x34
		if(borda==DESCE){
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d103      	bne.n	8001336 <HAL_TIM_OC_DelayElapsedCallback+0x32>
			borda=SOBE;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
		}
		else{
			borda=DESCE;
		}
	}
}
 8001334:	e002      	b.n	800133c <HAL_TIM_OC_DelayElapsedCallback+0x38>
			borda=DESCE;
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	200002a9 	.word	0x200002a9
 800134c:	20000000 	.word	0x20000000
 8001350:	20000314 	.word	0x20000314

08001354 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001364:	f040 8102 	bne.w	800156c <HAL_TIM_PeriodElapsedCallback+0x218>
		if(rampa==SUBIDA){
 8001368:	4ba1      	ldr	r3, [pc, #644]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d162      	bne.n	8001436 <HAL_TIM_PeriodElapsedCallback+0xe2>
			if(i<=41){
 8001370:	4ba0      	ldr	r3, [pc, #640]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b29      	cmp	r3, #41	; 0x29
 8001376:	d84b      	bhi.n	8001410 <HAL_TIM_PeriodElapsedCallback+0xbc>
				tpulso[0]=ANGULOSLista[i];
 8001378:	4b9e      	ldr	r3, [pc, #632]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b9e      	ldr	r3, [pc, #632]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001380:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001384:	4b9d      	ldr	r3, [pc, #628]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001386:	801a      	strh	r2, [r3, #0]
				tpulso[1]=tpulso[0]+540;
 8001388:	4b9c      	ldr	r3, [pc, #624]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001390:	b29a      	uxth	r2, r3
 8001392:	4b9a      	ldr	r3, [pc, #616]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001394:	805a      	strh	r2, [r3, #2]
				if(i==41){ // Se i está no valor máximo de contagem
 8001396:	4b97      	ldr	r3, [pc, #604]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b29      	cmp	r3, #41	; 0x29
 800139c:	d110      	bne.n	80013c0 <HAL_TIM_PeriodElapsedCallback+0x6c>
					rampa=BYPASS; // Redefine o estado do motor
 800139e:	4b94      	ldr	r3, [pc, #592]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80013a0:	2203      	movs	r2, #3
 80013a2:	701a      	strb	r2, [r3, #0]
					htim3.Instance->CCMR1 &=~ TIM_CCMR1_OC1CE; // Reseta o registrador do clear enable
 80013a4:	4b96      	ldr	r3, [pc, #600]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	699a      	ldr	r2, [r3, #24]
 80013aa:	4b95      	ldr	r3, [pc, #596]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b2:	619a      	str	r2, [r3, #24]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1); // Aciona o relé de bypass
 80013b4:	2201      	movs	r2, #1
 80013b6:	2101      	movs	r1, #1
 80013b8:	4892      	ldr	r0, [pc, #584]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80013ba:	f001 ff4b 	bl	8003254 <HAL_GPIO_WritePin>
					return;
 80013be:	e15d      	b.n	800167c <HAL_TIM_PeriodElapsedCallback+0x328>
				}
				if(corrente<(NOMINAL*sobrelimite)){ // Só permite decrementar o angulo caso a corrente esteja abaixo do valor de sobrecorrente
 80013c0:	4b91      	ldr	r3, [pc, #580]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800160c <HAL_TIM_PeriodElapsedCallback+0x2b8>
 80013ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013ce:	4b90      	ldr	r3, [pc, #576]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013dc:	dd06      	ble.n	80013ec <HAL_TIM_PeriodElapsedCallback+0x98>
					i++;
 80013de:	4b85      	ldr	r3, [pc, #532]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4b83      	ldr	r3, [pc, #524]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013e8:	701a      	strb	r2, [r3, #0]
 80013ea:	e011      	b.n	8001410 <HAL_TIM_PeriodElapsedCallback+0xbc>
				}else{
					strcpy(msg, "SCR\n"); // Envia para o monitor que a sobrecorrente foi atingida para ele exibir uma notificação
 80013ec:	4b89      	ldr	r3, [pc, #548]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80013ee:	4a8a      	ldr	r2, [pc, #552]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80013f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013f4:	6018      	str	r0, [r3, #0]
 80013f6:	3304      	adds	r3, #4
 80013f8:	7019      	strb	r1, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), TIMEOUT);
 80013fa:	4886      	ldr	r0, [pc, #536]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80013fc:	f7fe ff08 	bl	8000210 <strlen>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001408:	4982      	ldr	r1, [pc, #520]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800140a:	4884      	ldr	r0, [pc, #528]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800140c:	f003 ff75 	bl	80052fa <HAL_UART_Transmit>
				}
			}
			strcpy(msg, "RDS\n"); // Envia para o monitor o estado do motor - Rampa de subida
 8001410:	4b80      	ldr	r3, [pc, #512]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001412:	4a83      	ldr	r2, [pc, #524]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001414:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001418:	6018      	str	r0, [r3, #0]
 800141a:	3304      	adds	r3, #4
 800141c:	7019      	strb	r1, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), TIMEOUT);
 800141e:	487d      	ldr	r0, [pc, #500]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001420:	f7fe fef6 	bl	8000210 <strlen>
 8001424:	4603      	mov	r3, r0
 8001426:	b29a      	uxth	r2, r3
 8001428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142c:	4979      	ldr	r1, [pc, #484]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800142e:	487b      	ldr	r0, [pc, #492]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001430:	f003 ff63 	bl	80052fa <HAL_UART_Transmit>
 8001434:	e122      	b.n	800167c <HAL_TIM_PeriodElapsedCallback+0x328>
		}
		else if(rampa==DESCIDA){
 8001436:	4b6e      	ldr	r3, [pc, #440]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d13b      	bne.n	80014b6 <HAL_TIM_PeriodElapsedCallback+0x162>
			if(i>=0){
				tpulso[0]=ANGULOSLista[i];
 800143e:	4b6d      	ldr	r3, [pc, #436]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	4b6c      	ldr	r3, [pc, #432]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001446:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800144a:	4b6c      	ldr	r3, [pc, #432]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800144c:	801a      	strh	r2, [r3, #0]
				tpulso[1]=tpulso[0]+540; // Acrescenta 540 do ARR no CCR para definir a borda de descida do pulso
 800144e:	4b6b      	ldr	r3, [pc, #428]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b68      	ldr	r3, [pc, #416]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800145a:	805a      	strh	r2, [r3, #2]
				if(i==0){ // Se i está no valor minimo de contagem
 800145c:	4b65      	ldr	r3, [pc, #404]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10f      	bne.n	8001484 <HAL_TIM_PeriodElapsedCallback+0x130>
					rampa=PARADO; // Redefine o estado do motor
 8001464:	4b62      	ldr	r3, [pc, #392]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
					HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1); // Desliga o OC
 800146a:	2100      	movs	r1, #0
 800146c:	4864      	ldr	r0, [pc, #400]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800146e:	f002 ff23 	bl	80042b8 <HAL_TIM_OC_Stop_IT>
					htim3.Instance->CCMR1 |= TIM_CCMR1_OC1CE; // Seta o registrador do clear enable
 8001472:	4b63      	ldr	r3, [pc, #396]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	699a      	ldr	r2, [r3, #24]
 8001478:	4b61      	ldr	r3, [pc, #388]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001480:	619a      	str	r2, [r3, #24]
					return;
 8001482:	e0fb      	b.n	800167c <HAL_TIM_PeriodElapsedCallback+0x328>
				}
				i--;
 8001484:	4b5b      	ldr	r3, [pc, #364]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b59      	ldr	r3, [pc, #356]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800148e:	701a      	strb	r2, [r3, #0]
			}
			strcpy(msg, "RDD\n"); // Envia para o monitor o estado do motor - Rampa de descida
 8001490:	4b60      	ldr	r3, [pc, #384]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001492:	4a64      	ldr	r2, [pc, #400]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001494:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001498:	6018      	str	r0, [r3, #0]
 800149a:	3304      	adds	r3, #4
 800149c:	7019      	strb	r1, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), TIMEOUT);
 800149e:	485d      	ldr	r0, [pc, #372]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80014a0:	f7fe feb6 	bl	8000210 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ac:	4959      	ldr	r1, [pc, #356]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80014ae:	485b      	ldr	r0, [pc, #364]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80014b0:	f003 ff23 	bl	80052fa <HAL_UART_Transmit>
 80014b4:	e0e2      	b.n	800167c <HAL_TIM_PeriodElapsedCallback+0x328>
		}
		else if(rampa==PARADO){
 80014b6:	4b4e      	ldr	r3, [pc, #312]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d135      	bne.n	800152a <HAL_TIM_PeriodElapsedCallback+0x1d6>
			i=0;
 80014be:	4b4d      	ldr	r3, [pc, #308]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
			tpulso[0]=ANGULOSLista[i];
 80014c4:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80014cc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80014d0:	4b4a      	ldr	r3, [pc, #296]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80014d2:	801a      	strh	r2, [r3, #0]
			tpulso[1]=tpulso[0]+540; // Acrescenta 540 do ARR no CCR para definir a borda de descida do pulso
 80014d4:	4b49      	ldr	r3, [pc, #292]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4b47      	ldr	r3, [pc, #284]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80014e0:	805a      	strh	r2, [r3, #2]
			HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1); // Desliga o OC
 80014e2:	2100      	movs	r1, #0
 80014e4:	4846      	ldr	r0, [pc, #280]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80014e6:	f002 fee7 	bl	80042b8 <HAL_TIM_OC_Stop_IT>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0); // Desaciona o relé
 80014ea:	2200      	movs	r2, #0
 80014ec:	2101      	movs	r1, #1
 80014ee:	4845      	ldr	r0, [pc, #276]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80014f0:	f001 feb0 	bl	8003254 <HAL_GPIO_WritePin>
			htim3.Instance->CCMR1 |= TIM_CCMR1_OC1CE; // Seta o registrador do clear enable
 80014f4:	4b42      	ldr	r3, [pc, #264]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699a      	ldr	r2, [r3, #24]
 80014fa:	4b41      	ldr	r3, [pc, #260]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001502:	619a      	str	r2, [r3, #24]
			strcpy(msg, "OFF\n"); // Envia para o monitor o estado do motor - parado
 8001504:	4b43      	ldr	r3, [pc, #268]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001506:	4a48      	ldr	r2, [pc, #288]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001508:	e892 0003 	ldmia.w	r2, {r0, r1}
 800150c:	6018      	str	r0, [r3, #0]
 800150e:	3304      	adds	r3, #4
 8001510:	7019      	strb	r1, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), TIMEOUT);
 8001512:	4840      	ldr	r0, [pc, #256]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001514:	f7fe fe7c 	bl	8000210 <strlen>
 8001518:	4603      	mov	r3, r0
 800151a:	b29a      	uxth	r2, r3
 800151c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001520:	493c      	ldr	r1, [pc, #240]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001522:	483e      	ldr	r0, [pc, #248]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001524:	f003 fee9 	bl	80052fa <HAL_UART_Transmit>
 8001528:	e0a8      	b.n	800167c <HAL_TIM_PeriodElapsedCallback+0x328>
		}
		else if(rampa==BYPASS){
 800152a:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b03      	cmp	r3, #3
 8001530:	f040 80a4 	bne.w	800167c <HAL_TIM_PeriodElapsedCallback+0x328>
			htim3.Instance->CCMR1 &=~ TIM_CCMR1_OC1CE; // Reseta o registrador do clear enable
 8001534:	4b32      	ldr	r3, [pc, #200]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699a      	ldr	r2, [r3, #24]
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001542:	619a      	str	r2, [r3, #24]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1); // Aciona o relé
 8001544:	2201      	movs	r2, #1
 8001546:	2101      	movs	r1, #1
 8001548:	482e      	ldr	r0, [pc, #184]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800154a:	f001 fe83 	bl	8003254 <HAL_GPIO_WritePin>
			strcpy(msg, "ON\n"); // Envia para o monitor o estado do motor - na rede
 800154e:	4b31      	ldr	r3, [pc, #196]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001550:	4a36      	ldr	r2, [pc, #216]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001552:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), TIMEOUT);
 8001554:	482f      	ldr	r0, [pc, #188]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001556:	f7fe fe5b 	bl	8000210 <strlen>
 800155a:	4603      	mov	r3, r0
 800155c:	b29a      	uxth	r2, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	492c      	ldr	r1, [pc, #176]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001564:	482d      	ldr	r0, [pc, #180]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001566:	f003 fec8 	bl	80052fa <HAL_UART_Transmit>
 800156a:	e087      	b.n	800167c <HAL_TIM_PeriodElapsedCallback+0x328>
		}
	}
	else if(htim->Instance == TIM10){
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a2f      	ldr	r2, [pc, #188]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001572:	4293      	cmp	r3, r2
 8001574:	f040 8082 	bne.w	800167c <HAL_TIM_PeriodElapsedCallback+0x328>
		HAL_ADC_Start_IT(&hadc1);
 8001578:	482e      	ldr	r0, [pc, #184]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800157a:	f000 feeb 	bl	8002354 <HAL_ADC_Start_IT>
		if(rampa==SUBIDA || rampa==DESCIDA){
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d003      	beq.n	800158e <HAL_TIM_PeriodElapsedCallback+0x23a>
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d11d      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x276>
			ang=ANGULOSLista[i]/100;
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001596:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800159a:	4a27      	ldr	r2, [pc, #156]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	095b      	lsrs	r3, r3, #5
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80015ae:	edc3 7a00 	vstr	s15, [r3]
			sprintf(msg, "%.0f\n", ang);
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffe6 	bl	8000588 <__aeabi_f2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	491f      	ldr	r1, [pc, #124]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80015c2:	4814      	ldr	r0, [pc, #80]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80015c4:	f005 fb60 	bl	8006c88 <siprintf>
 80015c8:	e04d      	b.n	8001666 <HAL_TIM_PeriodElapsedCallback+0x312>
		}
		else{
			if(rampa == PARADO){
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d13a      	bne.n	8001648 <HAL_TIM_PeriodElapsedCallback+0x2f4>
				ang = 180;
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80015d4:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80015d6:	601a      	str	r2, [r3, #0]
				sprintf(msg, "%.0f\n", ang);
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffd3 	bl	8000588 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4916      	ldr	r1, [pc, #88]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80015e8:	480a      	ldr	r0, [pc, #40]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80015ea:	f005 fb4d 	bl	8006c88 <siprintf>
 80015ee:	e03a      	b.n	8001666 <HAL_TIM_PeriodElapsedCallback+0x312>
 80015f0:	200002a8 	.word	0x200002a8
 80015f4:	200002aa 	.word	0x200002aa
 80015f8:	20000004 	.word	0x20000004
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000314 	.word	0x20000314
 8001604:	40020000 	.word	0x40020000
 8001608:	20000058 	.word	0x20000058
 800160c:	43e10000 	.word	0x43e10000
 8001610:	200002c4 	.word	0x200002c4
 8001614:	200002ac 	.word	0x200002ac
 8001618:	08009190 	.word	0x08009190
 800161c:	200003a4 	.word	0x200003a4
 8001620:	08009198 	.word	0x08009198
 8001624:	080091a0 	.word	0x080091a0
 8001628:	080091a8 	.word	0x080091a8
 800162c:	000a4e4f 	.word	0x000a4e4f
 8001630:	40014400 	.word	0x40014400
 8001634:	20000260 	.word	0x20000260
 8001638:	51eb851f 	.word	0x51eb851f
 800163c:	200002bc 	.word	0x200002bc
 8001640:	080091b0 	.word	0x080091b0
 8001644:	43340000 	.word	0x43340000
			}
			else{
				ang = 0;
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
				sprintf(msg, "%.0f\n", ang);
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff97 	bl	8000588 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	490a      	ldr	r1, [pc, #40]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001660:	480a      	ldr	r0, [pc, #40]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001662:	f005 fb11 	bl	8006c88 <siprintf>
			}
		}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), TIMEOUT);
 8001666:	4809      	ldr	r0, [pc, #36]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001668:	f7fe fdd2 	bl	8000210 <strlen>
 800166c:	4603      	mov	r3, r0
 800166e:	b29a      	uxth	r2, r3
 8001670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001674:	4905      	ldr	r1, [pc, #20]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001678:	f003 fe3f 	bl	80052fa <HAL_UART_Transmit>
	}
}
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200002bc 	.word	0x200002bc
 8001688:	080091b0 	.word	0x080091b0
 800168c:	200002ac 	.word	0x200002ac
 8001690:	200003a4 	.word	0x200003a4
 8001694:	00000000 	.word	0x00000000

08001698 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	// Analizando agora, poderia ter sido feito um switch case no lugar de vários if's
	if(proto[0] == 'd'){ // Rampa de descida
 80016a0:	4b77      	ldr	r3, [pc, #476]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b64      	cmp	r3, #100	; 0x64
 80016a6:	d114      	bne.n	80016d2 <HAL_UART_RxCpltCallback+0x3a>
		desliga = (proto[1]-'0')*10+(proto[2]-'0'); // Pega os valores definidos como tempo de desligamento
 80016a8:	4b75      	ldr	r3, [pc, #468]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 80016aa:	785b      	ldrb	r3, [r3, #1]
 80016ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b71      	ldr	r3, [pc, #452]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 80016bc:	789b      	ldrb	r3, [r3, #2]
 80016be:	3b30      	subs	r3, #48	; 0x30
 80016c0:	4413      	add	r3, r2
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ca:	4b6e      	ldr	r3, [pc, #440]	; (8001884 <HAL_UART_RxCpltCallback+0x1ec>)
 80016cc:	edc3 7a00 	vstr	s15, [r3]
 80016d0:	e0c6      	b.n	8001860 <HAL_UART_RxCpltCallback+0x1c8>
	}
	else if(proto[0] == 'l'){ // Rampa de subida
 80016d2:	4b6b      	ldr	r3, [pc, #428]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b6c      	cmp	r3, #108	; 0x6c
 80016d8:	d114      	bne.n	8001704 <HAL_UART_RxCpltCallback+0x6c>
		partida = (proto[1]-'0')*10+(proto[2]-'0'); // Pega os valores definidos como tempo de partida
 80016da:	4b69      	ldr	r3, [pc, #420]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 80016dc:	785b      	ldrb	r3, [r3, #1]
 80016de:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b64      	ldr	r3, [pc, #400]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	3b30      	subs	r3, #48	; 0x30
 80016f2:	4413      	add	r3, r2
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016fc:	4b62      	ldr	r3, [pc, #392]	; (8001888 <HAL_UART_RxCpltCallback+0x1f0>)
 80016fe:	edc3 7a00 	vstr	s15, [r3]
 8001702:	e0ad      	b.n	8001860 <HAL_UART_RxCpltCallback+0x1c8>
	}
	else if(proto[0] == 's'){ // Sobrecorrente limite
 8001704:	4b5e      	ldr	r3, [pc, #376]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b73      	cmp	r3, #115	; 0x73
 800170a:	d124      	bne.n	8001756 <HAL_UART_RxCpltCallback+0xbe>
		sobrelimite = (proto[1]-'0')*100+(proto[2]-'0')*10+(proto[3]-'0'); // pega os valores de sobrecorrente
 800170c:	4b5c      	ldr	r3, [pc, #368]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 800170e:	785b      	ldrb	r3, [r3, #1]
 8001710:	3b30      	subs	r3, #48	; 0x30
 8001712:	2264      	movs	r2, #100	; 0x64
 8001714:	fb02 f103 	mul.w	r1, r2, r3
 8001718:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 800171a:	789b      	ldrb	r3, [r3, #2]
 800171c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	18ca      	adds	r2, r1, r3
 800172a:	4b55      	ldr	r3, [pc, #340]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 800172c:	78db      	ldrb	r3, [r3, #3]
 800172e:	3b30      	subs	r3, #48	; 0x30
 8001730:	4413      	add	r3, r2
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173a:	4b54      	ldr	r3, [pc, #336]	; (800188c <HAL_UART_RxCpltCallback+0x1f4>)
 800173c:	edc3 7a00 	vstr	s15, [r3]
		sobrelimite = sobrelimite/100;									   // valor de sobrecorrente em %
 8001740:	4b52      	ldr	r3, [pc, #328]	; (800188c <HAL_UART_RxCpltCallback+0x1f4>)
 8001742:	ed93 7a00 	vldr	s14, [r3]
 8001746:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001890 <HAL_UART_RxCpltCallback+0x1f8>
 800174a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174e:	4b4f      	ldr	r3, [pc, #316]	; (800188c <HAL_UART_RxCpltCallback+0x1f4>)
 8001750:	edc3 7a00 	vstr	s15, [r3]
 8001754:	e084      	b.n	8001860 <HAL_UART_RxCpltCallback+0x1c8>
	}
	else if(proto[0] == 'c'){ // Corrente de desligamento
 8001756:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b63      	cmp	r3, #99	; 0x63
 800175c:	d124      	bne.n	80017a8 <HAL_UART_RxCpltCallback+0x110>
		correntedesliga = ((proto[1]-'0')*100+(proto[2]-'0')*10+(proto[3]-'0')); // pega os valores de corrente de desligamento
 800175e:	4b48      	ldr	r3, [pc, #288]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 8001760:	785b      	ldrb	r3, [r3, #1]
 8001762:	3b30      	subs	r3, #48	; 0x30
 8001764:	2264      	movs	r2, #100	; 0x64
 8001766:	fb02 f103 	mul.w	r1, r2, r3
 800176a:	4b45      	ldr	r3, [pc, #276]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 800176c:	789b      	ldrb	r3, [r3, #2]
 800176e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	18ca      	adds	r2, r1, r3
 800177c:	4b40      	ldr	r3, [pc, #256]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 800177e:	78db      	ldrb	r3, [r3, #3]
 8001780:	3b30      	subs	r3, #48	; 0x30
 8001782:	4413      	add	r3, r2
 8001784:	ee07 3a90 	vmov	s15, r3
 8001788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800178c:	4b41      	ldr	r3, [pc, #260]	; (8001894 <HAL_UART_RxCpltCallback+0x1fc>)
 800178e:	edc3 7a00 	vstr	s15, [r3]
		correntedesliga = correntedesliga/100;									 // valor de corrente de desligamento em %
 8001792:	4b40      	ldr	r3, [pc, #256]	; (8001894 <HAL_UART_RxCpltCallback+0x1fc>)
 8001794:	ed93 7a00 	vldr	s14, [r3]
 8001798:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001890 <HAL_UART_RxCpltCallback+0x1f8>
 800179c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a0:	4b3c      	ldr	r3, [pc, #240]	; (8001894 <HAL_UART_RxCpltCallback+0x1fc>)
 80017a2:	edc3 7a00 	vstr	s15, [r3]
 80017a6:	e05b      	b.n	8001860 <HAL_UART_RxCpltCallback+0x1c8>
	}
	else if(proto[0] == 'L'){ // Botao de liga
 80017a8:	4b35      	ldr	r3, [pc, #212]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b4c      	cmp	r3, #76	; 0x4c
 80017ae:	d11b      	bne.n	80017e8 <HAL_UART_RxCpltCallback+0x150>
		rampa=SUBIDA;
 80017b0:	4b39      	ldr	r3, [pc, #228]	; (8001898 <HAL_UART_RxCpltCallback+0x200>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1); // liga os pulsos
 80017b6:	2100      	movs	r1, #0
 80017b8:	4838      	ldr	r0, [pc, #224]	; (800189c <HAL_UART_RxCpltCallback+0x204>)
 80017ba:	f002 fc67 	bl	800408c <HAL_TIM_OC_Start_IT>
		__HAL_TIM_SET_PRESCALER(&htim2, partida/0.042); // Seta o tempo que o angulo de disparo vai ser alterado no upddate do tim2 acordo com o tempo definido no slider
 80017be:	4b32      	ldr	r3, [pc, #200]	; (8001888 <HAL_UART_RxCpltCallback+0x1f0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fee0 	bl	8000588 <__aeabi_f2d>
 80017c8:	a32b      	add	r3, pc, #172	; (adr r3, 8001878 <HAL_UART_RxCpltCallback+0x1e0>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7ff f85d 	bl	800088c <__aeabi_ddiv>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4932      	ldr	r1, [pc, #200]	; (80018a0 <HAL_UART_RxCpltCallback+0x208>)
 80017d8:	680c      	ldr	r4, [r1, #0]
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff fa03 	bl	8000be8 <__aeabi_d2uiz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80017e6:	e03b      	b.n	8001860 <HAL_UART_RxCpltCallback+0x1c8>
	}
	else if(proto[0] == 'D'){ // Botao de desliga
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b44      	cmp	r3, #68	; 0x44
 80017ee:	d11c      	bne.n	800182a <HAL_UART_RxCpltCallback+0x192>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0); // Desaciona o relé
 80017f0:	2200      	movs	r2, #0
 80017f2:	2101      	movs	r1, #1
 80017f4:	482b      	ldr	r0, [pc, #172]	; (80018a4 <HAL_UART_RxCpltCallback+0x20c>)
 80017f6:	f001 fd2d 	bl	8003254 <HAL_GPIO_WritePin>
		rampa=DESCIDA; //
 80017fa:	4b27      	ldr	r3, [pc, #156]	; (8001898 <HAL_UART_RxCpltCallback+0x200>)
 80017fc:	2202      	movs	r2, #2
 80017fe:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_PRESCALER(&htim2, desliga/0.042); // Seta o tempo que o angulo de disparo vai ser alterado no upddate do tim2 acordo com o tempo definido no slider
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_UART_RxCpltCallback+0x1ec>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe febf 	bl	8000588 <__aeabi_f2d>
 800180a:	a31b      	add	r3, pc, #108	; (adr r3, 8001878 <HAL_UART_RxCpltCallback+0x1e0>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7ff f83c 	bl	800088c <__aeabi_ddiv>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4921      	ldr	r1, [pc, #132]	; (80018a0 <HAL_UART_RxCpltCallback+0x208>)
 800181a:	680c      	ldr	r4, [r1, #0]
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff f9e2 	bl	8000be8 <__aeabi_d2uiz>
 8001824:	4603      	mov	r3, r0
 8001826:	62a3      	str	r3, [r4, #40]	; 0x28
 8001828:	e01a      	b.n	8001860 <HAL_UART_RxCpltCallback+0x1c8>
	}
	else if(proto[0]== 'E'){ // Botao de emergencia
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b45      	cmp	r3, #69	; 0x45
 8001830:	d116      	bne.n	8001860 <HAL_UART_RxCpltCallback+0x1c8>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1); // Desliga o OC
 8001832:	2100      	movs	r1, #0
 8001834:	4819      	ldr	r0, [pc, #100]	; (800189c <HAL_UART_RxCpltCallback+0x204>)
 8001836:	f002 fd3f 	bl	80042b8 <HAL_TIM_OC_Stop_IT>
		i=0; // Zera a contagem
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_UART_RxCpltCallback+0x210>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0); // Desaciona o relé
 8001840:	2200      	movs	r2, #0
 8001842:	2101      	movs	r1, #1
 8001844:	4817      	ldr	r0, [pc, #92]	; (80018a4 <HAL_UART_RxCpltCallback+0x20c>)
 8001846:	f001 fd05 	bl	8003254 <HAL_GPIO_WritePin>
		htim3.Instance->CCMR1 |= TIM_CCMR1_OC1CE; // Seta o registrador do clear enable
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_UART_RxCpltCallback+0x204>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	699a      	ldr	r2, [r3, #24]
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_UART_RxCpltCallback+0x204>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001858:	619a      	str	r2, [r3, #24]
		rampa=PARADO; // Redefine o estado do motor
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_UART_RxCpltCallback+0x200>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart2, proto, 4);
 8001860:	2204      	movs	r2, #4
 8001862:	4907      	ldr	r1, [pc, #28]	; (8001880 <HAL_UART_RxCpltCallback+0x1e8>)
 8001864:	4811      	ldr	r0, [pc, #68]	; (80018ac <HAL_UART_RxCpltCallback+0x214>)
 8001866:	f003 fdda 	bl	800541e <HAL_UART_Receive_IT>

}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bd90      	pop	{r4, r7, pc}
 8001872:	bf00      	nop
 8001874:	f3af 8000 	nop.w
 8001878:	24dd2f1b 	.word	0x24dd2f1b
 800187c:	3fa58106 	.word	0x3fa58106
 8001880:	200002b8 	.word	0x200002b8
 8001884:	20000064 	.word	0x20000064
 8001888:	20000060 	.word	0x20000060
 800188c:	20000058 	.word	0x20000058
 8001890:	42c80000 	.word	0x42c80000
 8001894:	2000005c 	.word	0x2000005c
 8001898:	200002a8 	.word	0x200002a8
 800189c:	20000314 	.word	0x20000314
 80018a0:	200002cc 	.word	0x200002cc
 80018a4:	40020000 	.word	0x40020000
 80018a8:	200002aa 	.word	0x200002aa
 80018ac:	200003a4 	.word	0x200003a4

080018b0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	ADvalue = HAL_ADC_GetValue(&hadc1);
 80018b8:	4851      	ldr	r0, [pc, #324]	; (8001a00 <HAL_ADC_ConvCpltCallback+0x150>)
 80018ba:	f000 ff39 	bl	8002730 <HAL_ADC_GetValue>
 80018be:	ee07 0a90 	vmov	s15, r0
 80018c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018c6:	4b4f      	ldr	r3, [pc, #316]	; (8001a04 <HAL_ADC_ConvCpltCallback+0x154>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
	corrente = (ADvalue*ESCALA)*0.7 + corrente*0.3; // Faz uma média, atualizando com 70% do valor atual do adc e mantendo 30% do valor anterior
 80018cc:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <HAL_ADC_ConvCpltCallback+0x154>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe59 	bl	8000588 <__aeabi_f2d>
 80018d6:	a344      	add	r3, pc, #272	; (adr r3, 80019e8 <HAL_ADC_ConvCpltCallback+0x138>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe feac 	bl	8000638 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	a341      	add	r3, pc, #260	; (adr r3, 80019f0 <HAL_ADC_ConvCpltCallback+0x140>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe fea3 	bl	8000638 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4614      	mov	r4, r2
 80018f8:	461d      	mov	r5, r3
 80018fa:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <HAL_ADC_ConvCpltCallback+0x158>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe42 	bl	8000588 <__aeabi_f2d>
 8001904:	a33c      	add	r3, pc, #240	; (adr r3, 80019f8 <HAL_ADC_ConvCpltCallback+0x148>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7fe fe95 	bl	8000638 <__aeabi_dmul>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4620      	mov	r0, r4
 8001914:	4629      	mov	r1, r5
 8001916:	f7fe fcd9 	bl	80002cc <__adddf3>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f981 	bl	8000c28 <__aeabi_d2f>
 8001926:	4603      	mov	r3, r0
 8001928:	4a37      	ldr	r2, [pc, #220]	; (8001a08 <HAL_ADC_ConvCpltCallback+0x158>)
 800192a:	6013      	str	r3, [r2, #0]
	sprintf(msg,"%-.2f mA\n", corrente); // Envia a corrente para o monitor para ser exibido na ihm
 800192c:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <HAL_ADC_ConvCpltCallback+0x158>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe29 	bl	8000588 <__aeabi_f2d>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4934      	ldr	r1, [pc, #208]	; (8001a0c <HAL_ADC_ConvCpltCallback+0x15c>)
 800193c:	4834      	ldr	r0, [pc, #208]	; (8001a10 <HAL_ADC_ConvCpltCallback+0x160>)
 800193e:	f005 f9a3 	bl	8006c88 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), TIMEOUT);
 8001942:	4833      	ldr	r0, [pc, #204]	; (8001a10 <HAL_ADC_ConvCpltCallback+0x160>)
 8001944:	f7fe fc64 	bl	8000210 <strlen>
 8001948:	4603      	mov	r3, r0
 800194a:	b29a      	uxth	r2, r3
 800194c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001950:	492f      	ldr	r1, [pc, #188]	; (8001a10 <HAL_ADC_ConvCpltCallback+0x160>)
 8001952:	4830      	ldr	r0, [pc, #192]	; (8001a14 <HAL_ADC_ConvCpltCallback+0x164>)
 8001954:	f003 fcd1 	bl	80052fa <HAL_UART_Transmit>
	if(corrente>(NOMINAL*correntedesliga) && (rampa == SUBIDA || rampa == BYPASS)){ // Se atingiu a corrente de desligamento enquanto estava acelerando ou na rede
 8001958:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <HAL_ADC_ConvCpltCallback+0x168>)
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001a1c <HAL_ADC_ConvCpltCallback+0x16c>
 8001962:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001966:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_ADC_ConvCpltCallback+0x158>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	d400      	bmi.n	8001978 <HAL_ADC_ConvCpltCallback+0xc8>
		rampa=PARADO; // Redefine o estado do motor
		i=0; // Zera a contagem
		strcpy(msg, "CDG\n"); // Envia para o monitor que a corrente de desligamento foi atingida para ele exibir uma notificação
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), TIMEOUT);
	}
}
 8001976:	e030      	b.n	80019da <HAL_ADC_ConvCpltCallback+0x12a>
	if(corrente>(NOMINAL*correntedesliga) && (rampa == SUBIDA || rampa == BYPASS)){ // Se atingiu a corrente de desligamento enquanto estava acelerando ou na rede
 8001978:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x170>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d003      	beq.n	8001988 <HAL_ADC_ConvCpltCallback+0xd8>
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x170>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d128      	bne.n	80019da <HAL_ADC_ConvCpltCallback+0x12a>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1); // Desliga o OC
 8001988:	2100      	movs	r1, #0
 800198a:	4826      	ldr	r0, [pc, #152]	; (8001a24 <HAL_ADC_ConvCpltCallback+0x174>)
 800198c:	f002 fc94 	bl	80042b8 <HAL_TIM_OC_Stop_IT>
		htim3.Instance->CCMR1 |= TIM_CCMR1_OC1CE; // Seta o registrador do clear enable
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_ADC_ConvCpltCallback+0x174>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	699a      	ldr	r2, [r3, #24]
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_ADC_ConvCpltCallback+0x174>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800199e:	619a      	str	r2, [r3, #24]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0); // Desaciona o relé
 80019a0:	2200      	movs	r2, #0
 80019a2:	2101      	movs	r1, #1
 80019a4:	4820      	ldr	r0, [pc, #128]	; (8001a28 <HAL_ADC_ConvCpltCallback+0x178>)
 80019a6:	f001 fc55 	bl	8003254 <HAL_GPIO_WritePin>
		rampa=PARADO; // Redefine o estado do motor
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x170>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
		i=0; // Zera a contagem
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_ADC_ConvCpltCallback+0x17c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
		strcpy(msg, "CDG\n"); // Envia para o monitor que a corrente de desligamento foi atingida para ele exibir uma notificação
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_ADC_ConvCpltCallback+0x160>)
 80019b8:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <HAL_ADC_ConvCpltCallback+0x180>)
 80019ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019be:	6018      	str	r0, [r3, #0]
 80019c0:	3304      	adds	r3, #4
 80019c2:	7019      	strb	r1, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), TIMEOUT);
 80019c4:	4812      	ldr	r0, [pc, #72]	; (8001a10 <HAL_ADC_ConvCpltCallback+0x160>)
 80019c6:	f7fe fc23 	bl	8000210 <strlen>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	490f      	ldr	r1, [pc, #60]	; (8001a10 <HAL_ADC_ConvCpltCallback+0x160>)
 80019d4:	480f      	ldr	r0, [pc, #60]	; (8001a14 <HAL_ADC_ConvCpltCallback+0x164>)
 80019d6:	f003 fc90 	bl	80052fa <HAL_UART_Transmit>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bdb0      	pop	{r4, r5, r7, pc}
 80019e2:	bf00      	nop
 80019e4:	f3af 8000 	nop.w
 80019e8:	7af64064 	.word	0x7af64064
 80019ec:	3fe9c7f7 	.word	0x3fe9c7f7
 80019f0:	66666666 	.word	0x66666666
 80019f4:	3fe66666 	.word	0x3fe66666
 80019f8:	33333333 	.word	0x33333333
 80019fc:	3fd33333 	.word	0x3fd33333
 8001a00:	20000260 	.word	0x20000260
 8001a04:	200002c0 	.word	0x200002c0
 8001a08:	200002c4 	.word	0x200002c4
 8001a0c:	080091b8 	.word	0x080091b8
 8001a10:	200002ac 	.word	0x200002ac
 8001a14:	200003a4 	.word	0x200003a4
 8001a18:	2000005c 	.word	0x2000005c
 8001a1c:	43e10000 	.word	0x43e10000
 8001a20:	200002a8 	.word	0x200002a8
 8001a24:	20000314 	.word	0x20000314
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	200002aa 	.word	0x200002aa
 8001a30:	080091c4 	.word	0x080091c4

08001a34 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a38:	b672      	cpsid	i
}
 8001a3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a3c:	e7fe      	b.n	8001a3c <Error_Handler+0x8>
	...

08001a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a7e:	2007      	movs	r0, #7
 8001a80:	f001 f980 	bl	8002d84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <NMI_Handler+0x4>

08001a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <UsageFault_Handler+0x4>

08001aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001adc:	f000 fbd6 	bl	800228c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <ADC_IRQHandler+0x10>)
 8001aea:	f000 fd11 	bl	8002510 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000260 	.word	0x20000260

08001af8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001afe:	f002 fcf3 	bl	80044e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000035c 	.word	0x2000035c

08001b0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <TIM2_IRQHandler+0x10>)
 8001b12:	f002 fce9 	bl	80044e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200002cc 	.word	0x200002cc

08001b20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <TIM3_IRQHandler+0x10>)
 8001b26:	f002 fcdf 	bl	80044e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000314 	.word	0x20000314

08001b34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <USART2_IRQHandler+0x10>)
 8001b3a:	f003 fca1 	bl	8005480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200003a4 	.word	0x200003a4

08001b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
	return 1;
 8001b4c:	2301      	movs	r3, #1
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_kill>:

int _kill(int pid, int sig)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b62:	f004 fbf5 	bl	8006350 <__errno>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2216      	movs	r2, #22
 8001b6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_exit>:

void _exit (int status)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ffe7 	bl	8001b58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b8a:	e7fe      	b.n	8001b8a <_exit+0x12>

08001b8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e00a      	b.n	8001bb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b9e:	f3af 8000 	nop.w
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbf0      	blt.n	8001b9e <_read+0x12>
	}

return len;
 8001bbc:	687b      	ldr	r3, [r7, #4]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e009      	b.n	8001bec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	60ba      	str	r2, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dbf1      	blt.n	8001bd8 <_write+0x12>
	}
	return len;
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_close>:

int _close(int file)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
	return -1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c26:	605a      	str	r2, [r3, #4]
	return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_isatty>:

int _isatty(int file)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
	return 0;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f004 fb5a 	bl	8006350 <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20020000 	.word	0x20020000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	200002c8 	.word	0x200002c8
 8001cd0:	20000400 	.word	0x20000400

08001cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <SystemInit+0x20>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <SystemInit+0x20>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 125;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d1e:	227d      	movs	r2, #125	; 0x7d
 8001d20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 83999;
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d2a:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <MX_TIM2_Init+0x98>)
 8001d2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d34:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d3a:	4814      	ldr	r0, [pc, #80]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d3c:	f002 f88c 	bl	8003e58 <HAL_TIM_Base_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001d46:	f7ff fe75 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	4619      	mov	r1, r3
 8001d56:	480d      	ldr	r0, [pc, #52]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d58:	f002 fd2a 	bl	80047b0 <HAL_TIM_ConfigClockSource>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001d62:	f7ff fe67 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d6e:	463b      	mov	r3, r7
 8001d70:	4619      	mov	r1, r3
 8001d72:	4806      	ldr	r0, [pc, #24]	; (8001d8c <MX_TIM2_Init+0x94>)
 8001d74:	f003 f9e4 	bl	8005140 <HAL_TIMEx_MasterConfigSynchronization>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001d7e:	f7ff fe59 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200002cc 	.word	0x200002cc
 8001d90:	0001481f 	.word	0x0001481f

08001d94 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b092      	sub	sp, #72	; 0x48
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
 8001dd0:	615a      	str	r2, [r3, #20]
 8001dd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dd4:	4b3c      	ldr	r3, [pc, #240]	; (8001ec8 <MX_TIM3_Init+0x134>)
 8001dd6:	4a3d      	ldr	r2, [pc, #244]	; (8001ecc <MX_TIM3_Init+0x138>)
 8001dd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 37;
 8001dda:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <MX_TIM3_Init+0x134>)
 8001ddc:	2225      	movs	r2, #37	; 0x25
 8001dde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de0:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <MX_TIM3_Init+0x134>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 17999;
 8001de6:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <MX_TIM3_Init+0x134>)
 8001de8:	f244 624f 	movw	r2, #17999	; 0x464f
 8001dec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dee:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <MX_TIM3_Init+0x134>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001df4:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <MX_TIM3_Init+0x134>)
 8001df6:	2280      	movs	r2, #128	; 0x80
 8001df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dfa:	4833      	ldr	r0, [pc, #204]	; (8001ec8 <MX_TIM3_Init+0x134>)
 8001dfc:	f002 f82c 	bl	8003e58 <HAL_TIM_Base_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001e06:	f7ff fe15 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e14:	4619      	mov	r1, r3
 8001e16:	482c      	ldr	r0, [pc, #176]	; (8001ec8 <MX_TIM3_Init+0x134>)
 8001e18:	f002 fcca 	bl	80047b0 <HAL_TIM_ConfigClockSource>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e22:	f7ff fe07 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001e26:	4828      	ldr	r0, [pc, #160]	; (8001ec8 <MX_TIM3_Init+0x134>)
 8001e28:	f002 f8d6 	bl	8003fd8 <HAL_TIM_OC_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001e32:	f7ff fdff 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001e36:	2108      	movs	r1, #8
 8001e38:	4823      	ldr	r0, [pc, #140]	; (8001ec8 <MX_TIM3_Init+0x134>)
 8001e3a:	f002 fafb 	bl	8004434 <HAL_TIM_OnePulse_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001e44:	f7ff fdf6 	bl	8001a34 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001e48:	2306      	movs	r3, #6
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001e4c:	2370      	movs	r3, #112	; 0x70
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
  sSlaveConfig.TriggerFilter = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e60:	4619      	mov	r1, r3
 8001e62:	4819      	ldr	r0, [pc, #100]	; (8001ec8 <MX_TIM3_Init+0x134>)
 8001e64:	f002 fd6b 	bl	800493e <HAL_TIM_SlaveConfigSynchro>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001e6e:	f7ff fde1 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4811      	ldr	r0, [pc, #68]	; (8001ec8 <MX_TIM3_Init+0x134>)
 8001e82:	f003 f95d 	bl	8005140 <HAL_TIMEx_MasterConfigSynchronization>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8001e8c:	f7ff fdd2 	bl	8001a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001e90:	2330      	movs	r3, #48	; 0x30
 8001e92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 17400;
 8001e94:	f244 33f8 	movw	r3, #17400	; 0x43f8
 8001e98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4807      	ldr	r0, [pc, #28]	; (8001ec8 <MX_TIM3_Init+0x134>)
 8001eaa:	f002 fc25 	bl	80046f8 <HAL_TIM_OC_ConfigChannel>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 8001eb4:	f7ff fdbe 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <MX_TIM3_Init+0x134>)
 8001eba:	f000 f8b7 	bl	800202c <HAL_TIM_MspPostInit>

}
 8001ebe:	bf00      	nop
 8001ec0:	3748      	adds	r7, #72	; 0x48
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000314 	.word	0x20000314
 8001ecc:	40000400 	.word	0x40000400

08001ed0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <MX_TIM10_Init+0x40>)
 8001ed6:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <MX_TIM10_Init+0x44>)
 8001ed8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8399;
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <MX_TIM10_Init+0x40>)
 8001edc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001ee0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <MX_TIM10_Init+0x40>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <MX_TIM10_Init+0x40>)
 8001eea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eee:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <MX_TIM10_Init+0x40>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <MX_TIM10_Init+0x40>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001efc:	4804      	ldr	r0, [pc, #16]	; (8001f10 <MX_TIM10_Init+0x40>)
 8001efe:	f001 ffab 	bl	8003e58 <HAL_TIM_Base_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001f08:	f7ff fd94 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	2000035c 	.word	0x2000035c
 8001f14:	40014400 	.word	0x40014400

08001f18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08c      	sub	sp, #48	; 0x30
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d116      	bne.n	8001f68 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	4b37      	ldr	r3, [pc, #220]	; (800201c <HAL_TIM_Base_MspInit+0x104>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a36      	ldr	r2, [pc, #216]	; (800201c <HAL_TIM_Base_MspInit+0x104>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b34      	ldr	r3, [pc, #208]	; (800201c <HAL_TIM_Base_MspInit+0x104>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	69bb      	ldr	r3, [r7, #24]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	201c      	movs	r0, #28
 8001f5c:	f000 ff1d 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f60:	201c      	movs	r0, #28
 8001f62:	f000 ff36 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001f66:	e054      	b.n	8002012 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM3)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a2c      	ldr	r2, [pc, #176]	; (8002020 <HAL_TIM_Base_MspInit+0x108>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d134      	bne.n	8001fdc <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	4b29      	ldr	r3, [pc, #164]	; (800201c <HAL_TIM_Base_MspInit+0x104>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a28      	ldr	r2, [pc, #160]	; (800201c <HAL_TIM_Base_MspInit+0x104>)
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	4b26      	ldr	r3, [pc, #152]	; (800201c <HAL_TIM_Base_MspInit+0x104>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	4b22      	ldr	r3, [pc, #136]	; (800201c <HAL_TIM_Base_MspInit+0x104>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a21      	ldr	r2, [pc, #132]	; (800201c <HAL_TIM_Base_MspInit+0x104>)
 8001f98:	f043 0308 	orr.w	r3, r3, #8
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	; (800201c <HAL_TIM_Base_MspInit+0x104>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001faa:	2304      	movs	r3, #4
 8001fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4817      	ldr	r0, [pc, #92]	; (8002024 <HAL_TIM_Base_MspInit+0x10c>)
 8001fc6:	f000 ffb1 	bl	8002f2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	201d      	movs	r0, #29
 8001fd0:	f000 fee3 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fd4:	201d      	movs	r0, #29
 8001fd6:	f000 fefc 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
}
 8001fda:	e01a      	b.n	8002012 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM10)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a11      	ldr	r2, [pc, #68]	; (8002028 <HAL_TIM_Base_MspInit+0x110>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d115      	bne.n	8002012 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <HAL_TIM_Base_MspInit+0x104>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a0b      	ldr	r2, [pc, #44]	; (800201c <HAL_TIM_Base_MspInit+0x104>)
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <HAL_TIM_Base_MspInit+0x104>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2100      	movs	r1, #0
 8002006:	2019      	movs	r0, #25
 8002008:	f000 fec7 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800200c:	2019      	movs	r0, #25
 800200e:	f000 fee0 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
}
 8002012:	bf00      	nop
 8002014:	3730      	adds	r7, #48	; 0x30
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	40000400 	.word	0x40000400
 8002024:	40020c00 	.word	0x40020c00
 8002028:	40014400 	.word	0x40014400

0800202c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a12      	ldr	r2, [pc, #72]	; (8002094 <HAL_TIM_MspPostInit+0x68>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d11d      	bne.n	800208a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_TIM_MspPostInit+0x6c>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a10      	ldr	r2, [pc, #64]	; (8002098 <HAL_TIM_MspPostInit+0x6c>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <HAL_TIM_MspPostInit+0x6c>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800206a:	2340      	movs	r3, #64	; 0x40
 800206c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800207a:	2302      	movs	r3, #2
 800207c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	4619      	mov	r1, r3
 8002084:	4805      	ldr	r0, [pc, #20]	; (800209c <HAL_TIM_MspPostInit+0x70>)
 8002086:	f000 ff51 	bl	8002f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800208a:	bf00      	nop
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40000400 	.word	0x40000400
 8002098:	40023800 	.word	0x40023800
 800209c:	40020000 	.word	0x40020000

080020a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <MX_USART2_UART_Init+0x50>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020d8:	f003 f8c2 	bl	8005260 <HAL_UART_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020e2:	f7ff fca7 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200003a4 	.word	0x200003a4
 80020f0:	40004400 	.word	0x40004400

080020f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <HAL_UART_MspInit+0x94>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d133      	bne.n	800217e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_UART_MspInit+0x98>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_UART_MspInit+0x98>)
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_UART_MspInit+0x98>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_UART_MspInit+0x98>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a14      	ldr	r2, [pc, #80]	; (800218c <HAL_UART_MspInit+0x98>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_UART_MspInit+0x98>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800214e:	230c      	movs	r3, #12
 8002150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215a:	2303      	movs	r3, #3
 800215c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800215e:	2307      	movs	r3, #7
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	4619      	mov	r1, r3
 8002168:	4809      	ldr	r0, [pc, #36]	; (8002190 <HAL_UART_MspInit+0x9c>)
 800216a:	f000 fedf 	bl	8002f2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 800216e:	2201      	movs	r2, #1
 8002170:	2100      	movs	r1, #0
 8002172:	2026      	movs	r0, #38	; 0x26
 8002174:	f000 fe11 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002178:	2026      	movs	r0, #38	; 0x26
 800217a:	f000 fe2a 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	; 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40004400 	.word	0x40004400
 800218c:	40023800 	.word	0x40023800
 8002190:	40020000 	.word	0x40020000

08002194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002198:	480d      	ldr	r0, [pc, #52]	; (80021d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800219a:	490e      	ldr	r1, [pc, #56]	; (80021d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800219c:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021b0:	4c0b      	ldr	r4, [pc, #44]	; (80021e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021be:	f7ff fd89 	bl	8001cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021c2:	f004 f8cb 	bl	800635c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021c6:	f7fe ffff 	bl	80011c8 <main>
  bx  lr    
 80021ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d4:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 80021d8:	080095cc 	.word	0x080095cc
  ldr r2, =_sbss
 80021dc:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 80021e0:	200003fc 	.word	0x200003fc

080021e4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e4:	e7fe      	b.n	80021e4 <CAN1_RX0_IRQHandler>
	...

080021e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <HAL_Init+0x40>)
 80021f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <HAL_Init+0x40>)
 80021fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a07      	ldr	r2, [pc, #28]	; (8002228 <HAL_Init+0x40>)
 800220a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002210:	2003      	movs	r0, #3
 8002212:	f000 fdb7 	bl	8002d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002216:	2000      	movs	r0, #0
 8002218:	f000 f808 	bl	800222c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800221c:	f7ff fc10 	bl	8001a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023c00 	.word	0x40023c00

0800222c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_InitTick+0x54>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_InitTick+0x58>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002242:	fbb3 f3f1 	udiv	r3, r3, r1
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fdcf 	bl	8002dee <HAL_SYSTICK_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e00e      	b.n	8002278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b0f      	cmp	r3, #15
 800225e:	d80a      	bhi.n	8002276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002260:	2200      	movs	r2, #0
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	f000 fd97 	bl	8002d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800226c:	4a06      	ldr	r2, [pc, #24]	; (8002288 <HAL_InitTick+0x5c>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000068 	.word	0x20000068
 8002284:	20000070 	.word	0x20000070
 8002288:	2000006c 	.word	0x2000006c

0800228c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_IncTick+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_IncTick+0x24>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4413      	add	r3, r2
 800229c:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <HAL_IncTick+0x24>)
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000070 	.word	0x20000070
 80022b0:	200003e8 	.word	0x200003e8

080022b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return uwTick;
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <HAL_GetTick+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	200003e8 	.word	0x200003e8

080022cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e033      	b.n	800234a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fec0 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d118      	bne.n	800233c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002312:	f023 0302 	bic.w	r3, r3, #2
 8002316:	f043 0202 	orr.w	r2, r3, #2
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fb5a 	bl	80029d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	641a      	str	r2, [r3, #64]	; 0x40
 800233a:	e001      	b.n	8002340 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_ADC_Start_IT+0x1a>
 800236a:	2302      	movs	r3, #2
 800236c:	e0bd      	b.n	80024ea <HAL_ADC_Start_IT+0x196>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b01      	cmp	r3, #1
 8002382:	d018      	beq.n	80023b6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002394:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <HAL_ADC_Start_IT+0x1a4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a58      	ldr	r2, [pc, #352]	; (80024fc <HAL_ADC_Start_IT+0x1a8>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0c9a      	lsrs	r2, r3, #18
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80023a8:	e002      	b.n	80023b0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f9      	bne.n	80023aa <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	f040 8085 	bne.w	80024d0 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002404:	d106      	bne.n	8002414 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	f023 0206 	bic.w	r2, r3, #6
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	645a      	str	r2, [r3, #68]	; 0x44
 8002412:	e002      	b.n	800241a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002422:	4b37      	ldr	r3, [pc, #220]	; (8002500 <HAL_ADC_Start_IT+0x1ac>)
 8002424:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800242e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800243e:	f043 0320 	orr.w	r3, r3, #32
 8002442:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	2b00      	cmp	r3, #0
 800244e:	d12a      	bne.n	80024a6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a2b      	ldr	r2, [pc, #172]	; (8002504 <HAL_ADC_Start_IT+0x1b0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d015      	beq.n	8002486 <HAL_ADC_Start_IT+0x132>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a2a      	ldr	r2, [pc, #168]	; (8002508 <HAL_ADC_Start_IT+0x1b4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d105      	bne.n	8002470 <HAL_ADC_Start_IT+0x11c>
 8002464:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_ADC_Start_IT+0x1ac>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a25      	ldr	r2, [pc, #148]	; (800250c <HAL_ADC_Start_IT+0x1b8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d136      	bne.n	80024e8 <HAL_ADC_Start_IT+0x194>
 800247a:	4b21      	ldr	r3, [pc, #132]	; (8002500 <HAL_ADC_Start_IT+0x1ac>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	d130      	bne.n	80024e8 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d129      	bne.n	80024e8 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	e020      	b.n	80024e8 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a16      	ldr	r2, [pc, #88]	; (8002504 <HAL_ADC_Start_IT+0x1b0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d11b      	bne.n	80024e8 <HAL_ADC_Start_IT+0x194>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d114      	bne.n	80024e8 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	e00b      	b.n	80024e8 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f043 0210 	orr.w	r2, r3, #16
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000068 	.word	0x20000068
 80024fc:	431bde83 	.word	0x431bde83
 8002500:	40012300 	.word	0x40012300
 8002504:	40012000 	.word	0x40012000
 8002508:	40012100 	.word	0x40012100
 800250c:	40012200 	.word	0x40012200

08002510 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d049      	beq.n	80025da <HAL_ADC_IRQHandler+0xca>
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d046      	beq.n	80025da <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d12b      	bne.n	80025ca <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002576:	2b00      	cmp	r3, #0
 8002578:	d127      	bne.n	80025ca <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002592:	2b00      	cmp	r3, #0
 8002594:	d119      	bne.n	80025ca <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0220 	bic.w	r2, r2, #32
 80025a4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d105      	bne.n	80025ca <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff f970 	bl	80018b0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0212 	mvn.w	r2, #18
 80025d8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d057      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x190>
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d054      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d105      	bne.n	800260e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d139      	bne.n	8002690 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002634:	2b00      	cmp	r3, #0
 8002636:	d12b      	bne.n	8002690 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002642:	2b00      	cmp	r3, #0
 8002644:	d124      	bne.n	8002690 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002650:	2b00      	cmp	r3, #0
 8002652:	d11d      	bne.n	8002690 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002658:	2b00      	cmp	r3, #0
 800265a:	d119      	bne.n	8002690 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800266a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 fa9d 	bl	8002bd0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f06f 020c 	mvn.w	r2, #12
 800269e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d017      	beq.n	80026e6 <HAL_ADC_IRQHandler+0x1d6>
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d014      	beq.n	80026e6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d10d      	bne.n	80026e6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f837 	bl	800274a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0201 	mvn.w	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026f4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d015      	beq.n	8002728 <HAL_ADC_IRQHandler+0x218>
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d012      	beq.n	8002728 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f043 0202 	orr.w	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f06f 0220 	mvn.w	r2, #32
 8002716:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f820 	bl	800275e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f06f 0220 	mvn.w	r2, #32
 8002726:	601a      	str	r2, [r3, #0]
  }
}
 8002728:	bf00      	nop
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1c>
 800278c:	2302      	movs	r3, #2
 800278e:	e113      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x244>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b09      	cmp	r3, #9
 800279e:	d925      	bls.n	80027ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68d9      	ldr	r1, [r3, #12]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	3b1e      	subs	r3, #30
 80027b6:	2207      	movs	r2, #7
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43da      	mvns	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	400a      	ands	r2, r1
 80027c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68d9      	ldr	r1, [r3, #12]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	4618      	mov	r0, r3
 80027d8:	4603      	mov	r3, r0
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4403      	add	r3, r0
 80027de:	3b1e      	subs	r3, #30
 80027e0:	409a      	lsls	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	e022      	b.n	8002832 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6919      	ldr	r1, [r3, #16]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	2207      	movs	r2, #7
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43da      	mvns	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	400a      	ands	r2, r1
 800280e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6919      	ldr	r1, [r3, #16]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	4618      	mov	r0, r3
 8002822:	4603      	mov	r3, r0
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4403      	add	r3, r0
 8002828:	409a      	lsls	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b06      	cmp	r3, #6
 8002838:	d824      	bhi.n	8002884 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	3b05      	subs	r3, #5
 800284c:	221f      	movs	r2, #31
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	400a      	ands	r2, r1
 800285a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	4618      	mov	r0, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	3b05      	subs	r3, #5
 8002876:	fa00 f203 	lsl.w	r2, r0, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	635a      	str	r2, [r3, #52]	; 0x34
 8002882:	e04c      	b.n	800291e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b0c      	cmp	r3, #12
 800288a:	d824      	bhi.n	80028d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	3b23      	subs	r3, #35	; 0x23
 800289e:	221f      	movs	r2, #31
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43da      	mvns	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	400a      	ands	r2, r1
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	3b23      	subs	r3, #35	; 0x23
 80028c8:	fa00 f203 	lsl.w	r2, r0, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
 80028d4:	e023      	b.n	800291e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	3b41      	subs	r3, #65	; 0x41
 80028e8:	221f      	movs	r2, #31
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	400a      	ands	r2, r1
 80028f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	4618      	mov	r0, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	3b41      	subs	r3, #65	; 0x41
 8002912:	fa00 f203 	lsl.w	r2, r0, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800291e:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <HAL_ADC_ConfigChannel+0x250>)
 8002920:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a28      	ldr	r2, [pc, #160]	; (80029c8 <HAL_ADC_ConfigChannel+0x254>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d10f      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1d8>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b12      	cmp	r3, #18
 8002932:	d10b      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <HAL_ADC_ConfigChannel+0x254>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d12b      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x23a>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <HAL_ADC_ConfigChannel+0x258>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d003      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x1f4>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b11      	cmp	r3, #17
 8002966:	d122      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <HAL_ADC_ConfigChannel+0x258>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d111      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_ADC_ConfigChannel+0x25c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a11      	ldr	r2, [pc, #68]	; (80029d4 <HAL_ADC_ConfigChannel+0x260>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	0c9a      	lsrs	r2, r3, #18
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029a0:	e002      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f9      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40012300 	.word	0x40012300
 80029c8:	40012000 	.word	0x40012000
 80029cc:	10000012 	.word	0x10000012
 80029d0:	20000068 	.word	0x20000068
 80029d4:	431bde83 	.word	0x431bde83

080029d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e0:	4b79      	ldr	r3, [pc, #484]	; (8002bc8 <ADC_Init+0x1f0>)
 80029e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	021a      	lsls	r2, r3, #8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6899      	ldr	r1, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	4a58      	ldr	r2, [pc, #352]	; (8002bcc <ADC_Init+0x1f4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d022      	beq.n	8002ab6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6899      	ldr	r1, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6899      	ldr	r1, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	e00f      	b.n	8002ad6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ad4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0202 	bic.w	r2, r2, #2
 8002ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7e1b      	ldrb	r3, [r3, #24]
 8002af0:	005a      	lsls	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	035a      	lsls	r2, r3, #13
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	e007      	b.n	8002b4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	051a      	lsls	r2, r3, #20
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b8e:	025a      	lsls	r2, r3, #9
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	029a      	lsls	r2, r3, #10
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	609a      	str	r2, [r3, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	40012300 	.word	0x40012300
 8002bcc:	0f000001 	.word	0x0f000001

08002bd0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c00:	4013      	ands	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c16:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	60d3      	str	r3, [r2, #12]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <__NVIC_GetPriorityGrouping+0x18>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	f003 0307 	and.w	r3, r3, #7
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	db0b      	blt.n	8002c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	4907      	ldr	r1, [pc, #28]	; (8002c80 <__NVIC_EnableIRQ+0x38>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2001      	movs	r0, #1
 8002c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000e100 	.word	0xe000e100

08002c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	6039      	str	r1, [r7, #0]
 8002c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	db0a      	blt.n	8002cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	490c      	ldr	r1, [pc, #48]	; (8002cd0 <__NVIC_SetPriority+0x4c>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	0112      	lsls	r2, r2, #4
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cac:	e00a      	b.n	8002cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4908      	ldr	r1, [pc, #32]	; (8002cd4 <__NVIC_SetPriority+0x50>)
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	3b04      	subs	r3, #4
 8002cbc:	0112      	lsls	r2, r2, #4
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	761a      	strb	r2, [r3, #24]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000e100 	.word	0xe000e100
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	; 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f1c3 0307 	rsb	r3, r3, #7
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	bf28      	it	cs
 8002cf6:	2304      	movcs	r3, #4
 8002cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d902      	bls.n	8002d08 <NVIC_EncodePriority+0x30>
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3b03      	subs	r3, #3
 8002d06:	e000      	b.n	8002d0a <NVIC_EncodePriority+0x32>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43da      	mvns	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d20:	f04f 31ff 	mov.w	r1, #4294967295
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	43d9      	mvns	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d30:	4313      	orrs	r3, r2
         );
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3724      	adds	r7, #36	; 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d50:	d301      	bcc.n	8002d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d52:	2301      	movs	r3, #1
 8002d54:	e00f      	b.n	8002d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <SysTick_Config+0x40>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d5e:	210f      	movs	r1, #15
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	f7ff ff8e 	bl	8002c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <SysTick_Config+0x40>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d6e:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <SysTick_Config+0x40>)
 8002d70:	2207      	movs	r2, #7
 8002d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	e000e010 	.word	0xe000e010

08002d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ff29 	bl	8002be4 <__NVIC_SetPriorityGrouping>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dac:	f7ff ff3e 	bl	8002c2c <__NVIC_GetPriorityGrouping>
 8002db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	6978      	ldr	r0, [r7, #20]
 8002db8:	f7ff ff8e 	bl	8002cd8 <NVIC_EncodePriority>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff5d 	bl	8002c84 <__NVIC_SetPriority>
}
 8002dca:	bf00      	nop
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff31 	bl	8002c48 <__NVIC_EnableIRQ>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff ffa2 	bl	8002d40 <SysTick_Config>
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff fa4e 	bl	80022b4 <HAL_GetTick>
 8002e18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d008      	beq.n	8002e38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e052      	b.n	8002ede <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0216 	bic.w	r2, r2, #22
 8002e46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <HAL_DMA_Abort+0x62>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0208 	bic.w	r2, r2, #8
 8002e76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e88:	e013      	b.n	8002eb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e8a:	f7ff fa13 	bl	80022b4 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d90c      	bls.n	8002eb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e015      	b.n	8002ede <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e4      	bne.n	8002e8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	223f      	movs	r2, #63	; 0x3f
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d004      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e00c      	b.n	8002f1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2205      	movs	r2, #5
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	e165      	b.n	8003214 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f48:	2201      	movs	r2, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	f040 8154 	bne.w	800320e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d005      	beq.n	8002f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d130      	bne.n	8002fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2203      	movs	r2, #3
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 0201 	and.w	r2, r3, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d017      	beq.n	800301c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d123      	bne.n	8003070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	08da      	lsrs	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3208      	adds	r2, #8
 8003030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	220f      	movs	r2, #15
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	08da      	lsrs	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3208      	adds	r2, #8
 800306a:	69b9      	ldr	r1, [r7, #24]
 800306c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0203 	and.w	r2, r3, #3
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80ae 	beq.w	800320e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b5d      	ldr	r3, [pc, #372]	; (800322c <HAL_GPIO_Init+0x300>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	4a5c      	ldr	r2, [pc, #368]	; (800322c <HAL_GPIO_Init+0x300>)
 80030bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c0:	6453      	str	r3, [r2, #68]	; 0x44
 80030c2:	4b5a      	ldr	r3, [pc, #360]	; (800322c <HAL_GPIO_Init+0x300>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ce:	4a58      	ldr	r2, [pc, #352]	; (8003230 <HAL_GPIO_Init+0x304>)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	3302      	adds	r3, #2
 80030d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4f      	ldr	r2, [pc, #316]	; (8003234 <HAL_GPIO_Init+0x308>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d025      	beq.n	8003146 <HAL_GPIO_Init+0x21a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4e      	ldr	r2, [pc, #312]	; (8003238 <HAL_GPIO_Init+0x30c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d01f      	beq.n	8003142 <HAL_GPIO_Init+0x216>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4d      	ldr	r2, [pc, #308]	; (800323c <HAL_GPIO_Init+0x310>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d019      	beq.n	800313e <HAL_GPIO_Init+0x212>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4c      	ldr	r2, [pc, #304]	; (8003240 <HAL_GPIO_Init+0x314>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d013      	beq.n	800313a <HAL_GPIO_Init+0x20e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4b      	ldr	r2, [pc, #300]	; (8003244 <HAL_GPIO_Init+0x318>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00d      	beq.n	8003136 <HAL_GPIO_Init+0x20a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4a      	ldr	r2, [pc, #296]	; (8003248 <HAL_GPIO_Init+0x31c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d007      	beq.n	8003132 <HAL_GPIO_Init+0x206>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a49      	ldr	r2, [pc, #292]	; (800324c <HAL_GPIO_Init+0x320>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d101      	bne.n	800312e <HAL_GPIO_Init+0x202>
 800312a:	2306      	movs	r3, #6
 800312c:	e00c      	b.n	8003148 <HAL_GPIO_Init+0x21c>
 800312e:	2307      	movs	r3, #7
 8003130:	e00a      	b.n	8003148 <HAL_GPIO_Init+0x21c>
 8003132:	2305      	movs	r3, #5
 8003134:	e008      	b.n	8003148 <HAL_GPIO_Init+0x21c>
 8003136:	2304      	movs	r3, #4
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x21c>
 800313a:	2303      	movs	r3, #3
 800313c:	e004      	b.n	8003148 <HAL_GPIO_Init+0x21c>
 800313e:	2302      	movs	r3, #2
 8003140:	e002      	b.n	8003148 <HAL_GPIO_Init+0x21c>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_GPIO_Init+0x21c>
 8003146:	2300      	movs	r3, #0
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	f002 0203 	and.w	r2, r2, #3
 800314e:	0092      	lsls	r2, r2, #2
 8003150:	4093      	lsls	r3, r2
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003158:	4935      	ldr	r1, [pc, #212]	; (8003230 <HAL_GPIO_Init+0x304>)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	3302      	adds	r3, #2
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003166:	4b3a      	ldr	r3, [pc, #232]	; (8003250 <HAL_GPIO_Init+0x324>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800318a:	4a31      	ldr	r2, [pc, #196]	; (8003250 <HAL_GPIO_Init+0x324>)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003190:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <HAL_GPIO_Init+0x324>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b4:	4a26      	ldr	r2, [pc, #152]	; (8003250 <HAL_GPIO_Init+0x324>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ba:	4b25      	ldr	r3, [pc, #148]	; (8003250 <HAL_GPIO_Init+0x324>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031de:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <HAL_GPIO_Init+0x324>)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_GPIO_Init+0x324>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003208:	4a11      	ldr	r2, [pc, #68]	; (8003250 <HAL_GPIO_Init+0x324>)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3301      	adds	r3, #1
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	f67f ae96 	bls.w	8002f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	3724      	adds	r7, #36	; 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	40013800 	.word	0x40013800
 8003234:	40020000 	.word	0x40020000
 8003238:	40020400 	.word	0x40020400
 800323c:	40020800 	.word	0x40020800
 8003240:	40020c00 	.word	0x40020c00
 8003244:	40021000 	.word	0x40021000
 8003248:	40021400 	.word	0x40021400
 800324c:	40021800 	.word	0x40021800
 8003250:	40013c00 	.word	0x40013c00

08003254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
 8003260:	4613      	mov	r3, r2
 8003262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003264:	787b      	ldrb	r3, [r7, #1]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003270:	e003      	b.n	800327a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	041a      	lsls	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	619a      	str	r2, [r3, #24]
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0cc      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800329c:	4b68      	ldr	r3, [pc, #416]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d90c      	bls.n	80032c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b65      	ldr	r3, [pc, #404]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0b8      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d020      	beq.n	8003312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032dc:	4b59      	ldr	r3, [pc, #356]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4a58      	ldr	r2, [pc, #352]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f4:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a52      	ldr	r2, [pc, #328]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003300:	4b50      	ldr	r3, [pc, #320]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	494d      	ldr	r1, [pc, #308]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d044      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d119      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e07f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d003      	beq.n	8003346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003342:	2b03      	cmp	r3, #3
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003346:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e06f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003356:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e067      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003366:	4b37      	ldr	r3, [pc, #220]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f023 0203 	bic.w	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4934      	ldr	r1, [pc, #208]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	4313      	orrs	r3, r2
 8003376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003378:	f7fe ff9c 	bl	80022b4 <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337e:	e00a      	b.n	8003396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003380:	f7fe ff98 	bl	80022b4 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e04f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003396:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 020c 	and.w	r2, r3, #12
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d1eb      	bne.n	8003380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a8:	4b25      	ldr	r3, [pc, #148]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d20c      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b22      	ldr	r3, [pc, #136]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e032      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4916      	ldr	r1, [pc, #88]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	490e      	ldr	r1, [pc, #56]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800340e:	f000 f855 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 8003412:	4602      	mov	r2, r0
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	490a      	ldr	r1, [pc, #40]	; (8003448 <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	5ccb      	ldrb	r3, [r1, r3]
 8003422:	fa22 f303 	lsr.w	r3, r2, r3
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe fefc 	bl	800222c <HAL_InitTick>

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023c00 	.word	0x40023c00
 8003444:	40023800 	.word	0x40023800
 8003448:	080091cc 	.word	0x080091cc
 800344c:	20000068 	.word	0x20000068
 8003450:	2000006c 	.word	0x2000006c

08003454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <HAL_RCC_GetHCLKFreq+0x14>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000068 	.word	0x20000068

0800346c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003470:	f7ff fff0 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	0a9b      	lsrs	r3, r3, #10
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	4903      	ldr	r1, [pc, #12]	; (8003490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40023800 	.word	0x40023800
 8003490:	080091dc 	.word	0x080091dc

08003494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003498:	f7ff ffdc 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	0b5b      	lsrs	r3, r3, #13
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4903      	ldr	r1, [pc, #12]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40023800 	.word	0x40023800
 80034b8:	080091dc 	.word	0x080091dc

080034bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c0:	b0ae      	sub	sp, #184	; 0xb8
 80034c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e2:	4bcb      	ldr	r3, [pc, #812]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	f200 8206 	bhi.w	80038fc <HAL_RCC_GetSysClockFreq+0x440>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	0800352d 	.word	0x0800352d
 80034fc:	080038fd 	.word	0x080038fd
 8003500:	080038fd 	.word	0x080038fd
 8003504:	080038fd 	.word	0x080038fd
 8003508:	08003535 	.word	0x08003535
 800350c:	080038fd 	.word	0x080038fd
 8003510:	080038fd 	.word	0x080038fd
 8003514:	080038fd 	.word	0x080038fd
 8003518:	0800353d 	.word	0x0800353d
 800351c:	080038fd 	.word	0x080038fd
 8003520:	080038fd 	.word	0x080038fd
 8003524:	080038fd 	.word	0x080038fd
 8003528:	0800372d 	.word	0x0800372d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4bb9      	ldr	r3, [pc, #740]	; (8003814 <HAL_RCC_GetSysClockFreq+0x358>)
 800352e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003532:	e1e7      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003534:	4bb8      	ldr	r3, [pc, #736]	; (8003818 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800353a:	e1e3      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800353c:	4bb4      	ldr	r3, [pc, #720]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003548:	4bb1      	ldr	r3, [pc, #708]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d071      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003554:	4bae      	ldr	r3, [pc, #696]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	099b      	lsrs	r3, r3, #6
 800355a:	2200      	movs	r2, #0
 800355c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003560:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003570:	2300      	movs	r3, #0
 8003572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800357a:	4622      	mov	r2, r4
 800357c:	462b      	mov	r3, r5
 800357e:	f04f 0000 	mov.w	r0, #0
 8003582:	f04f 0100 	mov.w	r1, #0
 8003586:	0159      	lsls	r1, r3, #5
 8003588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800358c:	0150      	lsls	r0, r2, #5
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4621      	mov	r1, r4
 8003594:	1a51      	subs	r1, r2, r1
 8003596:	6439      	str	r1, [r7, #64]	; 0x40
 8003598:	4629      	mov	r1, r5
 800359a:	eb63 0301 	sbc.w	r3, r3, r1
 800359e:	647b      	str	r3, [r7, #68]	; 0x44
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80035ac:	4649      	mov	r1, r9
 80035ae:	018b      	lsls	r3, r1, #6
 80035b0:	4641      	mov	r1, r8
 80035b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035b6:	4641      	mov	r1, r8
 80035b8:	018a      	lsls	r2, r1, #6
 80035ba:	4641      	mov	r1, r8
 80035bc:	1a51      	subs	r1, r2, r1
 80035be:	63b9      	str	r1, [r7, #56]	; 0x38
 80035c0:	4649      	mov	r1, r9
 80035c2:	eb63 0301 	sbc.w	r3, r3, r1
 80035c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80035d4:	4649      	mov	r1, r9
 80035d6:	00cb      	lsls	r3, r1, #3
 80035d8:	4641      	mov	r1, r8
 80035da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035de:	4641      	mov	r1, r8
 80035e0:	00ca      	lsls	r2, r1, #3
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
 80035e6:	4603      	mov	r3, r0
 80035e8:	4622      	mov	r2, r4
 80035ea:	189b      	adds	r3, r3, r2
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30
 80035ee:	462b      	mov	r3, r5
 80035f0:	460a      	mov	r2, r1
 80035f2:	eb42 0303 	adc.w	r3, r2, r3
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003604:	4629      	mov	r1, r5
 8003606:	024b      	lsls	r3, r1, #9
 8003608:	4621      	mov	r1, r4
 800360a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800360e:	4621      	mov	r1, r4
 8003610:	024a      	lsls	r2, r1, #9
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800361a:	2200      	movs	r2, #0
 800361c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003620:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003624:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003628:	f7fd fb4e 	bl	8000cc8 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003636:	e067      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003638:	4b75      	ldr	r3, [pc, #468]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	2200      	movs	r2, #0
 8003640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003644:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800364c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003650:	67bb      	str	r3, [r7, #120]	; 0x78
 8003652:	2300      	movs	r3, #0
 8003654:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003656:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800365a:	4622      	mov	r2, r4
 800365c:	462b      	mov	r3, r5
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	0159      	lsls	r1, r3, #5
 8003668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800366c:	0150      	lsls	r0, r2, #5
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4621      	mov	r1, r4
 8003674:	1a51      	subs	r1, r2, r1
 8003676:	62b9      	str	r1, [r7, #40]	; 0x28
 8003678:	4629      	mov	r1, r5
 800367a:	eb63 0301 	sbc.w	r3, r3, r1
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800368c:	4649      	mov	r1, r9
 800368e:	018b      	lsls	r3, r1, #6
 8003690:	4641      	mov	r1, r8
 8003692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003696:	4641      	mov	r1, r8
 8003698:	018a      	lsls	r2, r1, #6
 800369a:	4641      	mov	r1, r8
 800369c:	ebb2 0a01 	subs.w	sl, r2, r1
 80036a0:	4649      	mov	r1, r9
 80036a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ba:	4692      	mov	sl, r2
 80036bc:	469b      	mov	fp, r3
 80036be:	4623      	mov	r3, r4
 80036c0:	eb1a 0303 	adds.w	r3, sl, r3
 80036c4:	623b      	str	r3, [r7, #32]
 80036c6:	462b      	mov	r3, r5
 80036c8:	eb4b 0303 	adc.w	r3, fp, r3
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80036da:	4629      	mov	r1, r5
 80036dc:	028b      	lsls	r3, r1, #10
 80036de:	4621      	mov	r1, r4
 80036e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036e4:	4621      	mov	r1, r4
 80036e6:	028a      	lsls	r2, r1, #10
 80036e8:	4610      	mov	r0, r2
 80036ea:	4619      	mov	r1, r3
 80036ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036f0:	2200      	movs	r2, #0
 80036f2:	673b      	str	r3, [r7, #112]	; 0x70
 80036f4:	677a      	str	r2, [r7, #116]	; 0x74
 80036f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80036fa:	f7fd fae5 	bl	8000cc8 <__aeabi_uldivmod>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4613      	mov	r3, r2
 8003704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003708:	4b41      	ldr	r3, [pc, #260]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	3301      	adds	r3, #1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800371a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800371e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800372a:	e0eb      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800372c:	4b38      	ldr	r3, [pc, #224]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003738:	4b35      	ldr	r3, [pc, #212]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d06b      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003744:	4b32      	ldr	r3, [pc, #200]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	099b      	lsrs	r3, r3, #6
 800374a:	2200      	movs	r2, #0
 800374c:	66bb      	str	r3, [r7, #104]	; 0x68
 800374e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003756:	663b      	str	r3, [r7, #96]	; 0x60
 8003758:	2300      	movs	r3, #0
 800375a:	667b      	str	r3, [r7, #100]	; 0x64
 800375c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003760:	4622      	mov	r2, r4
 8003762:	462b      	mov	r3, r5
 8003764:	f04f 0000 	mov.w	r0, #0
 8003768:	f04f 0100 	mov.w	r1, #0
 800376c:	0159      	lsls	r1, r3, #5
 800376e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003772:	0150      	lsls	r0, r2, #5
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4621      	mov	r1, r4
 800377a:	1a51      	subs	r1, r2, r1
 800377c:	61b9      	str	r1, [r7, #24]
 800377e:	4629      	mov	r1, r5
 8003780:	eb63 0301 	sbc.w	r3, r3, r1
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003792:	4659      	mov	r1, fp
 8003794:	018b      	lsls	r3, r1, #6
 8003796:	4651      	mov	r1, sl
 8003798:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800379c:	4651      	mov	r1, sl
 800379e:	018a      	lsls	r2, r1, #6
 80037a0:	4651      	mov	r1, sl
 80037a2:	ebb2 0801 	subs.w	r8, r2, r1
 80037a6:	4659      	mov	r1, fp
 80037a8:	eb63 0901 	sbc.w	r9, r3, r1
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037c0:	4690      	mov	r8, r2
 80037c2:	4699      	mov	r9, r3
 80037c4:	4623      	mov	r3, r4
 80037c6:	eb18 0303 	adds.w	r3, r8, r3
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	462b      	mov	r3, r5
 80037ce:	eb49 0303 	adc.w	r3, r9, r3
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80037e0:	4629      	mov	r1, r5
 80037e2:	024b      	lsls	r3, r1, #9
 80037e4:	4621      	mov	r1, r4
 80037e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037ea:	4621      	mov	r1, r4
 80037ec:	024a      	lsls	r2, r1, #9
 80037ee:	4610      	mov	r0, r2
 80037f0:	4619      	mov	r1, r3
 80037f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037f6:	2200      	movs	r2, #0
 80037f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80037fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80037fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003800:	f7fd fa62 	bl	8000cc8 <__aeabi_uldivmod>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4613      	mov	r3, r2
 800380a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800380e:	e065      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x420>
 8003810:	40023800 	.word	0x40023800
 8003814:	00f42400 	.word	0x00f42400
 8003818:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381c:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <HAL_RCC_GetSysClockFreq+0x458>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	2200      	movs	r2, #0
 8003824:	4618      	mov	r0, r3
 8003826:	4611      	mov	r1, r2
 8003828:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800382c:	653b      	str	r3, [r7, #80]	; 0x50
 800382e:	2300      	movs	r3, #0
 8003830:	657b      	str	r3, [r7, #84]	; 0x54
 8003832:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003836:	4642      	mov	r2, r8
 8003838:	464b      	mov	r3, r9
 800383a:	f04f 0000 	mov.w	r0, #0
 800383e:	f04f 0100 	mov.w	r1, #0
 8003842:	0159      	lsls	r1, r3, #5
 8003844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003848:	0150      	lsls	r0, r2, #5
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4641      	mov	r1, r8
 8003850:	1a51      	subs	r1, r2, r1
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	4649      	mov	r1, r9
 8003856:	eb63 0301 	sbc.w	r3, r3, r1
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003868:	4659      	mov	r1, fp
 800386a:	018b      	lsls	r3, r1, #6
 800386c:	4651      	mov	r1, sl
 800386e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003872:	4651      	mov	r1, sl
 8003874:	018a      	lsls	r2, r1, #6
 8003876:	4651      	mov	r1, sl
 8003878:	1a54      	subs	r4, r2, r1
 800387a:	4659      	mov	r1, fp
 800387c:	eb63 0501 	sbc.w	r5, r3, r1
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	00eb      	lsls	r3, r5, #3
 800388a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800388e:	00e2      	lsls	r2, r4, #3
 8003890:	4614      	mov	r4, r2
 8003892:	461d      	mov	r5, r3
 8003894:	4643      	mov	r3, r8
 8003896:	18e3      	adds	r3, r4, r3
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	464b      	mov	r3, r9
 800389c:	eb45 0303 	adc.w	r3, r5, r3
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ae:	4629      	mov	r1, r5
 80038b0:	028b      	lsls	r3, r1, #10
 80038b2:	4621      	mov	r1, r4
 80038b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038b8:	4621      	mov	r1, r4
 80038ba:	028a      	lsls	r2, r1, #10
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038c4:	2200      	movs	r2, #0
 80038c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80038ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038ce:	f7fd f9fb 	bl	8000cc8 <__aeabi_uldivmod>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4613      	mov	r3, r2
 80038d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <HAL_RCC_GetSysClockFreq+0x458>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	0f1b      	lsrs	r3, r3, #28
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80038ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038fa:	e003      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_RCC_GetSysClockFreq+0x45c>)
 80038fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003902:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003904:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003908:	4618      	mov	r0, r3
 800390a:	37b8      	adds	r7, #184	; 0xb8
 800390c:	46bd      	mov	sp, r7
 800390e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800
 8003918:	00f42400 	.word	0x00f42400

0800391c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e28d      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8083 	beq.w	8003a42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800393c:	4b94      	ldr	r3, [pc, #592]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	2b04      	cmp	r3, #4
 8003946:	d019      	beq.n	800397c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003948:	4b91      	ldr	r3, [pc, #580]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003950:	2b08      	cmp	r3, #8
 8003952:	d106      	bne.n	8003962 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003954:	4b8e      	ldr	r3, [pc, #568]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003960:	d00c      	beq.n	800397c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003962:	4b8b      	ldr	r3, [pc, #556]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800396a:	2b0c      	cmp	r3, #12
 800396c:	d112      	bne.n	8003994 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800396e:	4b88      	ldr	r3, [pc, #544]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800397a:	d10b      	bne.n	8003994 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	4b84      	ldr	r3, [pc, #528]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d05b      	beq.n	8003a40 <HAL_RCC_OscConfig+0x124>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d157      	bne.n	8003a40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e25a      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399c:	d106      	bne.n	80039ac <HAL_RCC_OscConfig+0x90>
 800399e:	4b7c      	ldr	r3, [pc, #496]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a7b      	ldr	r2, [pc, #492]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e01d      	b.n	80039e8 <HAL_RCC_OscConfig+0xcc>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0xb4>
 80039b6:	4b76      	ldr	r3, [pc, #472]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a75      	ldr	r2, [pc, #468]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	4b73      	ldr	r3, [pc, #460]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a72      	ldr	r2, [pc, #456]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e00b      	b.n	80039e8 <HAL_RCC_OscConfig+0xcc>
 80039d0:	4b6f      	ldr	r3, [pc, #444]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a6e      	ldr	r2, [pc, #440]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b6c      	ldr	r3, [pc, #432]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a6b      	ldr	r2, [pc, #428]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d013      	beq.n	8003a18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe fc60 	bl	80022b4 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f8:	f7fe fc5c 	bl	80022b4 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e21f      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0a:	4b61      	ldr	r3, [pc, #388]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0xdc>
 8003a16:	e014      	b.n	8003a42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fe fc4c 	bl	80022b4 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a20:	f7fe fc48 	bl	80022b4 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	; 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e20b      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a32:	4b57      	ldr	r3, [pc, #348]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x104>
 8003a3e:	e000      	b.n	8003a42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d06f      	beq.n	8003b2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a4e:	4b50      	ldr	r3, [pc, #320]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d017      	beq.n	8003a8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a5a:	4b4d      	ldr	r3, [pc, #308]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d105      	bne.n	8003a72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a66:	4b4a      	ldr	r3, [pc, #296]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	d11c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a7e:	4b44      	ldr	r3, [pc, #272]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d116      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8a:	4b41      	ldr	r3, [pc, #260]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x186>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e1d3      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4937      	ldr	r1, [pc, #220]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab6:	e03a      	b.n	8003b2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d020      	beq.n	8003b02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac0:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <HAL_RCC_OscConfig+0x278>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7fe fbf5 	bl	80022b4 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ace:	f7fe fbf1 	bl	80022b4 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e1b4      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae0:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aec:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4925      	ldr	r1, [pc, #148]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	600b      	str	r3, [r1, #0]
 8003b00:	e015      	b.n	8003b2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b02:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <HAL_RCC_OscConfig+0x278>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fe fbd4 	bl	80022b4 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b10:	f7fe fbd0 	bl	80022b4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e193      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b22:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d036      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d016      	beq.n	8003b70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b48:	f7fe fbb4 	bl	80022b4 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b50:	f7fe fbb0 	bl	80022b4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e173      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b62:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0x234>
 8003b6e:	e01b      	b.n	8003ba8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b76:	f7fe fb9d 	bl	80022b4 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b7c:	e00e      	b.n	8003b9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b7e:	f7fe fb99 	bl	80022b4 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d907      	bls.n	8003b9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e15c      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
 8003b90:	40023800 	.word	0x40023800
 8003b94:	42470000 	.word	0x42470000
 8003b98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b9c:	4b8a      	ldr	r3, [pc, #552]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1ea      	bne.n	8003b7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8097 	beq.w	8003ce4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bba:	4b83      	ldr	r3, [pc, #524]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	4b7f      	ldr	r3, [pc, #508]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	4a7e      	ldr	r2, [pc, #504]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd6:	4b7c      	ldr	r3, [pc, #496]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be2:	2301      	movs	r3, #1
 8003be4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b79      	ldr	r3, [pc, #484]	; (8003dcc <HAL_RCC_OscConfig+0x4b0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d118      	bne.n	8003c24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf2:	4b76      	ldr	r3, [pc, #472]	; (8003dcc <HAL_RCC_OscConfig+0x4b0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a75      	ldr	r2, [pc, #468]	; (8003dcc <HAL_RCC_OscConfig+0x4b0>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfe:	f7fe fb59 	bl	80022b4 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c06:	f7fe fb55 	bl	80022b4 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e118      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c18:	4b6c      	ldr	r3, [pc, #432]	; (8003dcc <HAL_RCC_OscConfig+0x4b0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d106      	bne.n	8003c3a <HAL_RCC_OscConfig+0x31e>
 8003c2c:	4b66      	ldr	r3, [pc, #408]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	4a65      	ldr	r2, [pc, #404]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	6713      	str	r3, [r2, #112]	; 0x70
 8003c38:	e01c      	b.n	8003c74 <HAL_RCC_OscConfig+0x358>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2b05      	cmp	r3, #5
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x340>
 8003c42:	4b61      	ldr	r3, [pc, #388]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	4a60      	ldr	r2, [pc, #384]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c48:	f043 0304 	orr.w	r3, r3, #4
 8003c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4e:	4b5e      	ldr	r3, [pc, #376]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	4a5d      	ldr	r2, [pc, #372]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCC_OscConfig+0x358>
 8003c5c:	4b5a      	ldr	r3, [pc, #360]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	4a59      	ldr	r2, [pc, #356]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	6713      	str	r3, [r2, #112]	; 0x70
 8003c68:	4b57      	ldr	r3, [pc, #348]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	4a56      	ldr	r2, [pc, #344]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c6e:	f023 0304 	bic.w	r3, r3, #4
 8003c72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d015      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fe fb1a 	bl	80022b4 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c82:	e00a      	b.n	8003c9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c84:	f7fe fb16 	bl	80022b4 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e0d7      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9a:	4b4b      	ldr	r3, [pc, #300]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0ee      	beq.n	8003c84 <HAL_RCC_OscConfig+0x368>
 8003ca6:	e014      	b.n	8003cd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca8:	f7fe fb04 	bl	80022b4 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f7fe fb00 	bl	80022b4 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e0c1      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc6:	4b40      	ldr	r3, [pc, #256]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1ee      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d105      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd8:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	4a3a      	ldr	r2, [pc, #232]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80ad 	beq.w	8003e48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cee:	4b36      	ldr	r3, [pc, #216]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d060      	beq.n	8003dbc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d145      	bne.n	8003d8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d02:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <HAL_RCC_OscConfig+0x4b4>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fe fad4 	bl	80022b4 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fe fad0 	bl	80022b4 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e093      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d22:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	019b      	lsls	r3, r3, #6
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	3b01      	subs	r3, #1
 8003d48:	041b      	lsls	r3, r3, #16
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	071b      	lsls	r3, r3, #28
 8003d5a:	491b      	ldr	r1, [pc, #108]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d60:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_RCC_OscConfig+0x4b4>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d66:	f7fe faa5 	bl	80022b4 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6e:	f7fe faa1 	bl	80022b4 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e064      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d80:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x452>
 8003d8c:	e05c      	b.n	8003e48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <HAL_RCC_OscConfig+0x4b4>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fe fa8e 	bl	80022b4 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fe fa8a 	bl	80022b4 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e04d      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x480>
 8003dba:	e045      	b.n	8003e48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d107      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e040      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dd4:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <HAL_RCC_OscConfig+0x538>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d030      	beq.n	8003e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d129      	bne.n	8003e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d122      	bne.n	8003e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e04:	4013      	ands	r3, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d119      	bne.n	8003e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	085b      	lsrs	r3, r3, #1
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d10f      	bne.n	8003e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d107      	bne.n	8003e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800

08003e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e041      	b.n	8003eee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fe f84a 	bl	8001f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f000 fdb2 	bl	8004a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d001      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e04e      	b.n	8003fae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <HAL_TIM_Base_Start_IT+0xc4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d022      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x80>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3a:	d01d      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x80>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d018      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x80>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1e      	ldr	r2, [pc, #120]	; (8003fc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d013      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x80>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00e      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x80>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1b      	ldr	r2, [pc, #108]	; (8003fcc <HAL_TIM_Base_Start_IT+0xd4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x80>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x80>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a18      	ldr	r2, [pc, #96]	; (8003fd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d111      	bne.n	8003f9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b06      	cmp	r3, #6
 8003f88:	d010      	beq.n	8003fac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9a:	e007      	b.n	8003fac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	40000c00 	.word	0x40000c00
 8003fcc:	40010400 	.word	0x40010400
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	40001800 	.word	0x40001800

08003fd8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e041      	b.n	800406e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f839 	bl	8004076 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f000 fcf2 	bl	8004a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <HAL_TIM_OC_Start_IT+0x28>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	bf14      	ite	ne
 80040ac:	2301      	movne	r3, #1
 80040ae:	2300      	moveq	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	e022      	b.n	80040fa <HAL_TIM_OC_Start_IT+0x6e>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d109      	bne.n	80040ce <HAL_TIM_OC_Start_IT+0x42>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	bf14      	ite	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	2300      	moveq	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	e015      	b.n	80040fa <HAL_TIM_OC_Start_IT+0x6e>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d109      	bne.n	80040e8 <HAL_TIM_OC_Start_IT+0x5c>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	bf14      	ite	ne
 80040e0:	2301      	movne	r3, #1
 80040e2:	2300      	moveq	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	e008      	b.n	80040fa <HAL_TIM_OC_Start_IT+0x6e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	bf14      	ite	ne
 80040f4:	2301      	movne	r3, #1
 80040f6:	2300      	moveq	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0c7      	b.n	8004292 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d104      	bne.n	8004112 <HAL_TIM_OC_Start_IT+0x86>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004110:	e013      	b.n	800413a <HAL_TIM_OC_Start_IT+0xae>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b04      	cmp	r3, #4
 8004116:	d104      	bne.n	8004122 <HAL_TIM_OC_Start_IT+0x96>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004120:	e00b      	b.n	800413a <HAL_TIM_OC_Start_IT+0xae>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b08      	cmp	r3, #8
 8004126:	d104      	bne.n	8004132 <HAL_TIM_OC_Start_IT+0xa6>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004130:	e003      	b.n	800413a <HAL_TIM_OC_Start_IT+0xae>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2202      	movs	r2, #2
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b0c      	cmp	r3, #12
 800413e:	d841      	bhi.n	80041c4 <HAL_TIM_OC_Start_IT+0x138>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <HAL_TIM_OC_Start_IT+0xbc>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	0800417d 	.word	0x0800417d
 800414c:	080041c5 	.word	0x080041c5
 8004150:	080041c5 	.word	0x080041c5
 8004154:	080041c5 	.word	0x080041c5
 8004158:	0800418f 	.word	0x0800418f
 800415c:	080041c5 	.word	0x080041c5
 8004160:	080041c5 	.word	0x080041c5
 8004164:	080041c5 	.word	0x080041c5
 8004168:	080041a1 	.word	0x080041a1
 800416c:	080041c5 	.word	0x080041c5
 8004170:	080041c5 	.word	0x080041c5
 8004174:	080041c5 	.word	0x080041c5
 8004178:	080041b3 	.word	0x080041b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0202 	orr.w	r2, r2, #2
 800418a:	60da      	str	r2, [r3, #12]
      break;
 800418c:	e01d      	b.n	80041ca <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0204 	orr.w	r2, r2, #4
 800419c:	60da      	str	r2, [r3, #12]
      break;
 800419e:	e014      	b.n	80041ca <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0208 	orr.w	r2, r2, #8
 80041ae:	60da      	str	r2, [r3, #12]
      break;
 80041b0:	e00b      	b.n	80041ca <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0210 	orr.w	r2, r2, #16
 80041c0:	60da      	str	r2, [r3, #12]
      break;
 80041c2:	e002      	b.n	80041ca <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
      break;
 80041c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d15f      	bne.n	8004290 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2201      	movs	r2, #1
 80041d6:	6839      	ldr	r1, [r7, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 ff8c 	bl	80050f6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a2e      	ldr	r2, [pc, #184]	; (800429c <HAL_TIM_OC_Start_IT+0x210>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_TIM_OC_Start_IT+0x166>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a2c      	ldr	r2, [pc, #176]	; (80042a0 <HAL_TIM_OC_Start_IT+0x214>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d101      	bne.n	80041f6 <HAL_TIM_OC_Start_IT+0x16a>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_TIM_OC_Start_IT+0x16c>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800420a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a22      	ldr	r2, [pc, #136]	; (800429c <HAL_TIM_OC_Start_IT+0x210>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d022      	beq.n	800425c <HAL_TIM_OC_Start_IT+0x1d0>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421e:	d01d      	beq.n	800425c <HAL_TIM_OC_Start_IT+0x1d0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <HAL_TIM_OC_Start_IT+0x218>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d018      	beq.n	800425c <HAL_TIM_OC_Start_IT+0x1d0>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <HAL_TIM_OC_Start_IT+0x21c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d013      	beq.n	800425c <HAL_TIM_OC_Start_IT+0x1d0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a1c      	ldr	r2, [pc, #112]	; (80042ac <HAL_TIM_OC_Start_IT+0x220>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00e      	beq.n	800425c <HAL_TIM_OC_Start_IT+0x1d0>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a17      	ldr	r2, [pc, #92]	; (80042a0 <HAL_TIM_OC_Start_IT+0x214>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d009      	beq.n	800425c <HAL_TIM_OC_Start_IT+0x1d0>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a18      	ldr	r2, [pc, #96]	; (80042b0 <HAL_TIM_OC_Start_IT+0x224>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d004      	beq.n	800425c <HAL_TIM_OC_Start_IT+0x1d0>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <HAL_TIM_OC_Start_IT+0x228>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d111      	bne.n	8004280 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b06      	cmp	r3, #6
 800426c:	d010      	beq.n	8004290 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0201 	orr.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427e:	e007      	b.n	8004290 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004290:	7bfb      	ldrb	r3, [r7, #15]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40010000 	.word	0x40010000
 80042a0:	40010400 	.word	0x40010400
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40000800 	.word	0x40000800
 80042ac:	40000c00 	.word	0x40000c00
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40001800 	.word	0x40001800

080042b8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b0c      	cmp	r3, #12
 80042ca:	d841      	bhi.n	8004350 <HAL_TIM_OC_Stop_IT+0x98>
 80042cc:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <HAL_TIM_OC_Stop_IT+0x1c>)
 80042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d2:	bf00      	nop
 80042d4:	08004309 	.word	0x08004309
 80042d8:	08004351 	.word	0x08004351
 80042dc:	08004351 	.word	0x08004351
 80042e0:	08004351 	.word	0x08004351
 80042e4:	0800431b 	.word	0x0800431b
 80042e8:	08004351 	.word	0x08004351
 80042ec:	08004351 	.word	0x08004351
 80042f0:	08004351 	.word	0x08004351
 80042f4:	0800432d 	.word	0x0800432d
 80042f8:	08004351 	.word	0x08004351
 80042fc:	08004351 	.word	0x08004351
 8004300:	08004351 	.word	0x08004351
 8004304:	0800433f 	.word	0x0800433f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0202 	bic.w	r2, r2, #2
 8004316:	60da      	str	r2, [r3, #12]
      break;
 8004318:	e01d      	b.n	8004356 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0204 	bic.w	r2, r2, #4
 8004328:	60da      	str	r2, [r3, #12]
      break;
 800432a:	e014      	b.n	8004356 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0208 	bic.w	r2, r2, #8
 800433a:	60da      	str	r2, [r3, #12]
      break;
 800433c:	e00b      	b.n	8004356 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0210 	bic.w	r2, r2, #16
 800434c:	60da      	str	r2, [r3, #12]
      break;
 800434e:	e002      	b.n	8004356 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
      break;
 8004354:	bf00      	nop
  }

  if (status == HAL_OK)
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d161      	bne.n	8004420 <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2200      	movs	r2, #0
 8004362:	6839      	ldr	r1, [r7, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fec6 	bl	80050f6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2f      	ldr	r2, [pc, #188]	; (800442c <HAL_TIM_OC_Stop_IT+0x174>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d004      	beq.n	800437e <HAL_TIM_OC_Stop_IT+0xc6>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a2d      	ldr	r2, [pc, #180]	; (8004430 <HAL_TIM_OC_Stop_IT+0x178>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d101      	bne.n	8004382 <HAL_TIM_OC_Stop_IT+0xca>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <HAL_TIM_OC_Stop_IT+0xcc>
 8004382:	2300      	movs	r3, #0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d017      	beq.n	80043b8 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6a1a      	ldr	r2, [r3, #32]
 800438e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004392:	4013      	ands	r3, r2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10f      	bne.n	80043b8 <HAL_TIM_OC_Stop_IT+0x100>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6a1a      	ldr	r2, [r3, #32]
 800439e:	f240 4344 	movw	r3, #1092	; 0x444
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d107      	bne.n	80043b8 <HAL_TIM_OC_Stop_IT+0x100>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043b6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6a1a      	ldr	r2, [r3, #32]
 80043be:	f241 1311 	movw	r3, #4369	; 0x1111
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10f      	bne.n	80043e8 <HAL_TIM_OC_Stop_IT+0x130>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6a1a      	ldr	r2, [r3, #32]
 80043ce:	f240 4344 	movw	r3, #1092	; 0x444
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d107      	bne.n	80043e8 <HAL_TIM_OC_Stop_IT+0x130>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0201 	bic.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d104      	bne.n	80043f8 <HAL_TIM_OC_Stop_IT+0x140>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f6:	e013      	b.n	8004420 <HAL_TIM_OC_Stop_IT+0x168>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d104      	bne.n	8004408 <HAL_TIM_OC_Stop_IT+0x150>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004406:	e00b      	b.n	8004420 <HAL_TIM_OC_Stop_IT+0x168>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b08      	cmp	r3, #8
 800440c:	d104      	bne.n	8004418 <HAL_TIM_OC_Stop_IT+0x160>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004416:	e003      	b.n	8004420 <HAL_TIM_OC_Stop_IT+0x168>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40010000 	.word	0x40010000
 8004430:	40010400 	.word	0x40010400

08004434 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e041      	b.n	80044cc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f839 	bl	80044d4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3304      	adds	r3, #4
 8004472:	4619      	mov	r1, r3
 8004474:	4610      	mov	r0, r2
 8004476:	f000 fac3 	bl	8004a00 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0208 	bic.w	r2, r2, #8
 8004488:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b02      	cmp	r3, #2
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0202 	mvn.w	r2, #2
 8004514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa49 	bl	80049c2 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fc fee6 	bl	8001304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fa4c 	bl	80049d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b04      	cmp	r3, #4
 8004550:	d122      	bne.n	8004598 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b04      	cmp	r3, #4
 800455e:	d11b      	bne.n	8004598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0204 	mvn.w	r2, #4
 8004568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa1f 	bl	80049c2 <HAL_TIM_IC_CaptureCallback>
 8004584:	e005      	b.n	8004592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fc febc 	bl	8001304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fa22 	bl	80049d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d122      	bne.n	80045ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d11b      	bne.n	80045ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0208 	mvn.w	r2, #8
 80045bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2204      	movs	r2, #4
 80045c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f9f5 	bl	80049c2 <HAL_TIM_IC_CaptureCallback>
 80045d8:	e005      	b.n	80045e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fc fe92 	bl	8001304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f9f8 	bl	80049d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	d122      	bne.n	8004640 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b10      	cmp	r3, #16
 8004606:	d11b      	bne.n	8004640 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0210 	mvn.w	r2, #16
 8004610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2208      	movs	r2, #8
 8004616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f9cb 	bl	80049c2 <HAL_TIM_IC_CaptureCallback>
 800462c:	e005      	b.n	800463a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc fe68 	bl	8001304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f9ce 	bl	80049d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d10e      	bne.n	800466c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d107      	bne.n	800466c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0201 	mvn.w	r2, #1
 8004664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc fe74 	bl	8001354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004676:	2b80      	cmp	r3, #128	; 0x80
 8004678:	d10e      	bne.n	8004698 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004684:	2b80      	cmp	r3, #128	; 0x80
 8004686:	d107      	bne.n	8004698 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fdda 	bl	800524c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a2:	2b40      	cmp	r3, #64	; 0x40
 80046a4:	d10e      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d107      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f993 	bl	80049ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d10e      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d107      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0220 	mvn.w	r2, #32
 80046e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fda4 	bl	8005238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004712:	2302      	movs	r3, #2
 8004714:	e048      	b.n	80047a8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b0c      	cmp	r3, #12
 8004722:	d839      	bhi.n	8004798 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	08004761 	.word	0x08004761
 8004730:	08004799 	.word	0x08004799
 8004734:	08004799 	.word	0x08004799
 8004738:	08004799 	.word	0x08004799
 800473c:	0800476f 	.word	0x0800476f
 8004740:	08004799 	.word	0x08004799
 8004744:	08004799 	.word	0x08004799
 8004748:	08004799 	.word	0x08004799
 800474c:	0800477d 	.word	0x0800477d
 8004750:	08004799 	.word	0x08004799
 8004754:	08004799 	.word	0x08004799
 8004758:	08004799 	.word	0x08004799
 800475c:	0800478b 	.word	0x0800478b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f9ea 	bl	8004b40 <TIM_OC1_SetConfig>
      break;
 800476c:	e017      	b.n	800479e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fa53 	bl	8004c20 <TIM_OC2_SetConfig>
      break;
 800477a:	e010      	b.n	800479e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fac2 	bl	8004d0c <TIM_OC3_SetConfig>
      break;
 8004788:	e009      	b.n	800479e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fb2f 	bl	8004df4 <TIM_OC4_SetConfig>
      break;
 8004796:	e002      	b.n	800479e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	75fb      	strb	r3, [r7, #23]
      break;
 800479c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_TIM_ConfigClockSource+0x1c>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e0b4      	b.n	8004936 <HAL_TIM_ConfigClockSource+0x186>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004804:	d03e      	beq.n	8004884 <HAL_TIM_ConfigClockSource+0xd4>
 8004806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480a:	f200 8087 	bhi.w	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004812:	f000 8086 	beq.w	8004922 <HAL_TIM_ConfigClockSource+0x172>
 8004816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481a:	d87f      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800481c:	2b70      	cmp	r3, #112	; 0x70
 800481e:	d01a      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0xa6>
 8004820:	2b70      	cmp	r3, #112	; 0x70
 8004822:	d87b      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 8004824:	2b60      	cmp	r3, #96	; 0x60
 8004826:	d050      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x11a>
 8004828:	2b60      	cmp	r3, #96	; 0x60
 800482a:	d877      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b50      	cmp	r3, #80	; 0x50
 800482e:	d03c      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0xfa>
 8004830:	2b50      	cmp	r3, #80	; 0x50
 8004832:	d873      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d058      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0x13a>
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d86f      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b30      	cmp	r3, #48	; 0x30
 800483e:	d064      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004840:	2b30      	cmp	r3, #48	; 0x30
 8004842:	d86b      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b20      	cmp	r3, #32
 8004846:	d060      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004848:	2b20      	cmp	r3, #32
 800484a:	d867      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d05c      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004850:	2b10      	cmp	r3, #16
 8004852:	d05a      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004854:	e062      	b.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6899      	ldr	r1, [r3, #8]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f000 fc26 	bl	80050b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004878:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	609a      	str	r2, [r3, #8]
      break;
 8004882:	e04f      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	6899      	ldr	r1, [r3, #8]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f000 fc0f 	bl	80050b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048a6:	609a      	str	r2, [r3, #8]
      break;
 80048a8:	e03c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6859      	ldr	r1, [r3, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	461a      	mov	r2, r3
 80048b8:	f000 fb83 	bl	8004fc2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2150      	movs	r1, #80	; 0x50
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fbdc 	bl	8005080 <TIM_ITRx_SetConfig>
      break;
 80048c8:	e02c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6859      	ldr	r1, [r3, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f000 fba2 	bl	8005020 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2160      	movs	r1, #96	; 0x60
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fbcc 	bl	8005080 <TIM_ITRx_SetConfig>
      break;
 80048e8:	e01c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6859      	ldr	r1, [r3, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f000 fb63 	bl	8004fc2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2140      	movs	r1, #64	; 0x40
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fbbc 	bl	8005080 <TIM_ITRx_SetConfig>
      break;
 8004908:	e00c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f000 fbb3 	bl	8005080 <TIM_ITRx_SetConfig>
      break;
 800491a:	e003      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
      break;
 8004920:	e000      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004952:	2302      	movs	r3, #2
 8004954:	e031      	b.n	80049ba <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004966:	6839      	ldr	r1, [r7, #0]
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fa99 	bl	8004ea0 <TIM_SlaveTimer_SetConfig>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d009      	beq.n	8004988 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e018      	b.n	80049ba <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004996:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049a6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a40      	ldr	r2, [pc, #256]	; (8004b14 <TIM_Base_SetConfig+0x114>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <TIM_Base_SetConfig+0x40>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1e:	d00f      	beq.n	8004a40 <TIM_Base_SetConfig+0x40>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a3d      	ldr	r2, [pc, #244]	; (8004b18 <TIM_Base_SetConfig+0x118>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00b      	beq.n	8004a40 <TIM_Base_SetConfig+0x40>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a3c      	ldr	r2, [pc, #240]	; (8004b1c <TIM_Base_SetConfig+0x11c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d007      	beq.n	8004a40 <TIM_Base_SetConfig+0x40>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a3b      	ldr	r2, [pc, #236]	; (8004b20 <TIM_Base_SetConfig+0x120>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_Base_SetConfig+0x40>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a3a      	ldr	r2, [pc, #232]	; (8004b24 <TIM_Base_SetConfig+0x124>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d108      	bne.n	8004a52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a2f      	ldr	r2, [pc, #188]	; (8004b14 <TIM_Base_SetConfig+0x114>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d02b      	beq.n	8004ab2 <TIM_Base_SetConfig+0xb2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a60:	d027      	beq.n	8004ab2 <TIM_Base_SetConfig+0xb2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a2c      	ldr	r2, [pc, #176]	; (8004b18 <TIM_Base_SetConfig+0x118>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d023      	beq.n	8004ab2 <TIM_Base_SetConfig+0xb2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a2b      	ldr	r2, [pc, #172]	; (8004b1c <TIM_Base_SetConfig+0x11c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d01f      	beq.n	8004ab2 <TIM_Base_SetConfig+0xb2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a2a      	ldr	r2, [pc, #168]	; (8004b20 <TIM_Base_SetConfig+0x120>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d01b      	beq.n	8004ab2 <TIM_Base_SetConfig+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a29      	ldr	r2, [pc, #164]	; (8004b24 <TIM_Base_SetConfig+0x124>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d017      	beq.n	8004ab2 <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a28      	ldr	r2, [pc, #160]	; (8004b28 <TIM_Base_SetConfig+0x128>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d013      	beq.n	8004ab2 <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a27      	ldr	r2, [pc, #156]	; (8004b2c <TIM_Base_SetConfig+0x12c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00f      	beq.n	8004ab2 <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a26      	ldr	r2, [pc, #152]	; (8004b30 <TIM_Base_SetConfig+0x130>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00b      	beq.n	8004ab2 <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a25      	ldr	r2, [pc, #148]	; (8004b34 <TIM_Base_SetConfig+0x134>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a24      	ldr	r2, [pc, #144]	; (8004b38 <TIM_Base_SetConfig+0x138>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d003      	beq.n	8004ab2 <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a23      	ldr	r2, [pc, #140]	; (8004b3c <TIM_Base_SetConfig+0x13c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d108      	bne.n	8004ac4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <TIM_Base_SetConfig+0x114>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d003      	beq.n	8004af8 <TIM_Base_SetConfig+0xf8>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a0c      	ldr	r2, [pc, #48]	; (8004b24 <TIM_Base_SetConfig+0x124>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d103      	bne.n	8004b00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	615a      	str	r2, [r3, #20]
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800
 8004b20:	40000c00 	.word	0x40000c00
 8004b24:	40010400 	.word	0x40010400
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800
 8004b34:	40001800 	.word	0x40001800
 8004b38:	40001c00 	.word	0x40001c00
 8004b3c:	40002000 	.word	0x40002000

08004b40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	f023 0201 	bic.w	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0303 	bic.w	r3, r3, #3
 8004b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f023 0302 	bic.w	r3, r3, #2
 8004b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a20      	ldr	r2, [pc, #128]	; (8004c18 <TIM_OC1_SetConfig+0xd8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d003      	beq.n	8004ba4 <TIM_OC1_SetConfig+0x64>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a1f      	ldr	r2, [pc, #124]	; (8004c1c <TIM_OC1_SetConfig+0xdc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d10c      	bne.n	8004bbe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f023 0308 	bic.w	r3, r3, #8
 8004baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f023 0304 	bic.w	r3, r3, #4
 8004bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <TIM_OC1_SetConfig+0xd8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d003      	beq.n	8004bce <TIM_OC1_SetConfig+0x8e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a14      	ldr	r2, [pc, #80]	; (8004c1c <TIM_OC1_SetConfig+0xdc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d111      	bne.n	8004bf2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	621a      	str	r2, [r3, #32]
}
 8004c0c:	bf00      	nop
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	40010000 	.word	0x40010000
 8004c1c:	40010400 	.word	0x40010400

08004c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f023 0210 	bic.w	r2, r3, #16
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	021b      	lsls	r3, r3, #8
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f023 0320 	bic.w	r3, r3, #32
 8004c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a22      	ldr	r2, [pc, #136]	; (8004d04 <TIM_OC2_SetConfig+0xe4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_OC2_SetConfig+0x68>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a21      	ldr	r2, [pc, #132]	; (8004d08 <TIM_OC2_SetConfig+0xe8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d10d      	bne.n	8004ca4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a17      	ldr	r2, [pc, #92]	; (8004d04 <TIM_OC2_SetConfig+0xe4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d003      	beq.n	8004cb4 <TIM_OC2_SetConfig+0x94>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <TIM_OC2_SetConfig+0xe8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d113      	bne.n	8004cdc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	621a      	str	r2, [r3, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40010400 	.word	0x40010400

08004d0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0303 	bic.w	r3, r3, #3
 8004d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a21      	ldr	r2, [pc, #132]	; (8004dec <TIM_OC3_SetConfig+0xe0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d003      	beq.n	8004d72 <TIM_OC3_SetConfig+0x66>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a20      	ldr	r2, [pc, #128]	; (8004df0 <TIM_OC3_SetConfig+0xe4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d10d      	bne.n	8004d8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a16      	ldr	r2, [pc, #88]	; (8004dec <TIM_OC3_SetConfig+0xe0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d003      	beq.n	8004d9e <TIM_OC3_SetConfig+0x92>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a15      	ldr	r2, [pc, #84]	; (8004df0 <TIM_OC3_SetConfig+0xe4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d113      	bne.n	8004dc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	621a      	str	r2, [r3, #32]
}
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40010000 	.word	0x40010000
 8004df0:	40010400 	.word	0x40010400

08004df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	031b      	lsls	r3, r3, #12
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a12      	ldr	r2, [pc, #72]	; (8004e98 <TIM_OC4_SetConfig+0xa4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_OC4_SetConfig+0x68>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a11      	ldr	r2, [pc, #68]	; (8004e9c <TIM_OC4_SetConfig+0xa8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d109      	bne.n	8004e70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	019b      	lsls	r3, r3, #6
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40010400 	.word	0x40010400

08004ea0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f023 0307 	bic.w	r3, r3, #7
 8004ece:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b70      	cmp	r3, #112	; 0x70
 8004ee8:	d01a      	beq.n	8004f20 <TIM_SlaveTimer_SetConfig+0x80>
 8004eea:	2b70      	cmp	r3, #112	; 0x70
 8004eec:	d860      	bhi.n	8004fb0 <TIM_SlaveTimer_SetConfig+0x110>
 8004eee:	2b60      	cmp	r3, #96	; 0x60
 8004ef0:	d054      	beq.n	8004f9c <TIM_SlaveTimer_SetConfig+0xfc>
 8004ef2:	2b60      	cmp	r3, #96	; 0x60
 8004ef4:	d85c      	bhi.n	8004fb0 <TIM_SlaveTimer_SetConfig+0x110>
 8004ef6:	2b50      	cmp	r3, #80	; 0x50
 8004ef8:	d046      	beq.n	8004f88 <TIM_SlaveTimer_SetConfig+0xe8>
 8004efa:	2b50      	cmp	r3, #80	; 0x50
 8004efc:	d858      	bhi.n	8004fb0 <TIM_SlaveTimer_SetConfig+0x110>
 8004efe:	2b40      	cmp	r3, #64	; 0x40
 8004f00:	d019      	beq.n	8004f36 <TIM_SlaveTimer_SetConfig+0x96>
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d854      	bhi.n	8004fb0 <TIM_SlaveTimer_SetConfig+0x110>
 8004f06:	2b30      	cmp	r3, #48	; 0x30
 8004f08:	d055      	beq.n	8004fb6 <TIM_SlaveTimer_SetConfig+0x116>
 8004f0a:	2b30      	cmp	r3, #48	; 0x30
 8004f0c:	d850      	bhi.n	8004fb0 <TIM_SlaveTimer_SetConfig+0x110>
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d051      	beq.n	8004fb6 <TIM_SlaveTimer_SetConfig+0x116>
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d84c      	bhi.n	8004fb0 <TIM_SlaveTimer_SetConfig+0x110>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d04d      	beq.n	8004fb6 <TIM_SlaveTimer_SetConfig+0x116>
 8004f1a:	2b10      	cmp	r3, #16
 8004f1c:	d04b      	beq.n	8004fb6 <TIM_SlaveTimer_SetConfig+0x116>
 8004f1e:	e047      	b.n	8004fb0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68d9      	ldr	r1, [r3, #12]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f000 f8c1 	bl	80050b6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004f34:	e040      	b.n	8004fb8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d101      	bne.n	8004f42 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e03b      	b.n	8004fba <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a1a      	ldr	r2, [r3, #32]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f68:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	621a      	str	r2, [r3, #32]
      break;
 8004f86:	e017      	b.n	8004fb8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6899      	ldr	r1, [r3, #8]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	461a      	mov	r2, r3
 8004f96:	f000 f814 	bl	8004fc2 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004f9a:	e00d      	b.n	8004fb8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	6899      	ldr	r1, [r3, #8]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	f000 f839 	bl	8005020 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004fae:	e003      	b.n	8004fb8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb4:	e000      	b.n	8004fb8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004fb6:	bf00      	nop
  }

  return status;
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b087      	sub	sp, #28
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f023 0201 	bic.w	r2, r3, #1
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f023 030a 	bic.w	r3, r3, #10
 8004ffe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	621a      	str	r2, [r3, #32]
}
 8005014:	bf00      	nop
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f023 0210 	bic.w	r2, r3, #16
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800504a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	031b      	lsls	r3, r3, #12
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800505c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	621a      	str	r2, [r3, #32]
}
 8005074:	bf00      	nop
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	f043 0307 	orr.w	r3, r3, #7
 80050a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	609a      	str	r2, [r3, #8]
}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b087      	sub	sp, #28
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
 80050c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	021a      	lsls	r2, r3, #8
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	431a      	orrs	r2, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4313      	orrs	r3, r2
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	609a      	str	r2, [r3, #8]
}
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b087      	sub	sp, #28
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f003 031f 	and.w	r3, r3, #31
 8005108:	2201      	movs	r2, #1
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a1a      	ldr	r2, [r3, #32]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	43db      	mvns	r3, r3
 8005118:	401a      	ands	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a1a      	ldr	r2, [r3, #32]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	fa01 f303 	lsl.w	r3, r1, r3
 800512e:	431a      	orrs	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	621a      	str	r2, [r3, #32]
}
 8005134:	bf00      	nop
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005150:	2b01      	cmp	r3, #1
 8005152:	d101      	bne.n	8005158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005154:	2302      	movs	r3, #2
 8005156:	e05a      	b.n	800520e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a21      	ldr	r2, [pc, #132]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d022      	beq.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a4:	d01d      	beq.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d018      	beq.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1b      	ldr	r2, [pc, #108]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1a      	ldr	r2, [pc, #104]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00e      	beq.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a18      	ldr	r2, [pc, #96]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d009      	beq.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a17      	ldr	r2, [pc, #92]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d004      	beq.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a15      	ldr	r2, [pc, #84]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d10c      	bne.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40010000 	.word	0x40010000
 8005220:	40000400 	.word	0x40000400
 8005224:	40000800 	.word	0x40000800
 8005228:	40000c00 	.word	0x40000c00
 800522c:	40010400 	.word	0x40010400
 8005230:	40014000 	.word	0x40014000
 8005234:	40001800 	.word	0x40001800

08005238 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e03f      	b.n	80052f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fc ff34 	bl	80020f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2224      	movs	r2, #36	; 0x24
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fddf 	bl	8005e68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695a      	ldr	r2, [r3, #20]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b08a      	sub	sp, #40	; 0x28
 80052fe:	af02      	add	r7, sp, #8
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	4613      	mov	r3, r2
 8005308:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b20      	cmp	r3, #32
 8005318:	d17c      	bne.n	8005414 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <HAL_UART_Transmit+0x2c>
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e075      	b.n	8005416 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_UART_Transmit+0x3e>
 8005334:	2302      	movs	r3, #2
 8005336:	e06e      	b.n	8005416 <HAL_UART_Transmit+0x11c>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2221      	movs	r2, #33	; 0x21
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800534e:	f7fc ffb1 	bl	80022b4 <HAL_GetTick>
 8005352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	88fa      	ldrh	r2, [r7, #6]
 8005358:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	88fa      	ldrh	r2, [r7, #6]
 800535e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005368:	d108      	bne.n	800537c <HAL_UART_Transmit+0x82>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d104      	bne.n	800537c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	e003      	b.n	8005384 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005380:	2300      	movs	r3, #0
 8005382:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800538c:	e02a      	b.n	80053e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2200      	movs	r2, #0
 8005396:	2180      	movs	r1, #128	; 0x80
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fb1f 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e036      	b.n	8005416 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	3302      	adds	r3, #2
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	e007      	b.n	80053d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	781a      	ldrb	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	3301      	adds	r3, #1
 80053d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1cf      	bne.n	800538e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2200      	movs	r2, #0
 80053f6:	2140      	movs	r1, #64	; 0x40
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 faef 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e006      	b.n	8005416 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	e000      	b.n	8005416 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005414:	2302      	movs	r3, #2
  }
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b084      	sub	sp, #16
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	4613      	mov	r3, r2
 800542a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b20      	cmp	r3, #32
 8005436:	d11d      	bne.n	8005474 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_UART_Receive_IT+0x26>
 800543e:	88fb      	ldrh	r3, [r7, #6]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e016      	b.n	8005476 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_UART_Receive_IT+0x38>
 8005452:	2302      	movs	r3, #2
 8005454:	e00f      	b.n	8005476 <HAL_UART_Receive_IT+0x58>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	461a      	mov	r2, r3
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 fb24 	bl	8005ab8 <UART_Start_Receive_IT>
 8005470:	4603      	mov	r3, r0
 8005472:	e000      	b.n	8005476 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
  }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b0ba      	sub	sp, #232	; 0xe8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80054be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10f      	bne.n	80054e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <HAL_UART_IRQHandler+0x66>
 80054d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fc07 	bl	8005cf2 <UART_Receive_IT>
      return;
 80054e4:	e256      	b.n	8005994 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 80de 	beq.w	80056ac <HAL_UART_IRQHandler+0x22c>
 80054f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d106      	bne.n	800550a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005500:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80d1 	beq.w	80056ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800550a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <HAL_UART_IRQHandler+0xae>
 8005516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800551a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f043 0201 	orr.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800552e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00b      	beq.n	8005552 <HAL_UART_IRQHandler+0xd2>
 800553a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f043 0202 	orr.w	r2, r3, #2
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <HAL_UART_IRQHandler+0xf6>
 800555e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f043 0204 	orr.w	r2, r3, #4
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d011      	beq.n	80055a6 <HAL_UART_IRQHandler+0x126>
 8005582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d105      	bne.n	800559a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800558e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f043 0208 	orr.w	r2, r3, #8
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 81ed 	beq.w	800598a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d008      	beq.n	80055ce <HAL_UART_IRQHandler+0x14e>
 80055bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fb92 	bl	8005cf2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <HAL_UART_IRQHandler+0x17a>
 80055f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d04f      	beq.n	800569a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fa9a 	bl	8005b34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560a:	2b40      	cmp	r3, #64	; 0x40
 800560c:	d141      	bne.n	8005692 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3314      	adds	r3, #20
 8005614:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005624:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800562c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3314      	adds	r3, #20
 8005636:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800563a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800563e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005646:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005652:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1d9      	bne.n	800560e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	2b00      	cmp	r3, #0
 8005660:	d013      	beq.n	800568a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	4a7d      	ldr	r2, [pc, #500]	; (800585c <HAL_UART_IRQHandler+0x3dc>)
 8005668:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	4618      	mov	r0, r3
 8005670:	f7fd fc39 	bl	8002ee6 <HAL_DMA_Abort_IT>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d016      	beq.n	80056a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005684:	4610      	mov	r0, r2
 8005686:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005688:	e00e      	b.n	80056a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f990 	bl	80059b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005690:	e00a      	b.n	80056a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f98c 	bl	80059b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005698:	e006      	b.n	80056a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f988 	bl	80059b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80056a6:	e170      	b.n	800598a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a8:	bf00      	nop
    return;
 80056aa:	e16e      	b.n	800598a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	f040 814a 	bne.w	800594a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ba:	f003 0310 	and.w	r3, r3, #16
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 8143 	beq.w	800594a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80056c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c8:	f003 0310 	and.w	r3, r3, #16
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 813c 	beq.w	800594a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056d2:	2300      	movs	r3, #0
 80056d4:	60bb      	str	r3, [r7, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	60bb      	str	r3, [r7, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	60bb      	str	r3, [r7, #8]
 80056e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	f040 80b4 	bne.w	8005860 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005704:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 8140 	beq.w	800598e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005712:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005716:	429a      	cmp	r2, r3
 8005718:	f080 8139 	bcs.w	800598e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005722:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572e:	f000 8088 	beq.w	8005842 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	330c      	adds	r3, #12
 8005738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800574c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005750:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330c      	adds	r3, #12
 800575a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800575e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800576a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1d9      	bne.n	8005732 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3314      	adds	r3, #20
 8005784:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800578e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005790:	f023 0301 	bic.w	r3, r3, #1
 8005794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3314      	adds	r3, #20
 800579e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e1      	bne.n	800577e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3314      	adds	r3, #20
 80057c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80057ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3314      	adds	r3, #20
 80057da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e3      	bne.n	80057ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005812:	f023 0310 	bic.w	r3, r3, #16
 8005816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	330c      	adds	r3, #12
 8005820:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005824:	65ba      	str	r2, [r7, #88]	; 0x58
 8005826:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800582a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e3      	bne.n	8005800 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	4618      	mov	r0, r3
 800583e:	f7fd fae2 	bl	8002e06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800584a:	b29b      	uxth	r3, r3
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	b29b      	uxth	r3, r3
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f8b6 	bl	80059c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005858:	e099      	b.n	800598e <HAL_UART_IRQHandler+0x50e>
 800585a:	bf00      	nop
 800585c:	08005bfb 	.word	0x08005bfb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005868:	b29b      	uxth	r3, r3
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 808b 	beq.w	8005992 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800587c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8086 	beq.w	8005992 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800589c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80058aa:	647a      	str	r2, [r7, #68]	; 0x44
 80058ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e3      	bne.n	8005886 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3314      	adds	r3, #20
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	623b      	str	r3, [r7, #32]
   return(result);
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	f023 0301 	bic.w	r3, r3, #1
 80058d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3314      	adds	r3, #20
 80058de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058e2:	633a      	str	r2, [r7, #48]	; 0x30
 80058e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e3      	bne.n	80058be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	e853 3f00 	ldrex	r3, [r3]
 8005912:	60fb      	str	r3, [r7, #12]
   return(result);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0310 	bic.w	r3, r3, #16
 800591a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	330c      	adds	r3, #12
 8005924:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005928:	61fa      	str	r2, [r7, #28]
 800592a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	69b9      	ldr	r1, [r7, #24]
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	617b      	str	r3, [r7, #20]
   return(result);
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e3      	bne.n	8005904 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800593c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f83e 	bl	80059c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005948:	e023      	b.n	8005992 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800594a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <HAL_UART_IRQHandler+0x4ea>
 8005956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800595a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f95d 	bl	8005c22 <UART_Transmit_IT>
    return;
 8005968:	e014      	b.n	8005994 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800596a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00e      	beq.n	8005994 <HAL_UART_IRQHandler+0x514>
 8005976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d008      	beq.n	8005994 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f99d 	bl	8005cc2 <UART_EndTransmit_IT>
    return;
 8005988:	e004      	b.n	8005994 <HAL_UART_IRQHandler+0x514>
    return;
 800598a:	bf00      	nop
 800598c:	e002      	b.n	8005994 <HAL_UART_IRQHandler+0x514>
      return;
 800598e:	bf00      	nop
 8005990:	e000      	b.n	8005994 <HAL_UART_IRQHandler+0x514>
      return;
 8005992:	bf00      	nop
  }
}
 8005994:	37e8      	adds	r7, #232	; 0xe8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop

0800599c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b090      	sub	sp, #64	; 0x40
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ec:	e050      	b.n	8005a90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d04c      	beq.n	8005a90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d007      	beq.n	8005a0c <UART_WaitOnFlagUntilTimeout+0x30>
 80059fc:	f7fc fc5a 	bl	80022b4 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d241      	bcs.n	8005a90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	330c      	adds	r3, #12
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	330c      	adds	r3, #12
 8005a2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a2c:	637a      	str	r2, [r7, #52]	; 0x34
 8005a2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e5      	bne.n	8005a0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3314      	adds	r3, #20
 8005a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f023 0301 	bic.w	r3, r3, #1
 8005a56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3314      	adds	r3, #20
 8005a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a60:	623a      	str	r2, [r7, #32]
 8005a62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	69f9      	ldr	r1, [r7, #28]
 8005a66:	6a3a      	ldr	r2, [r7, #32]
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e5      	bne.n	8005a40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e00f      	b.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	bf0c      	ite	eq
 8005aa0:	2301      	moveq	r3, #1
 8005aa2:	2300      	movne	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d09f      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3740      	adds	r7, #64	; 0x40
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	88fa      	ldrh	r2, [r7, #6]
 8005ad0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	88fa      	ldrh	r2, [r7, #6]
 8005ad6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2222      	movs	r2, #34	; 0x22
 8005ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68da      	ldr	r2, [r3, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b04:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695a      	ldr	r2, [r3, #20]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0201 	orr.w	r2, r2, #1
 8005b14:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0220 	orr.w	r2, r2, #32
 8005b24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b095      	sub	sp, #84	; 0x54
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b5c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e5      	bne.n	8005b3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3314      	adds	r3, #20
 8005b76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f023 0301 	bic.w	r3, r3, #1
 8005b86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3314      	adds	r3, #20
 8005b8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e5      	bne.n	8005b70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d119      	bne.n	8005be0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	330c      	adds	r3, #12
 8005bb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f023 0310 	bic.w	r3, r3, #16
 8005bc2:	647b      	str	r3, [r7, #68]	; 0x44
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bcc:	61ba      	str	r2, [r7, #24]
 8005bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	6979      	ldr	r1, [r7, #20]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e5      	bne.n	8005bac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bee:	bf00      	nop
 8005bf0:	3754      	adds	r7, #84	; 0x54
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7ff fecb 	bl	80059b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c1a:	bf00      	nop
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b21      	cmp	r3, #33	; 0x21
 8005c34:	d13e      	bne.n	8005cb4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	d114      	bne.n	8005c6a <UART_Transmit_IT+0x48>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d110      	bne.n	8005c6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	1c9a      	adds	r2, r3, #2
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	621a      	str	r2, [r3, #32]
 8005c68:	e008      	b.n	8005c7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	1c59      	adds	r1, r3, #1
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6211      	str	r1, [r2, #32]
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10f      	bne.n	8005cb0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e000      	b.n	8005cb6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cb4:	2302      	movs	r3, #2
  }
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff fe5a 	bl	800599c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b08c      	sub	sp, #48	; 0x30
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b22      	cmp	r3, #34	; 0x22
 8005d04:	f040 80ab 	bne.w	8005e5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d10:	d117      	bne.n	8005d42 <UART_Receive_IT+0x50>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d113      	bne.n	8005d42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	1c9a      	adds	r2, r3, #2
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d40:	e026      	b.n	8005d90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d54:	d007      	beq.n	8005d66 <UART_Receive_IT+0x74>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <UART_Receive_IT+0x82>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	e008      	b.n	8005d86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d15a      	bne.n	8005e5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0220 	bic.w	r2, r2, #32
 8005db2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	695a      	ldr	r2, [r3, #20]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d135      	bne.n	8005e50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	330c      	adds	r3, #12
 8005df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f023 0310 	bic.w	r3, r3, #16
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	330c      	adds	r3, #12
 8005e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0a:	623a      	str	r2, [r7, #32]
 8005e0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	69f9      	ldr	r1, [r7, #28]
 8005e10:	6a3a      	ldr	r2, [r7, #32]
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e5      	bne.n	8005dea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0310 	and.w	r3, r3, #16
 8005e28:	2b10      	cmp	r3, #16
 8005e2a:	d10a      	bne.n	8005e42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e46:	4619      	mov	r1, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff fdbb 	bl	80059c4 <HAL_UARTEx_RxEventCallback>
 8005e4e:	e002      	b.n	8005e56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7fb fc21 	bl	8001698 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e002      	b.n	8005e60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e000      	b.n	8005e60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e5e:	2302      	movs	r3, #2
  }
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3730      	adds	r7, #48	; 0x30
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e6c:	b0c0      	sub	sp, #256	; 0x100
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e84:	68d9      	ldr	r1, [r3, #12]
 8005e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	ea40 0301 	orr.w	r3, r0, r1
 8005e90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ec0:	f021 010c 	bic.w	r1, r1, #12
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ece:	430b      	orrs	r3, r1
 8005ed0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee2:	6999      	ldr	r1, [r3, #24]
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	ea40 0301 	orr.w	r3, r0, r1
 8005eee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b8f      	ldr	r3, [pc, #572]	; (8006134 <UART_SetConfig+0x2cc>)
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d005      	beq.n	8005f08 <UART_SetConfig+0xa0>
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	4b8d      	ldr	r3, [pc, #564]	; (8006138 <UART_SetConfig+0x2d0>)
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d104      	bne.n	8005f12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f08:	f7fd fac4 	bl	8003494 <HAL_RCC_GetPCLK2Freq>
 8005f0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f10:	e003      	b.n	8005f1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f12:	f7fd faab 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 8005f16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f24:	f040 810c 	bne.w	8006140 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f3a:	4622      	mov	r2, r4
 8005f3c:	462b      	mov	r3, r5
 8005f3e:	1891      	adds	r1, r2, r2
 8005f40:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f42:	415b      	adcs	r3, r3
 8005f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	eb12 0801 	adds.w	r8, r2, r1
 8005f50:	4629      	mov	r1, r5
 8005f52:	eb43 0901 	adc.w	r9, r3, r1
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f6a:	4690      	mov	r8, r2
 8005f6c:	4699      	mov	r9, r3
 8005f6e:	4623      	mov	r3, r4
 8005f70:	eb18 0303 	adds.w	r3, r8, r3
 8005f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f78:	462b      	mov	r3, r5
 8005f7a:	eb49 0303 	adc.w	r3, r9, r3
 8005f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f96:	460b      	mov	r3, r1
 8005f98:	18db      	adds	r3, r3, r3
 8005f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	eb42 0303 	adc.w	r3, r2, r3
 8005fa2:	657b      	str	r3, [r7, #84]	; 0x54
 8005fa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fac:	f7fa fe8c 	bl	8000cc8 <__aeabi_uldivmod>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4b61      	ldr	r3, [pc, #388]	; (800613c <UART_SetConfig+0x2d4>)
 8005fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	011c      	lsls	r4, r3, #4
 8005fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005fcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005fd0:	4642      	mov	r2, r8
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	1891      	adds	r1, r2, r2
 8005fd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005fd8:	415b      	adcs	r3, r3
 8005fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fe0:	4641      	mov	r1, r8
 8005fe2:	eb12 0a01 	adds.w	sl, r2, r1
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	eb43 0b01 	adc.w	fp, r3, r1
 8005fec:	f04f 0200 	mov.w	r2, #0
 8005ff0:	f04f 0300 	mov.w	r3, #0
 8005ff4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ff8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ffc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006000:	4692      	mov	sl, r2
 8006002:	469b      	mov	fp, r3
 8006004:	4643      	mov	r3, r8
 8006006:	eb1a 0303 	adds.w	r3, sl, r3
 800600a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800600e:	464b      	mov	r3, r9
 8006010:	eb4b 0303 	adc.w	r3, fp, r3
 8006014:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006024:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006028:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800602c:	460b      	mov	r3, r1
 800602e:	18db      	adds	r3, r3, r3
 8006030:	643b      	str	r3, [r7, #64]	; 0x40
 8006032:	4613      	mov	r3, r2
 8006034:	eb42 0303 	adc.w	r3, r2, r3
 8006038:	647b      	str	r3, [r7, #68]	; 0x44
 800603a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800603e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006042:	f7fa fe41 	bl	8000cc8 <__aeabi_uldivmod>
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	4611      	mov	r1, r2
 800604c:	4b3b      	ldr	r3, [pc, #236]	; (800613c <UART_SetConfig+0x2d4>)
 800604e:	fba3 2301 	umull	r2, r3, r3, r1
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	2264      	movs	r2, #100	; 0x64
 8006056:	fb02 f303 	mul.w	r3, r2, r3
 800605a:	1acb      	subs	r3, r1, r3
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006062:	4b36      	ldr	r3, [pc, #216]	; (800613c <UART_SetConfig+0x2d4>)
 8006064:	fba3 2302 	umull	r2, r3, r3, r2
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006070:	441c      	add	r4, r3
 8006072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006076:	2200      	movs	r2, #0
 8006078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800607c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006080:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006084:	4642      	mov	r2, r8
 8006086:	464b      	mov	r3, r9
 8006088:	1891      	adds	r1, r2, r2
 800608a:	63b9      	str	r1, [r7, #56]	; 0x38
 800608c:	415b      	adcs	r3, r3
 800608e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006090:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006094:	4641      	mov	r1, r8
 8006096:	1851      	adds	r1, r2, r1
 8006098:	6339      	str	r1, [r7, #48]	; 0x30
 800609a:	4649      	mov	r1, r9
 800609c:	414b      	adcs	r3, r1
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060ac:	4659      	mov	r1, fp
 80060ae:	00cb      	lsls	r3, r1, #3
 80060b0:	4651      	mov	r1, sl
 80060b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060b6:	4651      	mov	r1, sl
 80060b8:	00ca      	lsls	r2, r1, #3
 80060ba:	4610      	mov	r0, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	4603      	mov	r3, r0
 80060c0:	4642      	mov	r2, r8
 80060c2:	189b      	adds	r3, r3, r2
 80060c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060c8:	464b      	mov	r3, r9
 80060ca:	460a      	mov	r2, r1
 80060cc:	eb42 0303 	adc.w	r3, r2, r3
 80060d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80060e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060e8:	460b      	mov	r3, r1
 80060ea:	18db      	adds	r3, r3, r3
 80060ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ee:	4613      	mov	r3, r2
 80060f0:	eb42 0303 	adc.w	r3, r2, r3
 80060f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060fe:	f7fa fde3 	bl	8000cc8 <__aeabi_uldivmod>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4b0d      	ldr	r3, [pc, #52]	; (800613c <UART_SetConfig+0x2d4>)
 8006108:	fba3 1302 	umull	r1, r3, r3, r2
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	2164      	movs	r1, #100	; 0x64
 8006110:	fb01 f303 	mul.w	r3, r1, r3
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	3332      	adds	r3, #50	; 0x32
 800611a:	4a08      	ldr	r2, [pc, #32]	; (800613c <UART_SetConfig+0x2d4>)
 800611c:	fba2 2303 	umull	r2, r3, r2, r3
 8006120:	095b      	lsrs	r3, r3, #5
 8006122:	f003 0207 	and.w	r2, r3, #7
 8006126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4422      	add	r2, r4
 800612e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006130:	e105      	b.n	800633e <UART_SetConfig+0x4d6>
 8006132:	bf00      	nop
 8006134:	40011000 	.word	0x40011000
 8006138:	40011400 	.word	0x40011400
 800613c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006144:	2200      	movs	r2, #0
 8006146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800614a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800614e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006152:	4642      	mov	r2, r8
 8006154:	464b      	mov	r3, r9
 8006156:	1891      	adds	r1, r2, r2
 8006158:	6239      	str	r1, [r7, #32]
 800615a:	415b      	adcs	r3, r3
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
 800615e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006162:	4641      	mov	r1, r8
 8006164:	1854      	adds	r4, r2, r1
 8006166:	4649      	mov	r1, r9
 8006168:	eb43 0501 	adc.w	r5, r3, r1
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	00eb      	lsls	r3, r5, #3
 8006176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800617a:	00e2      	lsls	r2, r4, #3
 800617c:	4614      	mov	r4, r2
 800617e:	461d      	mov	r5, r3
 8006180:	4643      	mov	r3, r8
 8006182:	18e3      	adds	r3, r4, r3
 8006184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006188:	464b      	mov	r3, r9
 800618a:	eb45 0303 	adc.w	r3, r5, r3
 800618e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800619e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061ae:	4629      	mov	r1, r5
 80061b0:	008b      	lsls	r3, r1, #2
 80061b2:	4621      	mov	r1, r4
 80061b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061b8:	4621      	mov	r1, r4
 80061ba:	008a      	lsls	r2, r1, #2
 80061bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061c0:	f7fa fd82 	bl	8000cc8 <__aeabi_uldivmod>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4b60      	ldr	r3, [pc, #384]	; (800634c <UART_SetConfig+0x4e4>)
 80061ca:	fba3 2302 	umull	r2, r3, r3, r2
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	011c      	lsls	r4, r3, #4
 80061d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80061e4:	4642      	mov	r2, r8
 80061e6:	464b      	mov	r3, r9
 80061e8:	1891      	adds	r1, r2, r2
 80061ea:	61b9      	str	r1, [r7, #24]
 80061ec:	415b      	adcs	r3, r3
 80061ee:	61fb      	str	r3, [r7, #28]
 80061f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061f4:	4641      	mov	r1, r8
 80061f6:	1851      	adds	r1, r2, r1
 80061f8:	6139      	str	r1, [r7, #16]
 80061fa:	4649      	mov	r1, r9
 80061fc:	414b      	adcs	r3, r1
 80061fe:	617b      	str	r3, [r7, #20]
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800620c:	4659      	mov	r1, fp
 800620e:	00cb      	lsls	r3, r1, #3
 8006210:	4651      	mov	r1, sl
 8006212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006216:	4651      	mov	r1, sl
 8006218:	00ca      	lsls	r2, r1, #3
 800621a:	4610      	mov	r0, r2
 800621c:	4619      	mov	r1, r3
 800621e:	4603      	mov	r3, r0
 8006220:	4642      	mov	r2, r8
 8006222:	189b      	adds	r3, r3, r2
 8006224:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006228:	464b      	mov	r3, r9
 800622a:	460a      	mov	r2, r1
 800622c:	eb42 0303 	adc.w	r3, r2, r3
 8006230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	67bb      	str	r3, [r7, #120]	; 0x78
 800623e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800624c:	4649      	mov	r1, r9
 800624e:	008b      	lsls	r3, r1, #2
 8006250:	4641      	mov	r1, r8
 8006252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006256:	4641      	mov	r1, r8
 8006258:	008a      	lsls	r2, r1, #2
 800625a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800625e:	f7fa fd33 	bl	8000cc8 <__aeabi_uldivmod>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4b39      	ldr	r3, [pc, #228]	; (800634c <UART_SetConfig+0x4e4>)
 8006268:	fba3 1302 	umull	r1, r3, r3, r2
 800626c:	095b      	lsrs	r3, r3, #5
 800626e:	2164      	movs	r1, #100	; 0x64
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	3332      	adds	r3, #50	; 0x32
 800627a:	4a34      	ldr	r2, [pc, #208]	; (800634c <UART_SetConfig+0x4e4>)
 800627c:	fba2 2303 	umull	r2, r3, r2, r3
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006286:	441c      	add	r4, r3
 8006288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800628c:	2200      	movs	r2, #0
 800628e:	673b      	str	r3, [r7, #112]	; 0x70
 8006290:	677a      	str	r2, [r7, #116]	; 0x74
 8006292:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006296:	4642      	mov	r2, r8
 8006298:	464b      	mov	r3, r9
 800629a:	1891      	adds	r1, r2, r2
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	415b      	adcs	r3, r3
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062a6:	4641      	mov	r1, r8
 80062a8:	1851      	adds	r1, r2, r1
 80062aa:	6039      	str	r1, [r7, #0]
 80062ac:	4649      	mov	r1, r9
 80062ae:	414b      	adcs	r3, r1
 80062b0:	607b      	str	r3, [r7, #4]
 80062b2:	f04f 0200 	mov.w	r2, #0
 80062b6:	f04f 0300 	mov.w	r3, #0
 80062ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062be:	4659      	mov	r1, fp
 80062c0:	00cb      	lsls	r3, r1, #3
 80062c2:	4651      	mov	r1, sl
 80062c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062c8:	4651      	mov	r1, sl
 80062ca:	00ca      	lsls	r2, r1, #3
 80062cc:	4610      	mov	r0, r2
 80062ce:	4619      	mov	r1, r3
 80062d0:	4603      	mov	r3, r0
 80062d2:	4642      	mov	r2, r8
 80062d4:	189b      	adds	r3, r3, r2
 80062d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80062d8:	464b      	mov	r3, r9
 80062da:	460a      	mov	r2, r1
 80062dc:	eb42 0303 	adc.w	r3, r2, r3
 80062e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	663b      	str	r3, [r7, #96]	; 0x60
 80062ec:	667a      	str	r2, [r7, #100]	; 0x64
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062fa:	4649      	mov	r1, r9
 80062fc:	008b      	lsls	r3, r1, #2
 80062fe:	4641      	mov	r1, r8
 8006300:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006304:	4641      	mov	r1, r8
 8006306:	008a      	lsls	r2, r1, #2
 8006308:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800630c:	f7fa fcdc 	bl	8000cc8 <__aeabi_uldivmod>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4b0d      	ldr	r3, [pc, #52]	; (800634c <UART_SetConfig+0x4e4>)
 8006316:	fba3 1302 	umull	r1, r3, r3, r2
 800631a:	095b      	lsrs	r3, r3, #5
 800631c:	2164      	movs	r1, #100	; 0x64
 800631e:	fb01 f303 	mul.w	r3, r1, r3
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	011b      	lsls	r3, r3, #4
 8006326:	3332      	adds	r3, #50	; 0x32
 8006328:	4a08      	ldr	r2, [pc, #32]	; (800634c <UART_SetConfig+0x4e4>)
 800632a:	fba2 2303 	umull	r2, r3, r2, r3
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	f003 020f 	and.w	r2, r3, #15
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4422      	add	r2, r4
 800633c:	609a      	str	r2, [r3, #8]
}
 800633e:	bf00      	nop
 8006340:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006344:	46bd      	mov	sp, r7
 8006346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800634a:	bf00      	nop
 800634c:	51eb851f 	.word	0x51eb851f

08006350 <__errno>:
 8006350:	4b01      	ldr	r3, [pc, #4]	; (8006358 <__errno+0x8>)
 8006352:	6818      	ldr	r0, [r3, #0]
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	20000074 	.word	0x20000074

0800635c <__libc_init_array>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	4d0d      	ldr	r5, [pc, #52]	; (8006394 <__libc_init_array+0x38>)
 8006360:	4c0d      	ldr	r4, [pc, #52]	; (8006398 <__libc_init_array+0x3c>)
 8006362:	1b64      	subs	r4, r4, r5
 8006364:	10a4      	asrs	r4, r4, #2
 8006366:	2600      	movs	r6, #0
 8006368:	42a6      	cmp	r6, r4
 800636a:	d109      	bne.n	8006380 <__libc_init_array+0x24>
 800636c:	4d0b      	ldr	r5, [pc, #44]	; (800639c <__libc_init_array+0x40>)
 800636e:	4c0c      	ldr	r4, [pc, #48]	; (80063a0 <__libc_init_array+0x44>)
 8006370:	f002 ff02 	bl	8009178 <_init>
 8006374:	1b64      	subs	r4, r4, r5
 8006376:	10a4      	asrs	r4, r4, #2
 8006378:	2600      	movs	r6, #0
 800637a:	42a6      	cmp	r6, r4
 800637c:	d105      	bne.n	800638a <__libc_init_array+0x2e>
 800637e:	bd70      	pop	{r4, r5, r6, pc}
 8006380:	f855 3b04 	ldr.w	r3, [r5], #4
 8006384:	4798      	blx	r3
 8006386:	3601      	adds	r6, #1
 8006388:	e7ee      	b.n	8006368 <__libc_init_array+0xc>
 800638a:	f855 3b04 	ldr.w	r3, [r5], #4
 800638e:	4798      	blx	r3
 8006390:	3601      	adds	r6, #1
 8006392:	e7f2      	b.n	800637a <__libc_init_array+0x1e>
 8006394:	080095c4 	.word	0x080095c4
 8006398:	080095c4 	.word	0x080095c4
 800639c:	080095c4 	.word	0x080095c4
 80063a0:	080095c8 	.word	0x080095c8

080063a4 <memset>:
 80063a4:	4402      	add	r2, r0
 80063a6:	4603      	mov	r3, r0
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d100      	bne.n	80063ae <memset+0xa>
 80063ac:	4770      	bx	lr
 80063ae:	f803 1b01 	strb.w	r1, [r3], #1
 80063b2:	e7f9      	b.n	80063a8 <memset+0x4>

080063b4 <__cvt>:
 80063b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b8:	ec55 4b10 	vmov	r4, r5, d0
 80063bc:	2d00      	cmp	r5, #0
 80063be:	460e      	mov	r6, r1
 80063c0:	4619      	mov	r1, r3
 80063c2:	462b      	mov	r3, r5
 80063c4:	bfbb      	ittet	lt
 80063c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063ca:	461d      	movlt	r5, r3
 80063cc:	2300      	movge	r3, #0
 80063ce:	232d      	movlt	r3, #45	; 0x2d
 80063d0:	700b      	strb	r3, [r1, #0]
 80063d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063d8:	4691      	mov	r9, r2
 80063da:	f023 0820 	bic.w	r8, r3, #32
 80063de:	bfbc      	itt	lt
 80063e0:	4622      	movlt	r2, r4
 80063e2:	4614      	movlt	r4, r2
 80063e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063e8:	d005      	beq.n	80063f6 <__cvt+0x42>
 80063ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063ee:	d100      	bne.n	80063f2 <__cvt+0x3e>
 80063f0:	3601      	adds	r6, #1
 80063f2:	2102      	movs	r1, #2
 80063f4:	e000      	b.n	80063f8 <__cvt+0x44>
 80063f6:	2103      	movs	r1, #3
 80063f8:	ab03      	add	r3, sp, #12
 80063fa:	9301      	str	r3, [sp, #4]
 80063fc:	ab02      	add	r3, sp, #8
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	ec45 4b10 	vmov	d0, r4, r5
 8006404:	4653      	mov	r3, sl
 8006406:	4632      	mov	r2, r6
 8006408:	f000 fcea 	bl	8006de0 <_dtoa_r>
 800640c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006410:	4607      	mov	r7, r0
 8006412:	d102      	bne.n	800641a <__cvt+0x66>
 8006414:	f019 0f01 	tst.w	r9, #1
 8006418:	d022      	beq.n	8006460 <__cvt+0xac>
 800641a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800641e:	eb07 0906 	add.w	r9, r7, r6
 8006422:	d110      	bne.n	8006446 <__cvt+0x92>
 8006424:	783b      	ldrb	r3, [r7, #0]
 8006426:	2b30      	cmp	r3, #48	; 0x30
 8006428:	d10a      	bne.n	8006440 <__cvt+0x8c>
 800642a:	2200      	movs	r2, #0
 800642c:	2300      	movs	r3, #0
 800642e:	4620      	mov	r0, r4
 8006430:	4629      	mov	r1, r5
 8006432:	f7fa fb69 	bl	8000b08 <__aeabi_dcmpeq>
 8006436:	b918      	cbnz	r0, 8006440 <__cvt+0x8c>
 8006438:	f1c6 0601 	rsb	r6, r6, #1
 800643c:	f8ca 6000 	str.w	r6, [sl]
 8006440:	f8da 3000 	ldr.w	r3, [sl]
 8006444:	4499      	add	r9, r3
 8006446:	2200      	movs	r2, #0
 8006448:	2300      	movs	r3, #0
 800644a:	4620      	mov	r0, r4
 800644c:	4629      	mov	r1, r5
 800644e:	f7fa fb5b 	bl	8000b08 <__aeabi_dcmpeq>
 8006452:	b108      	cbz	r0, 8006458 <__cvt+0xa4>
 8006454:	f8cd 900c 	str.w	r9, [sp, #12]
 8006458:	2230      	movs	r2, #48	; 0x30
 800645a:	9b03      	ldr	r3, [sp, #12]
 800645c:	454b      	cmp	r3, r9
 800645e:	d307      	bcc.n	8006470 <__cvt+0xbc>
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006464:	1bdb      	subs	r3, r3, r7
 8006466:	4638      	mov	r0, r7
 8006468:	6013      	str	r3, [r2, #0]
 800646a:	b004      	add	sp, #16
 800646c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006470:	1c59      	adds	r1, r3, #1
 8006472:	9103      	str	r1, [sp, #12]
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	e7f0      	b.n	800645a <__cvt+0xa6>

08006478 <__exponent>:
 8006478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800647a:	4603      	mov	r3, r0
 800647c:	2900      	cmp	r1, #0
 800647e:	bfb8      	it	lt
 8006480:	4249      	neglt	r1, r1
 8006482:	f803 2b02 	strb.w	r2, [r3], #2
 8006486:	bfb4      	ite	lt
 8006488:	222d      	movlt	r2, #45	; 0x2d
 800648a:	222b      	movge	r2, #43	; 0x2b
 800648c:	2909      	cmp	r1, #9
 800648e:	7042      	strb	r2, [r0, #1]
 8006490:	dd2a      	ble.n	80064e8 <__exponent+0x70>
 8006492:	f10d 0407 	add.w	r4, sp, #7
 8006496:	46a4      	mov	ip, r4
 8006498:	270a      	movs	r7, #10
 800649a:	46a6      	mov	lr, r4
 800649c:	460a      	mov	r2, r1
 800649e:	fb91 f6f7 	sdiv	r6, r1, r7
 80064a2:	fb07 1516 	mls	r5, r7, r6, r1
 80064a6:	3530      	adds	r5, #48	; 0x30
 80064a8:	2a63      	cmp	r2, #99	; 0x63
 80064aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80064ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80064b2:	4631      	mov	r1, r6
 80064b4:	dcf1      	bgt.n	800649a <__exponent+0x22>
 80064b6:	3130      	adds	r1, #48	; 0x30
 80064b8:	f1ae 0502 	sub.w	r5, lr, #2
 80064bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80064c0:	1c44      	adds	r4, r0, #1
 80064c2:	4629      	mov	r1, r5
 80064c4:	4561      	cmp	r1, ip
 80064c6:	d30a      	bcc.n	80064de <__exponent+0x66>
 80064c8:	f10d 0209 	add.w	r2, sp, #9
 80064cc:	eba2 020e 	sub.w	r2, r2, lr
 80064d0:	4565      	cmp	r5, ip
 80064d2:	bf88      	it	hi
 80064d4:	2200      	movhi	r2, #0
 80064d6:	4413      	add	r3, r2
 80064d8:	1a18      	subs	r0, r3, r0
 80064da:	b003      	add	sp, #12
 80064dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80064e6:	e7ed      	b.n	80064c4 <__exponent+0x4c>
 80064e8:	2330      	movs	r3, #48	; 0x30
 80064ea:	3130      	adds	r1, #48	; 0x30
 80064ec:	7083      	strb	r3, [r0, #2]
 80064ee:	70c1      	strb	r1, [r0, #3]
 80064f0:	1d03      	adds	r3, r0, #4
 80064f2:	e7f1      	b.n	80064d8 <__exponent+0x60>

080064f4 <_printf_float>:
 80064f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f8:	ed2d 8b02 	vpush	{d8}
 80064fc:	b08d      	sub	sp, #52	; 0x34
 80064fe:	460c      	mov	r4, r1
 8006500:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006504:	4616      	mov	r6, r2
 8006506:	461f      	mov	r7, r3
 8006508:	4605      	mov	r5, r0
 800650a:	f001 fa57 	bl	80079bc <_localeconv_r>
 800650e:	f8d0 a000 	ldr.w	sl, [r0]
 8006512:	4650      	mov	r0, sl
 8006514:	f7f9 fe7c 	bl	8000210 <strlen>
 8006518:	2300      	movs	r3, #0
 800651a:	930a      	str	r3, [sp, #40]	; 0x28
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	9305      	str	r3, [sp, #20]
 8006520:	f8d8 3000 	ldr.w	r3, [r8]
 8006524:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006528:	3307      	adds	r3, #7
 800652a:	f023 0307 	bic.w	r3, r3, #7
 800652e:	f103 0208 	add.w	r2, r3, #8
 8006532:	f8c8 2000 	str.w	r2, [r8]
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800653e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006542:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006546:	9307      	str	r3, [sp, #28]
 8006548:	f8cd 8018 	str.w	r8, [sp, #24]
 800654c:	ee08 0a10 	vmov	s16, r0
 8006550:	4b9f      	ldr	r3, [pc, #636]	; (80067d0 <_printf_float+0x2dc>)
 8006552:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006556:	f04f 32ff 	mov.w	r2, #4294967295
 800655a:	f7fa fb07 	bl	8000b6c <__aeabi_dcmpun>
 800655e:	bb88      	cbnz	r0, 80065c4 <_printf_float+0xd0>
 8006560:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006564:	4b9a      	ldr	r3, [pc, #616]	; (80067d0 <_printf_float+0x2dc>)
 8006566:	f04f 32ff 	mov.w	r2, #4294967295
 800656a:	f7fa fae1 	bl	8000b30 <__aeabi_dcmple>
 800656e:	bb48      	cbnz	r0, 80065c4 <_printf_float+0xd0>
 8006570:	2200      	movs	r2, #0
 8006572:	2300      	movs	r3, #0
 8006574:	4640      	mov	r0, r8
 8006576:	4649      	mov	r1, r9
 8006578:	f7fa fad0 	bl	8000b1c <__aeabi_dcmplt>
 800657c:	b110      	cbz	r0, 8006584 <_printf_float+0x90>
 800657e:	232d      	movs	r3, #45	; 0x2d
 8006580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006584:	4b93      	ldr	r3, [pc, #588]	; (80067d4 <_printf_float+0x2e0>)
 8006586:	4894      	ldr	r0, [pc, #592]	; (80067d8 <_printf_float+0x2e4>)
 8006588:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800658c:	bf94      	ite	ls
 800658e:	4698      	movls	r8, r3
 8006590:	4680      	movhi	r8, r0
 8006592:	2303      	movs	r3, #3
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	9b05      	ldr	r3, [sp, #20]
 8006598:	f023 0204 	bic.w	r2, r3, #4
 800659c:	6022      	str	r2, [r4, #0]
 800659e:	f04f 0900 	mov.w	r9, #0
 80065a2:	9700      	str	r7, [sp, #0]
 80065a4:	4633      	mov	r3, r6
 80065a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80065a8:	4621      	mov	r1, r4
 80065aa:	4628      	mov	r0, r5
 80065ac:	f000 f9d8 	bl	8006960 <_printf_common>
 80065b0:	3001      	adds	r0, #1
 80065b2:	f040 8090 	bne.w	80066d6 <_printf_float+0x1e2>
 80065b6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ba:	b00d      	add	sp, #52	; 0x34
 80065bc:	ecbd 8b02 	vpop	{d8}
 80065c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c4:	4642      	mov	r2, r8
 80065c6:	464b      	mov	r3, r9
 80065c8:	4640      	mov	r0, r8
 80065ca:	4649      	mov	r1, r9
 80065cc:	f7fa face 	bl	8000b6c <__aeabi_dcmpun>
 80065d0:	b140      	cbz	r0, 80065e4 <_printf_float+0xf0>
 80065d2:	464b      	mov	r3, r9
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bfbc      	itt	lt
 80065d8:	232d      	movlt	r3, #45	; 0x2d
 80065da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80065de:	487f      	ldr	r0, [pc, #508]	; (80067dc <_printf_float+0x2e8>)
 80065e0:	4b7f      	ldr	r3, [pc, #508]	; (80067e0 <_printf_float+0x2ec>)
 80065e2:	e7d1      	b.n	8006588 <_printf_float+0x94>
 80065e4:	6863      	ldr	r3, [r4, #4]
 80065e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80065ea:	9206      	str	r2, [sp, #24]
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	d13f      	bne.n	8006670 <_printf_float+0x17c>
 80065f0:	2306      	movs	r3, #6
 80065f2:	6063      	str	r3, [r4, #4]
 80065f4:	9b05      	ldr	r3, [sp, #20]
 80065f6:	6861      	ldr	r1, [r4, #4]
 80065f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065fc:	2300      	movs	r3, #0
 80065fe:	9303      	str	r3, [sp, #12]
 8006600:	ab0a      	add	r3, sp, #40	; 0x28
 8006602:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006606:	ab09      	add	r3, sp, #36	; 0x24
 8006608:	ec49 8b10 	vmov	d0, r8, r9
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	6022      	str	r2, [r4, #0]
 8006610:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006614:	4628      	mov	r0, r5
 8006616:	f7ff fecd 	bl	80063b4 <__cvt>
 800661a:	9b06      	ldr	r3, [sp, #24]
 800661c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800661e:	2b47      	cmp	r3, #71	; 0x47
 8006620:	4680      	mov	r8, r0
 8006622:	d108      	bne.n	8006636 <_printf_float+0x142>
 8006624:	1cc8      	adds	r0, r1, #3
 8006626:	db02      	blt.n	800662e <_printf_float+0x13a>
 8006628:	6863      	ldr	r3, [r4, #4]
 800662a:	4299      	cmp	r1, r3
 800662c:	dd41      	ble.n	80066b2 <_printf_float+0x1be>
 800662e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006632:	fa5f fb8b 	uxtb.w	fp, fp
 8006636:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800663a:	d820      	bhi.n	800667e <_printf_float+0x18a>
 800663c:	3901      	subs	r1, #1
 800663e:	465a      	mov	r2, fp
 8006640:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006644:	9109      	str	r1, [sp, #36]	; 0x24
 8006646:	f7ff ff17 	bl	8006478 <__exponent>
 800664a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800664c:	1813      	adds	r3, r2, r0
 800664e:	2a01      	cmp	r2, #1
 8006650:	4681      	mov	r9, r0
 8006652:	6123      	str	r3, [r4, #16]
 8006654:	dc02      	bgt.n	800665c <_printf_float+0x168>
 8006656:	6822      	ldr	r2, [r4, #0]
 8006658:	07d2      	lsls	r2, r2, #31
 800665a:	d501      	bpl.n	8006660 <_printf_float+0x16c>
 800665c:	3301      	adds	r3, #1
 800665e:	6123      	str	r3, [r4, #16]
 8006660:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006664:	2b00      	cmp	r3, #0
 8006666:	d09c      	beq.n	80065a2 <_printf_float+0xae>
 8006668:	232d      	movs	r3, #45	; 0x2d
 800666a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800666e:	e798      	b.n	80065a2 <_printf_float+0xae>
 8006670:	9a06      	ldr	r2, [sp, #24]
 8006672:	2a47      	cmp	r2, #71	; 0x47
 8006674:	d1be      	bne.n	80065f4 <_printf_float+0x100>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1bc      	bne.n	80065f4 <_printf_float+0x100>
 800667a:	2301      	movs	r3, #1
 800667c:	e7b9      	b.n	80065f2 <_printf_float+0xfe>
 800667e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006682:	d118      	bne.n	80066b6 <_printf_float+0x1c2>
 8006684:	2900      	cmp	r1, #0
 8006686:	6863      	ldr	r3, [r4, #4]
 8006688:	dd0b      	ble.n	80066a2 <_printf_float+0x1ae>
 800668a:	6121      	str	r1, [r4, #16]
 800668c:	b913      	cbnz	r3, 8006694 <_printf_float+0x1a0>
 800668e:	6822      	ldr	r2, [r4, #0]
 8006690:	07d0      	lsls	r0, r2, #31
 8006692:	d502      	bpl.n	800669a <_printf_float+0x1a6>
 8006694:	3301      	adds	r3, #1
 8006696:	440b      	add	r3, r1
 8006698:	6123      	str	r3, [r4, #16]
 800669a:	65a1      	str	r1, [r4, #88]	; 0x58
 800669c:	f04f 0900 	mov.w	r9, #0
 80066a0:	e7de      	b.n	8006660 <_printf_float+0x16c>
 80066a2:	b913      	cbnz	r3, 80066aa <_printf_float+0x1b6>
 80066a4:	6822      	ldr	r2, [r4, #0]
 80066a6:	07d2      	lsls	r2, r2, #31
 80066a8:	d501      	bpl.n	80066ae <_printf_float+0x1ba>
 80066aa:	3302      	adds	r3, #2
 80066ac:	e7f4      	b.n	8006698 <_printf_float+0x1a4>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e7f2      	b.n	8006698 <_printf_float+0x1a4>
 80066b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80066b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b8:	4299      	cmp	r1, r3
 80066ba:	db05      	blt.n	80066c8 <_printf_float+0x1d4>
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	6121      	str	r1, [r4, #16]
 80066c0:	07d8      	lsls	r0, r3, #31
 80066c2:	d5ea      	bpl.n	800669a <_printf_float+0x1a6>
 80066c4:	1c4b      	adds	r3, r1, #1
 80066c6:	e7e7      	b.n	8006698 <_printf_float+0x1a4>
 80066c8:	2900      	cmp	r1, #0
 80066ca:	bfd4      	ite	le
 80066cc:	f1c1 0202 	rsble	r2, r1, #2
 80066d0:	2201      	movgt	r2, #1
 80066d2:	4413      	add	r3, r2
 80066d4:	e7e0      	b.n	8006698 <_printf_float+0x1a4>
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	055a      	lsls	r2, r3, #21
 80066da:	d407      	bmi.n	80066ec <_printf_float+0x1f8>
 80066dc:	6923      	ldr	r3, [r4, #16]
 80066de:	4642      	mov	r2, r8
 80066e0:	4631      	mov	r1, r6
 80066e2:	4628      	mov	r0, r5
 80066e4:	47b8      	blx	r7
 80066e6:	3001      	adds	r0, #1
 80066e8:	d12c      	bne.n	8006744 <_printf_float+0x250>
 80066ea:	e764      	b.n	80065b6 <_printf_float+0xc2>
 80066ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066f0:	f240 80e0 	bls.w	80068b4 <_printf_float+0x3c0>
 80066f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066f8:	2200      	movs	r2, #0
 80066fa:	2300      	movs	r3, #0
 80066fc:	f7fa fa04 	bl	8000b08 <__aeabi_dcmpeq>
 8006700:	2800      	cmp	r0, #0
 8006702:	d034      	beq.n	800676e <_printf_float+0x27a>
 8006704:	4a37      	ldr	r2, [pc, #220]	; (80067e4 <_printf_float+0x2f0>)
 8006706:	2301      	movs	r3, #1
 8006708:	4631      	mov	r1, r6
 800670a:	4628      	mov	r0, r5
 800670c:	47b8      	blx	r7
 800670e:	3001      	adds	r0, #1
 8006710:	f43f af51 	beq.w	80065b6 <_printf_float+0xc2>
 8006714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006718:	429a      	cmp	r2, r3
 800671a:	db02      	blt.n	8006722 <_printf_float+0x22e>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	07d8      	lsls	r0, r3, #31
 8006720:	d510      	bpl.n	8006744 <_printf_float+0x250>
 8006722:	ee18 3a10 	vmov	r3, s16
 8006726:	4652      	mov	r2, sl
 8006728:	4631      	mov	r1, r6
 800672a:	4628      	mov	r0, r5
 800672c:	47b8      	blx	r7
 800672e:	3001      	adds	r0, #1
 8006730:	f43f af41 	beq.w	80065b6 <_printf_float+0xc2>
 8006734:	f04f 0800 	mov.w	r8, #0
 8006738:	f104 091a 	add.w	r9, r4, #26
 800673c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800673e:	3b01      	subs	r3, #1
 8006740:	4543      	cmp	r3, r8
 8006742:	dc09      	bgt.n	8006758 <_printf_float+0x264>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	079b      	lsls	r3, r3, #30
 8006748:	f100 8105 	bmi.w	8006956 <_printf_float+0x462>
 800674c:	68e0      	ldr	r0, [r4, #12]
 800674e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006750:	4298      	cmp	r0, r3
 8006752:	bfb8      	it	lt
 8006754:	4618      	movlt	r0, r3
 8006756:	e730      	b.n	80065ba <_printf_float+0xc6>
 8006758:	2301      	movs	r3, #1
 800675a:	464a      	mov	r2, r9
 800675c:	4631      	mov	r1, r6
 800675e:	4628      	mov	r0, r5
 8006760:	47b8      	blx	r7
 8006762:	3001      	adds	r0, #1
 8006764:	f43f af27 	beq.w	80065b6 <_printf_float+0xc2>
 8006768:	f108 0801 	add.w	r8, r8, #1
 800676c:	e7e6      	b.n	800673c <_printf_float+0x248>
 800676e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006770:	2b00      	cmp	r3, #0
 8006772:	dc39      	bgt.n	80067e8 <_printf_float+0x2f4>
 8006774:	4a1b      	ldr	r2, [pc, #108]	; (80067e4 <_printf_float+0x2f0>)
 8006776:	2301      	movs	r3, #1
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	f43f af19 	beq.w	80065b6 <_printf_float+0xc2>
 8006784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006788:	4313      	orrs	r3, r2
 800678a:	d102      	bne.n	8006792 <_printf_float+0x29e>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	07d9      	lsls	r1, r3, #31
 8006790:	d5d8      	bpl.n	8006744 <_printf_float+0x250>
 8006792:	ee18 3a10 	vmov	r3, s16
 8006796:	4652      	mov	r2, sl
 8006798:	4631      	mov	r1, r6
 800679a:	4628      	mov	r0, r5
 800679c:	47b8      	blx	r7
 800679e:	3001      	adds	r0, #1
 80067a0:	f43f af09 	beq.w	80065b6 <_printf_float+0xc2>
 80067a4:	f04f 0900 	mov.w	r9, #0
 80067a8:	f104 0a1a 	add.w	sl, r4, #26
 80067ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ae:	425b      	negs	r3, r3
 80067b0:	454b      	cmp	r3, r9
 80067b2:	dc01      	bgt.n	80067b8 <_printf_float+0x2c4>
 80067b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b6:	e792      	b.n	80066de <_printf_float+0x1ea>
 80067b8:	2301      	movs	r3, #1
 80067ba:	4652      	mov	r2, sl
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	47b8      	blx	r7
 80067c2:	3001      	adds	r0, #1
 80067c4:	f43f aef7 	beq.w	80065b6 <_printf_float+0xc2>
 80067c8:	f109 0901 	add.w	r9, r9, #1
 80067cc:	e7ee      	b.n	80067ac <_printf_float+0x2b8>
 80067ce:	bf00      	nop
 80067d0:	7fefffff 	.word	0x7fefffff
 80067d4:	080091e8 	.word	0x080091e8
 80067d8:	080091ec 	.word	0x080091ec
 80067dc:	080091f4 	.word	0x080091f4
 80067e0:	080091f0 	.word	0x080091f0
 80067e4:	080091f8 	.word	0x080091f8
 80067e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067ec:	429a      	cmp	r2, r3
 80067ee:	bfa8      	it	ge
 80067f0:	461a      	movge	r2, r3
 80067f2:	2a00      	cmp	r2, #0
 80067f4:	4691      	mov	r9, r2
 80067f6:	dc37      	bgt.n	8006868 <_printf_float+0x374>
 80067f8:	f04f 0b00 	mov.w	fp, #0
 80067fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006800:	f104 021a 	add.w	r2, r4, #26
 8006804:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006806:	9305      	str	r3, [sp, #20]
 8006808:	eba3 0309 	sub.w	r3, r3, r9
 800680c:	455b      	cmp	r3, fp
 800680e:	dc33      	bgt.n	8006878 <_printf_float+0x384>
 8006810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006814:	429a      	cmp	r2, r3
 8006816:	db3b      	blt.n	8006890 <_printf_float+0x39c>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	07da      	lsls	r2, r3, #31
 800681c:	d438      	bmi.n	8006890 <_printf_float+0x39c>
 800681e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006820:	9a05      	ldr	r2, [sp, #20]
 8006822:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006824:	1a9a      	subs	r2, r3, r2
 8006826:	eba3 0901 	sub.w	r9, r3, r1
 800682a:	4591      	cmp	r9, r2
 800682c:	bfa8      	it	ge
 800682e:	4691      	movge	r9, r2
 8006830:	f1b9 0f00 	cmp.w	r9, #0
 8006834:	dc35      	bgt.n	80068a2 <_printf_float+0x3ae>
 8006836:	f04f 0800 	mov.w	r8, #0
 800683a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800683e:	f104 0a1a 	add.w	sl, r4, #26
 8006842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006846:	1a9b      	subs	r3, r3, r2
 8006848:	eba3 0309 	sub.w	r3, r3, r9
 800684c:	4543      	cmp	r3, r8
 800684e:	f77f af79 	ble.w	8006744 <_printf_float+0x250>
 8006852:	2301      	movs	r3, #1
 8006854:	4652      	mov	r2, sl
 8006856:	4631      	mov	r1, r6
 8006858:	4628      	mov	r0, r5
 800685a:	47b8      	blx	r7
 800685c:	3001      	adds	r0, #1
 800685e:	f43f aeaa 	beq.w	80065b6 <_printf_float+0xc2>
 8006862:	f108 0801 	add.w	r8, r8, #1
 8006866:	e7ec      	b.n	8006842 <_printf_float+0x34e>
 8006868:	4613      	mov	r3, r2
 800686a:	4631      	mov	r1, r6
 800686c:	4642      	mov	r2, r8
 800686e:	4628      	mov	r0, r5
 8006870:	47b8      	blx	r7
 8006872:	3001      	adds	r0, #1
 8006874:	d1c0      	bne.n	80067f8 <_printf_float+0x304>
 8006876:	e69e      	b.n	80065b6 <_printf_float+0xc2>
 8006878:	2301      	movs	r3, #1
 800687a:	4631      	mov	r1, r6
 800687c:	4628      	mov	r0, r5
 800687e:	9205      	str	r2, [sp, #20]
 8006880:	47b8      	blx	r7
 8006882:	3001      	adds	r0, #1
 8006884:	f43f ae97 	beq.w	80065b6 <_printf_float+0xc2>
 8006888:	9a05      	ldr	r2, [sp, #20]
 800688a:	f10b 0b01 	add.w	fp, fp, #1
 800688e:	e7b9      	b.n	8006804 <_printf_float+0x310>
 8006890:	ee18 3a10 	vmov	r3, s16
 8006894:	4652      	mov	r2, sl
 8006896:	4631      	mov	r1, r6
 8006898:	4628      	mov	r0, r5
 800689a:	47b8      	blx	r7
 800689c:	3001      	adds	r0, #1
 800689e:	d1be      	bne.n	800681e <_printf_float+0x32a>
 80068a0:	e689      	b.n	80065b6 <_printf_float+0xc2>
 80068a2:	9a05      	ldr	r2, [sp, #20]
 80068a4:	464b      	mov	r3, r9
 80068a6:	4442      	add	r2, r8
 80068a8:	4631      	mov	r1, r6
 80068aa:	4628      	mov	r0, r5
 80068ac:	47b8      	blx	r7
 80068ae:	3001      	adds	r0, #1
 80068b0:	d1c1      	bne.n	8006836 <_printf_float+0x342>
 80068b2:	e680      	b.n	80065b6 <_printf_float+0xc2>
 80068b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068b6:	2a01      	cmp	r2, #1
 80068b8:	dc01      	bgt.n	80068be <_printf_float+0x3ca>
 80068ba:	07db      	lsls	r3, r3, #31
 80068bc:	d538      	bpl.n	8006930 <_printf_float+0x43c>
 80068be:	2301      	movs	r3, #1
 80068c0:	4642      	mov	r2, r8
 80068c2:	4631      	mov	r1, r6
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b8      	blx	r7
 80068c8:	3001      	adds	r0, #1
 80068ca:	f43f ae74 	beq.w	80065b6 <_printf_float+0xc2>
 80068ce:	ee18 3a10 	vmov	r3, s16
 80068d2:	4652      	mov	r2, sl
 80068d4:	4631      	mov	r1, r6
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b8      	blx	r7
 80068da:	3001      	adds	r0, #1
 80068dc:	f43f ae6b 	beq.w	80065b6 <_printf_float+0xc2>
 80068e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068e4:	2200      	movs	r2, #0
 80068e6:	2300      	movs	r3, #0
 80068e8:	f7fa f90e 	bl	8000b08 <__aeabi_dcmpeq>
 80068ec:	b9d8      	cbnz	r0, 8006926 <_printf_float+0x432>
 80068ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f0:	f108 0201 	add.w	r2, r8, #1
 80068f4:	3b01      	subs	r3, #1
 80068f6:	4631      	mov	r1, r6
 80068f8:	4628      	mov	r0, r5
 80068fa:	47b8      	blx	r7
 80068fc:	3001      	adds	r0, #1
 80068fe:	d10e      	bne.n	800691e <_printf_float+0x42a>
 8006900:	e659      	b.n	80065b6 <_printf_float+0xc2>
 8006902:	2301      	movs	r3, #1
 8006904:	4652      	mov	r2, sl
 8006906:	4631      	mov	r1, r6
 8006908:	4628      	mov	r0, r5
 800690a:	47b8      	blx	r7
 800690c:	3001      	adds	r0, #1
 800690e:	f43f ae52 	beq.w	80065b6 <_printf_float+0xc2>
 8006912:	f108 0801 	add.w	r8, r8, #1
 8006916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006918:	3b01      	subs	r3, #1
 800691a:	4543      	cmp	r3, r8
 800691c:	dcf1      	bgt.n	8006902 <_printf_float+0x40e>
 800691e:	464b      	mov	r3, r9
 8006920:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006924:	e6dc      	b.n	80066e0 <_printf_float+0x1ec>
 8006926:	f04f 0800 	mov.w	r8, #0
 800692a:	f104 0a1a 	add.w	sl, r4, #26
 800692e:	e7f2      	b.n	8006916 <_printf_float+0x422>
 8006930:	2301      	movs	r3, #1
 8006932:	4642      	mov	r2, r8
 8006934:	e7df      	b.n	80068f6 <_printf_float+0x402>
 8006936:	2301      	movs	r3, #1
 8006938:	464a      	mov	r2, r9
 800693a:	4631      	mov	r1, r6
 800693c:	4628      	mov	r0, r5
 800693e:	47b8      	blx	r7
 8006940:	3001      	adds	r0, #1
 8006942:	f43f ae38 	beq.w	80065b6 <_printf_float+0xc2>
 8006946:	f108 0801 	add.w	r8, r8, #1
 800694a:	68e3      	ldr	r3, [r4, #12]
 800694c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800694e:	1a5b      	subs	r3, r3, r1
 8006950:	4543      	cmp	r3, r8
 8006952:	dcf0      	bgt.n	8006936 <_printf_float+0x442>
 8006954:	e6fa      	b.n	800674c <_printf_float+0x258>
 8006956:	f04f 0800 	mov.w	r8, #0
 800695a:	f104 0919 	add.w	r9, r4, #25
 800695e:	e7f4      	b.n	800694a <_printf_float+0x456>

08006960 <_printf_common>:
 8006960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006964:	4616      	mov	r6, r2
 8006966:	4699      	mov	r9, r3
 8006968:	688a      	ldr	r2, [r1, #8]
 800696a:	690b      	ldr	r3, [r1, #16]
 800696c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006970:	4293      	cmp	r3, r2
 8006972:	bfb8      	it	lt
 8006974:	4613      	movlt	r3, r2
 8006976:	6033      	str	r3, [r6, #0]
 8006978:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800697c:	4607      	mov	r7, r0
 800697e:	460c      	mov	r4, r1
 8006980:	b10a      	cbz	r2, 8006986 <_printf_common+0x26>
 8006982:	3301      	adds	r3, #1
 8006984:	6033      	str	r3, [r6, #0]
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	0699      	lsls	r1, r3, #26
 800698a:	bf42      	ittt	mi
 800698c:	6833      	ldrmi	r3, [r6, #0]
 800698e:	3302      	addmi	r3, #2
 8006990:	6033      	strmi	r3, [r6, #0]
 8006992:	6825      	ldr	r5, [r4, #0]
 8006994:	f015 0506 	ands.w	r5, r5, #6
 8006998:	d106      	bne.n	80069a8 <_printf_common+0x48>
 800699a:	f104 0a19 	add.w	sl, r4, #25
 800699e:	68e3      	ldr	r3, [r4, #12]
 80069a0:	6832      	ldr	r2, [r6, #0]
 80069a2:	1a9b      	subs	r3, r3, r2
 80069a4:	42ab      	cmp	r3, r5
 80069a6:	dc26      	bgt.n	80069f6 <_printf_common+0x96>
 80069a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069ac:	1e13      	subs	r3, r2, #0
 80069ae:	6822      	ldr	r2, [r4, #0]
 80069b0:	bf18      	it	ne
 80069b2:	2301      	movne	r3, #1
 80069b4:	0692      	lsls	r2, r2, #26
 80069b6:	d42b      	bmi.n	8006a10 <_printf_common+0xb0>
 80069b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069bc:	4649      	mov	r1, r9
 80069be:	4638      	mov	r0, r7
 80069c0:	47c0      	blx	r8
 80069c2:	3001      	adds	r0, #1
 80069c4:	d01e      	beq.n	8006a04 <_printf_common+0xa4>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	68e5      	ldr	r5, [r4, #12]
 80069ca:	6832      	ldr	r2, [r6, #0]
 80069cc:	f003 0306 	and.w	r3, r3, #6
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	bf08      	it	eq
 80069d4:	1aad      	subeq	r5, r5, r2
 80069d6:	68a3      	ldr	r3, [r4, #8]
 80069d8:	6922      	ldr	r2, [r4, #16]
 80069da:	bf0c      	ite	eq
 80069dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069e0:	2500      	movne	r5, #0
 80069e2:	4293      	cmp	r3, r2
 80069e4:	bfc4      	itt	gt
 80069e6:	1a9b      	subgt	r3, r3, r2
 80069e8:	18ed      	addgt	r5, r5, r3
 80069ea:	2600      	movs	r6, #0
 80069ec:	341a      	adds	r4, #26
 80069ee:	42b5      	cmp	r5, r6
 80069f0:	d11a      	bne.n	8006a28 <_printf_common+0xc8>
 80069f2:	2000      	movs	r0, #0
 80069f4:	e008      	b.n	8006a08 <_printf_common+0xa8>
 80069f6:	2301      	movs	r3, #1
 80069f8:	4652      	mov	r2, sl
 80069fa:	4649      	mov	r1, r9
 80069fc:	4638      	mov	r0, r7
 80069fe:	47c0      	blx	r8
 8006a00:	3001      	adds	r0, #1
 8006a02:	d103      	bne.n	8006a0c <_printf_common+0xac>
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295
 8006a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0c:	3501      	adds	r5, #1
 8006a0e:	e7c6      	b.n	800699e <_printf_common+0x3e>
 8006a10:	18e1      	adds	r1, r4, r3
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	2030      	movs	r0, #48	; 0x30
 8006a16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a1a:	4422      	add	r2, r4
 8006a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a24:	3302      	adds	r3, #2
 8006a26:	e7c7      	b.n	80069b8 <_printf_common+0x58>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	4638      	mov	r0, r7
 8006a30:	47c0      	blx	r8
 8006a32:	3001      	adds	r0, #1
 8006a34:	d0e6      	beq.n	8006a04 <_printf_common+0xa4>
 8006a36:	3601      	adds	r6, #1
 8006a38:	e7d9      	b.n	80069ee <_printf_common+0x8e>
	...

08006a3c <_printf_i>:
 8006a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a40:	7e0f      	ldrb	r7, [r1, #24]
 8006a42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a44:	2f78      	cmp	r7, #120	; 0x78
 8006a46:	4691      	mov	r9, r2
 8006a48:	4680      	mov	r8, r0
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	469a      	mov	sl, r3
 8006a4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a52:	d807      	bhi.n	8006a64 <_printf_i+0x28>
 8006a54:	2f62      	cmp	r7, #98	; 0x62
 8006a56:	d80a      	bhi.n	8006a6e <_printf_i+0x32>
 8006a58:	2f00      	cmp	r7, #0
 8006a5a:	f000 80d8 	beq.w	8006c0e <_printf_i+0x1d2>
 8006a5e:	2f58      	cmp	r7, #88	; 0x58
 8006a60:	f000 80a3 	beq.w	8006baa <_printf_i+0x16e>
 8006a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a6c:	e03a      	b.n	8006ae4 <_printf_i+0xa8>
 8006a6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a72:	2b15      	cmp	r3, #21
 8006a74:	d8f6      	bhi.n	8006a64 <_printf_i+0x28>
 8006a76:	a101      	add	r1, pc, #4	; (adr r1, 8006a7c <_printf_i+0x40>)
 8006a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a7c:	08006ad5 	.word	0x08006ad5
 8006a80:	08006ae9 	.word	0x08006ae9
 8006a84:	08006a65 	.word	0x08006a65
 8006a88:	08006a65 	.word	0x08006a65
 8006a8c:	08006a65 	.word	0x08006a65
 8006a90:	08006a65 	.word	0x08006a65
 8006a94:	08006ae9 	.word	0x08006ae9
 8006a98:	08006a65 	.word	0x08006a65
 8006a9c:	08006a65 	.word	0x08006a65
 8006aa0:	08006a65 	.word	0x08006a65
 8006aa4:	08006a65 	.word	0x08006a65
 8006aa8:	08006bf5 	.word	0x08006bf5
 8006aac:	08006b19 	.word	0x08006b19
 8006ab0:	08006bd7 	.word	0x08006bd7
 8006ab4:	08006a65 	.word	0x08006a65
 8006ab8:	08006a65 	.word	0x08006a65
 8006abc:	08006c17 	.word	0x08006c17
 8006ac0:	08006a65 	.word	0x08006a65
 8006ac4:	08006b19 	.word	0x08006b19
 8006ac8:	08006a65 	.word	0x08006a65
 8006acc:	08006a65 	.word	0x08006a65
 8006ad0:	08006bdf 	.word	0x08006bdf
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	1d1a      	adds	r2, r3, #4
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	602a      	str	r2, [r5, #0]
 8006adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e0a3      	b.n	8006c30 <_printf_i+0x1f4>
 8006ae8:	6820      	ldr	r0, [r4, #0]
 8006aea:	6829      	ldr	r1, [r5, #0]
 8006aec:	0606      	lsls	r6, r0, #24
 8006aee:	f101 0304 	add.w	r3, r1, #4
 8006af2:	d50a      	bpl.n	8006b0a <_printf_i+0xce>
 8006af4:	680e      	ldr	r6, [r1, #0]
 8006af6:	602b      	str	r3, [r5, #0]
 8006af8:	2e00      	cmp	r6, #0
 8006afa:	da03      	bge.n	8006b04 <_printf_i+0xc8>
 8006afc:	232d      	movs	r3, #45	; 0x2d
 8006afe:	4276      	negs	r6, r6
 8006b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b04:	485e      	ldr	r0, [pc, #376]	; (8006c80 <_printf_i+0x244>)
 8006b06:	230a      	movs	r3, #10
 8006b08:	e019      	b.n	8006b3e <_printf_i+0x102>
 8006b0a:	680e      	ldr	r6, [r1, #0]
 8006b0c:	602b      	str	r3, [r5, #0]
 8006b0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b12:	bf18      	it	ne
 8006b14:	b236      	sxthne	r6, r6
 8006b16:	e7ef      	b.n	8006af8 <_printf_i+0xbc>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	6820      	ldr	r0, [r4, #0]
 8006b1c:	1d19      	adds	r1, r3, #4
 8006b1e:	6029      	str	r1, [r5, #0]
 8006b20:	0601      	lsls	r1, r0, #24
 8006b22:	d501      	bpl.n	8006b28 <_printf_i+0xec>
 8006b24:	681e      	ldr	r6, [r3, #0]
 8006b26:	e002      	b.n	8006b2e <_printf_i+0xf2>
 8006b28:	0646      	lsls	r6, r0, #25
 8006b2a:	d5fb      	bpl.n	8006b24 <_printf_i+0xe8>
 8006b2c:	881e      	ldrh	r6, [r3, #0]
 8006b2e:	4854      	ldr	r0, [pc, #336]	; (8006c80 <_printf_i+0x244>)
 8006b30:	2f6f      	cmp	r7, #111	; 0x6f
 8006b32:	bf0c      	ite	eq
 8006b34:	2308      	moveq	r3, #8
 8006b36:	230a      	movne	r3, #10
 8006b38:	2100      	movs	r1, #0
 8006b3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b3e:	6865      	ldr	r5, [r4, #4]
 8006b40:	60a5      	str	r5, [r4, #8]
 8006b42:	2d00      	cmp	r5, #0
 8006b44:	bfa2      	ittt	ge
 8006b46:	6821      	ldrge	r1, [r4, #0]
 8006b48:	f021 0104 	bicge.w	r1, r1, #4
 8006b4c:	6021      	strge	r1, [r4, #0]
 8006b4e:	b90e      	cbnz	r6, 8006b54 <_printf_i+0x118>
 8006b50:	2d00      	cmp	r5, #0
 8006b52:	d04d      	beq.n	8006bf0 <_printf_i+0x1b4>
 8006b54:	4615      	mov	r5, r2
 8006b56:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b5a:	fb03 6711 	mls	r7, r3, r1, r6
 8006b5e:	5dc7      	ldrb	r7, [r0, r7]
 8006b60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b64:	4637      	mov	r7, r6
 8006b66:	42bb      	cmp	r3, r7
 8006b68:	460e      	mov	r6, r1
 8006b6a:	d9f4      	bls.n	8006b56 <_printf_i+0x11a>
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d10b      	bne.n	8006b88 <_printf_i+0x14c>
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	07de      	lsls	r6, r3, #31
 8006b74:	d508      	bpl.n	8006b88 <_printf_i+0x14c>
 8006b76:	6923      	ldr	r3, [r4, #16]
 8006b78:	6861      	ldr	r1, [r4, #4]
 8006b7a:	4299      	cmp	r1, r3
 8006b7c:	bfde      	ittt	le
 8006b7e:	2330      	movle	r3, #48	; 0x30
 8006b80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b88:	1b52      	subs	r2, r2, r5
 8006b8a:	6122      	str	r2, [r4, #16]
 8006b8c:	f8cd a000 	str.w	sl, [sp]
 8006b90:	464b      	mov	r3, r9
 8006b92:	aa03      	add	r2, sp, #12
 8006b94:	4621      	mov	r1, r4
 8006b96:	4640      	mov	r0, r8
 8006b98:	f7ff fee2 	bl	8006960 <_printf_common>
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d14c      	bne.n	8006c3a <_printf_i+0x1fe>
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	b004      	add	sp, #16
 8006ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006baa:	4835      	ldr	r0, [pc, #212]	; (8006c80 <_printf_i+0x244>)
 8006bac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006bb0:	6829      	ldr	r1, [r5, #0]
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bb8:	6029      	str	r1, [r5, #0]
 8006bba:	061d      	lsls	r5, r3, #24
 8006bbc:	d514      	bpl.n	8006be8 <_printf_i+0x1ac>
 8006bbe:	07df      	lsls	r7, r3, #31
 8006bc0:	bf44      	itt	mi
 8006bc2:	f043 0320 	orrmi.w	r3, r3, #32
 8006bc6:	6023      	strmi	r3, [r4, #0]
 8006bc8:	b91e      	cbnz	r6, 8006bd2 <_printf_i+0x196>
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	f023 0320 	bic.w	r3, r3, #32
 8006bd0:	6023      	str	r3, [r4, #0]
 8006bd2:	2310      	movs	r3, #16
 8006bd4:	e7b0      	b.n	8006b38 <_printf_i+0xfc>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	f043 0320 	orr.w	r3, r3, #32
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	2378      	movs	r3, #120	; 0x78
 8006be0:	4828      	ldr	r0, [pc, #160]	; (8006c84 <_printf_i+0x248>)
 8006be2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006be6:	e7e3      	b.n	8006bb0 <_printf_i+0x174>
 8006be8:	0659      	lsls	r1, r3, #25
 8006bea:	bf48      	it	mi
 8006bec:	b2b6      	uxthmi	r6, r6
 8006bee:	e7e6      	b.n	8006bbe <_printf_i+0x182>
 8006bf0:	4615      	mov	r5, r2
 8006bf2:	e7bb      	b.n	8006b6c <_printf_i+0x130>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	6826      	ldr	r6, [r4, #0]
 8006bf8:	6961      	ldr	r1, [r4, #20]
 8006bfa:	1d18      	adds	r0, r3, #4
 8006bfc:	6028      	str	r0, [r5, #0]
 8006bfe:	0635      	lsls	r5, r6, #24
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	d501      	bpl.n	8006c08 <_printf_i+0x1cc>
 8006c04:	6019      	str	r1, [r3, #0]
 8006c06:	e002      	b.n	8006c0e <_printf_i+0x1d2>
 8006c08:	0670      	lsls	r0, r6, #25
 8006c0a:	d5fb      	bpl.n	8006c04 <_printf_i+0x1c8>
 8006c0c:	8019      	strh	r1, [r3, #0]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	6123      	str	r3, [r4, #16]
 8006c12:	4615      	mov	r5, r2
 8006c14:	e7ba      	b.n	8006b8c <_printf_i+0x150>
 8006c16:	682b      	ldr	r3, [r5, #0]
 8006c18:	1d1a      	adds	r2, r3, #4
 8006c1a:	602a      	str	r2, [r5, #0]
 8006c1c:	681d      	ldr	r5, [r3, #0]
 8006c1e:	6862      	ldr	r2, [r4, #4]
 8006c20:	2100      	movs	r1, #0
 8006c22:	4628      	mov	r0, r5
 8006c24:	f7f9 fafc 	bl	8000220 <memchr>
 8006c28:	b108      	cbz	r0, 8006c2e <_printf_i+0x1f2>
 8006c2a:	1b40      	subs	r0, r0, r5
 8006c2c:	6060      	str	r0, [r4, #4]
 8006c2e:	6863      	ldr	r3, [r4, #4]
 8006c30:	6123      	str	r3, [r4, #16]
 8006c32:	2300      	movs	r3, #0
 8006c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c38:	e7a8      	b.n	8006b8c <_printf_i+0x150>
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	462a      	mov	r2, r5
 8006c3e:	4649      	mov	r1, r9
 8006c40:	4640      	mov	r0, r8
 8006c42:	47d0      	blx	sl
 8006c44:	3001      	adds	r0, #1
 8006c46:	d0ab      	beq.n	8006ba0 <_printf_i+0x164>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	079b      	lsls	r3, r3, #30
 8006c4c:	d413      	bmi.n	8006c76 <_printf_i+0x23a>
 8006c4e:	68e0      	ldr	r0, [r4, #12]
 8006c50:	9b03      	ldr	r3, [sp, #12]
 8006c52:	4298      	cmp	r0, r3
 8006c54:	bfb8      	it	lt
 8006c56:	4618      	movlt	r0, r3
 8006c58:	e7a4      	b.n	8006ba4 <_printf_i+0x168>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	4649      	mov	r1, r9
 8006c60:	4640      	mov	r0, r8
 8006c62:	47d0      	blx	sl
 8006c64:	3001      	adds	r0, #1
 8006c66:	d09b      	beq.n	8006ba0 <_printf_i+0x164>
 8006c68:	3501      	adds	r5, #1
 8006c6a:	68e3      	ldr	r3, [r4, #12]
 8006c6c:	9903      	ldr	r1, [sp, #12]
 8006c6e:	1a5b      	subs	r3, r3, r1
 8006c70:	42ab      	cmp	r3, r5
 8006c72:	dcf2      	bgt.n	8006c5a <_printf_i+0x21e>
 8006c74:	e7eb      	b.n	8006c4e <_printf_i+0x212>
 8006c76:	2500      	movs	r5, #0
 8006c78:	f104 0619 	add.w	r6, r4, #25
 8006c7c:	e7f5      	b.n	8006c6a <_printf_i+0x22e>
 8006c7e:	bf00      	nop
 8006c80:	080091fa 	.word	0x080091fa
 8006c84:	0800920b 	.word	0x0800920b

08006c88 <siprintf>:
 8006c88:	b40e      	push	{r1, r2, r3}
 8006c8a:	b500      	push	{lr}
 8006c8c:	b09c      	sub	sp, #112	; 0x70
 8006c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c90:	9002      	str	r0, [sp, #8]
 8006c92:	9006      	str	r0, [sp, #24]
 8006c94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c98:	4809      	ldr	r0, [pc, #36]	; (8006cc0 <siprintf+0x38>)
 8006c9a:	9107      	str	r1, [sp, #28]
 8006c9c:	9104      	str	r1, [sp, #16]
 8006c9e:	4909      	ldr	r1, [pc, #36]	; (8006cc4 <siprintf+0x3c>)
 8006ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ca4:	9105      	str	r1, [sp, #20]
 8006ca6:	6800      	ldr	r0, [r0, #0]
 8006ca8:	9301      	str	r3, [sp, #4]
 8006caa:	a902      	add	r1, sp, #8
 8006cac:	f001 fb76 	bl	800839c <_svfiprintf_r>
 8006cb0:	9b02      	ldr	r3, [sp, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	b01c      	add	sp, #112	; 0x70
 8006cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cbc:	b003      	add	sp, #12
 8006cbe:	4770      	bx	lr
 8006cc0:	20000074 	.word	0x20000074
 8006cc4:	ffff0208 	.word	0xffff0208

08006cc8 <quorem>:
 8006cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	6903      	ldr	r3, [r0, #16]
 8006cce:	690c      	ldr	r4, [r1, #16]
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	4607      	mov	r7, r0
 8006cd4:	f2c0 8081 	blt.w	8006dda <quorem+0x112>
 8006cd8:	3c01      	subs	r4, #1
 8006cda:	f101 0814 	add.w	r8, r1, #20
 8006cde:	f100 0514 	add.w	r5, r0, #20
 8006ce2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ce6:	9301      	str	r3, [sp, #4]
 8006ce8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006cf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cfc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d00:	d331      	bcc.n	8006d66 <quorem+0x9e>
 8006d02:	f04f 0e00 	mov.w	lr, #0
 8006d06:	4640      	mov	r0, r8
 8006d08:	46ac      	mov	ip, r5
 8006d0a:	46f2      	mov	sl, lr
 8006d0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d10:	b293      	uxth	r3, r2
 8006d12:	fb06 e303 	mla	r3, r6, r3, lr
 8006d16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	ebaa 0303 	sub.w	r3, sl, r3
 8006d20:	f8dc a000 	ldr.w	sl, [ip]
 8006d24:	0c12      	lsrs	r2, r2, #16
 8006d26:	fa13 f38a 	uxtah	r3, r3, sl
 8006d2a:	fb06 e202 	mla	r2, r6, r2, lr
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	9b00      	ldr	r3, [sp, #0]
 8006d32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d36:	b292      	uxth	r2, r2
 8006d38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006d3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d40:	f8bd 3000 	ldrh.w	r3, [sp]
 8006d44:	4581      	cmp	r9, r0
 8006d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d4a:	f84c 3b04 	str.w	r3, [ip], #4
 8006d4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d52:	d2db      	bcs.n	8006d0c <quorem+0x44>
 8006d54:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d58:	b92b      	cbnz	r3, 8006d66 <quorem+0x9e>
 8006d5a:	9b01      	ldr	r3, [sp, #4]
 8006d5c:	3b04      	subs	r3, #4
 8006d5e:	429d      	cmp	r5, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	d32e      	bcc.n	8006dc2 <quorem+0xfa>
 8006d64:	613c      	str	r4, [r7, #16]
 8006d66:	4638      	mov	r0, r7
 8006d68:	f001 f8c4 	bl	8007ef4 <__mcmp>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	db24      	blt.n	8006dba <quorem+0xf2>
 8006d70:	3601      	adds	r6, #1
 8006d72:	4628      	mov	r0, r5
 8006d74:	f04f 0c00 	mov.w	ip, #0
 8006d78:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d7c:	f8d0 e000 	ldr.w	lr, [r0]
 8006d80:	b293      	uxth	r3, r2
 8006d82:	ebac 0303 	sub.w	r3, ip, r3
 8006d86:	0c12      	lsrs	r2, r2, #16
 8006d88:	fa13 f38e 	uxtah	r3, r3, lr
 8006d8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d9a:	45c1      	cmp	r9, r8
 8006d9c:	f840 3b04 	str.w	r3, [r0], #4
 8006da0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006da4:	d2e8      	bcs.n	8006d78 <quorem+0xb0>
 8006da6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dae:	b922      	cbnz	r2, 8006dba <quorem+0xf2>
 8006db0:	3b04      	subs	r3, #4
 8006db2:	429d      	cmp	r5, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	d30a      	bcc.n	8006dce <quorem+0x106>
 8006db8:	613c      	str	r4, [r7, #16]
 8006dba:	4630      	mov	r0, r6
 8006dbc:	b003      	add	sp, #12
 8006dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	3b04      	subs	r3, #4
 8006dc6:	2a00      	cmp	r2, #0
 8006dc8:	d1cc      	bne.n	8006d64 <quorem+0x9c>
 8006dca:	3c01      	subs	r4, #1
 8006dcc:	e7c7      	b.n	8006d5e <quorem+0x96>
 8006dce:	6812      	ldr	r2, [r2, #0]
 8006dd0:	3b04      	subs	r3, #4
 8006dd2:	2a00      	cmp	r2, #0
 8006dd4:	d1f0      	bne.n	8006db8 <quorem+0xf0>
 8006dd6:	3c01      	subs	r4, #1
 8006dd8:	e7eb      	b.n	8006db2 <quorem+0xea>
 8006dda:	2000      	movs	r0, #0
 8006ddc:	e7ee      	b.n	8006dbc <quorem+0xf4>
	...

08006de0 <_dtoa_r>:
 8006de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	ed2d 8b04 	vpush	{d8-d9}
 8006de8:	ec57 6b10 	vmov	r6, r7, d0
 8006dec:	b093      	sub	sp, #76	; 0x4c
 8006dee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006df0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006df4:	9106      	str	r1, [sp, #24]
 8006df6:	ee10 aa10 	vmov	sl, s0
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8006dfe:	930c      	str	r3, [sp, #48]	; 0x30
 8006e00:	46bb      	mov	fp, r7
 8006e02:	b975      	cbnz	r5, 8006e22 <_dtoa_r+0x42>
 8006e04:	2010      	movs	r0, #16
 8006e06:	f000 fddd 	bl	80079c4 <malloc>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	6260      	str	r0, [r4, #36]	; 0x24
 8006e0e:	b920      	cbnz	r0, 8006e1a <_dtoa_r+0x3a>
 8006e10:	4ba7      	ldr	r3, [pc, #668]	; (80070b0 <_dtoa_r+0x2d0>)
 8006e12:	21ea      	movs	r1, #234	; 0xea
 8006e14:	48a7      	ldr	r0, [pc, #668]	; (80070b4 <_dtoa_r+0x2d4>)
 8006e16:	f001 fbd1 	bl	80085bc <__assert_func>
 8006e1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e1e:	6005      	str	r5, [r0, #0]
 8006e20:	60c5      	str	r5, [r0, #12]
 8006e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e24:	6819      	ldr	r1, [r3, #0]
 8006e26:	b151      	cbz	r1, 8006e3e <_dtoa_r+0x5e>
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	604a      	str	r2, [r1, #4]
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	4093      	lsls	r3, r2
 8006e30:	608b      	str	r3, [r1, #8]
 8006e32:	4620      	mov	r0, r4
 8006e34:	f000 fe1c 	bl	8007a70 <_Bfree>
 8006e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	1e3b      	subs	r3, r7, #0
 8006e40:	bfaa      	itet	ge
 8006e42:	2300      	movge	r3, #0
 8006e44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006e48:	f8c8 3000 	strge.w	r3, [r8]
 8006e4c:	4b9a      	ldr	r3, [pc, #616]	; (80070b8 <_dtoa_r+0x2d8>)
 8006e4e:	bfbc      	itt	lt
 8006e50:	2201      	movlt	r2, #1
 8006e52:	f8c8 2000 	strlt.w	r2, [r8]
 8006e56:	ea33 030b 	bics.w	r3, r3, fp
 8006e5a:	d11b      	bne.n	8006e94 <_dtoa_r+0xb4>
 8006e5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e68:	4333      	orrs	r3, r6
 8006e6a:	f000 8592 	beq.w	8007992 <_dtoa_r+0xbb2>
 8006e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e70:	b963      	cbnz	r3, 8006e8c <_dtoa_r+0xac>
 8006e72:	4b92      	ldr	r3, [pc, #584]	; (80070bc <_dtoa_r+0x2dc>)
 8006e74:	e022      	b.n	8006ebc <_dtoa_r+0xdc>
 8006e76:	4b92      	ldr	r3, [pc, #584]	; (80070c0 <_dtoa_r+0x2e0>)
 8006e78:	9301      	str	r3, [sp, #4]
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	9801      	ldr	r0, [sp, #4]
 8006e82:	b013      	add	sp, #76	; 0x4c
 8006e84:	ecbd 8b04 	vpop	{d8-d9}
 8006e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8c:	4b8b      	ldr	r3, [pc, #556]	; (80070bc <_dtoa_r+0x2dc>)
 8006e8e:	9301      	str	r3, [sp, #4]
 8006e90:	3303      	adds	r3, #3
 8006e92:	e7f3      	b.n	8006e7c <_dtoa_r+0x9c>
 8006e94:	2200      	movs	r2, #0
 8006e96:	2300      	movs	r3, #0
 8006e98:	4650      	mov	r0, sl
 8006e9a:	4659      	mov	r1, fp
 8006e9c:	f7f9 fe34 	bl	8000b08 <__aeabi_dcmpeq>
 8006ea0:	ec4b ab19 	vmov	d9, sl, fp
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	b158      	cbz	r0, 8006ec0 <_dtoa_r+0xe0>
 8006ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006eaa:	2301      	movs	r3, #1
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 856b 	beq.w	800798c <_dtoa_r+0xbac>
 8006eb6:	4883      	ldr	r0, [pc, #524]	; (80070c4 <_dtoa_r+0x2e4>)
 8006eb8:	6018      	str	r0, [r3, #0]
 8006eba:	1e43      	subs	r3, r0, #1
 8006ebc:	9301      	str	r3, [sp, #4]
 8006ebe:	e7df      	b.n	8006e80 <_dtoa_r+0xa0>
 8006ec0:	ec4b ab10 	vmov	d0, sl, fp
 8006ec4:	aa10      	add	r2, sp, #64	; 0x40
 8006ec6:	a911      	add	r1, sp, #68	; 0x44
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f001 f8b9 	bl	8008040 <__d2b>
 8006ece:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006ed2:	ee08 0a10 	vmov	s16, r0
 8006ed6:	2d00      	cmp	r5, #0
 8006ed8:	f000 8084 	beq.w	8006fe4 <_dtoa_r+0x204>
 8006edc:	ee19 3a90 	vmov	r3, s19
 8006ee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ee4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006ee8:	4656      	mov	r6, sl
 8006eea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006eee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006ef2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006ef6:	4b74      	ldr	r3, [pc, #464]	; (80070c8 <_dtoa_r+0x2e8>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4630      	mov	r0, r6
 8006efc:	4639      	mov	r1, r7
 8006efe:	f7f9 f9e3 	bl	80002c8 <__aeabi_dsub>
 8006f02:	a365      	add	r3, pc, #404	; (adr r3, 8007098 <_dtoa_r+0x2b8>)
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	f7f9 fb96 	bl	8000638 <__aeabi_dmul>
 8006f0c:	a364      	add	r3, pc, #400	; (adr r3, 80070a0 <_dtoa_r+0x2c0>)
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	f7f9 f9db 	bl	80002cc <__adddf3>
 8006f16:	4606      	mov	r6, r0
 8006f18:	4628      	mov	r0, r5
 8006f1a:	460f      	mov	r7, r1
 8006f1c:	f7f9 fb22 	bl	8000564 <__aeabi_i2d>
 8006f20:	a361      	add	r3, pc, #388	; (adr r3, 80070a8 <_dtoa_r+0x2c8>)
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	f7f9 fb87 	bl	8000638 <__aeabi_dmul>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4630      	mov	r0, r6
 8006f30:	4639      	mov	r1, r7
 8006f32:	f7f9 f9cb 	bl	80002cc <__adddf3>
 8006f36:	4606      	mov	r6, r0
 8006f38:	460f      	mov	r7, r1
 8006f3a:	f7f9 fe2d 	bl	8000b98 <__aeabi_d2iz>
 8006f3e:	2200      	movs	r2, #0
 8006f40:	9000      	str	r0, [sp, #0]
 8006f42:	2300      	movs	r3, #0
 8006f44:	4630      	mov	r0, r6
 8006f46:	4639      	mov	r1, r7
 8006f48:	f7f9 fde8 	bl	8000b1c <__aeabi_dcmplt>
 8006f4c:	b150      	cbz	r0, 8006f64 <_dtoa_r+0x184>
 8006f4e:	9800      	ldr	r0, [sp, #0]
 8006f50:	f7f9 fb08 	bl	8000564 <__aeabi_i2d>
 8006f54:	4632      	mov	r2, r6
 8006f56:	463b      	mov	r3, r7
 8006f58:	f7f9 fdd6 	bl	8000b08 <__aeabi_dcmpeq>
 8006f5c:	b910      	cbnz	r0, 8006f64 <_dtoa_r+0x184>
 8006f5e:	9b00      	ldr	r3, [sp, #0]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	9b00      	ldr	r3, [sp, #0]
 8006f66:	2b16      	cmp	r3, #22
 8006f68:	d85a      	bhi.n	8007020 <_dtoa_r+0x240>
 8006f6a:	9a00      	ldr	r2, [sp, #0]
 8006f6c:	4b57      	ldr	r3, [pc, #348]	; (80070cc <_dtoa_r+0x2ec>)
 8006f6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	ec51 0b19 	vmov	r0, r1, d9
 8006f7a:	f7f9 fdcf 	bl	8000b1c <__aeabi_dcmplt>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d050      	beq.n	8007024 <_dtoa_r+0x244>
 8006f82:	9b00      	ldr	r3, [sp, #0]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f8e:	1b5d      	subs	r5, r3, r5
 8006f90:	1e6b      	subs	r3, r5, #1
 8006f92:	9305      	str	r3, [sp, #20]
 8006f94:	bf45      	ittet	mi
 8006f96:	f1c5 0301 	rsbmi	r3, r5, #1
 8006f9a:	9304      	strmi	r3, [sp, #16]
 8006f9c:	2300      	movpl	r3, #0
 8006f9e:	2300      	movmi	r3, #0
 8006fa0:	bf4c      	ite	mi
 8006fa2:	9305      	strmi	r3, [sp, #20]
 8006fa4:	9304      	strpl	r3, [sp, #16]
 8006fa6:	9b00      	ldr	r3, [sp, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	db3d      	blt.n	8007028 <_dtoa_r+0x248>
 8006fac:	9b05      	ldr	r3, [sp, #20]
 8006fae:	9a00      	ldr	r2, [sp, #0]
 8006fb0:	920a      	str	r2, [sp, #40]	; 0x28
 8006fb2:	4413      	add	r3, r2
 8006fb4:	9305      	str	r3, [sp, #20]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	9307      	str	r3, [sp, #28]
 8006fba:	9b06      	ldr	r3, [sp, #24]
 8006fbc:	2b09      	cmp	r3, #9
 8006fbe:	f200 8089 	bhi.w	80070d4 <_dtoa_r+0x2f4>
 8006fc2:	2b05      	cmp	r3, #5
 8006fc4:	bfc4      	itt	gt
 8006fc6:	3b04      	subgt	r3, #4
 8006fc8:	9306      	strgt	r3, [sp, #24]
 8006fca:	9b06      	ldr	r3, [sp, #24]
 8006fcc:	f1a3 0302 	sub.w	r3, r3, #2
 8006fd0:	bfcc      	ite	gt
 8006fd2:	2500      	movgt	r5, #0
 8006fd4:	2501      	movle	r5, #1
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	f200 8087 	bhi.w	80070ea <_dtoa_r+0x30a>
 8006fdc:	e8df f003 	tbb	[pc, r3]
 8006fe0:	59383a2d 	.word	0x59383a2d
 8006fe4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006fe8:	441d      	add	r5, r3
 8006fea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006fee:	2b20      	cmp	r3, #32
 8006ff0:	bfc1      	itttt	gt
 8006ff2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ff6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006ffa:	fa0b f303 	lslgt.w	r3, fp, r3
 8006ffe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007002:	bfda      	itte	le
 8007004:	f1c3 0320 	rsble	r3, r3, #32
 8007008:	fa06 f003 	lslle.w	r0, r6, r3
 800700c:	4318      	orrgt	r0, r3
 800700e:	f7f9 fa99 	bl	8000544 <__aeabi_ui2d>
 8007012:	2301      	movs	r3, #1
 8007014:	4606      	mov	r6, r0
 8007016:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800701a:	3d01      	subs	r5, #1
 800701c:	930e      	str	r3, [sp, #56]	; 0x38
 800701e:	e76a      	b.n	8006ef6 <_dtoa_r+0x116>
 8007020:	2301      	movs	r3, #1
 8007022:	e7b2      	b.n	8006f8a <_dtoa_r+0x1aa>
 8007024:	900b      	str	r0, [sp, #44]	; 0x2c
 8007026:	e7b1      	b.n	8006f8c <_dtoa_r+0x1ac>
 8007028:	9b04      	ldr	r3, [sp, #16]
 800702a:	9a00      	ldr	r2, [sp, #0]
 800702c:	1a9b      	subs	r3, r3, r2
 800702e:	9304      	str	r3, [sp, #16]
 8007030:	4253      	negs	r3, r2
 8007032:	9307      	str	r3, [sp, #28]
 8007034:	2300      	movs	r3, #0
 8007036:	930a      	str	r3, [sp, #40]	; 0x28
 8007038:	e7bf      	b.n	8006fba <_dtoa_r+0x1da>
 800703a:	2300      	movs	r3, #0
 800703c:	9308      	str	r3, [sp, #32]
 800703e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007040:	2b00      	cmp	r3, #0
 8007042:	dc55      	bgt.n	80070f0 <_dtoa_r+0x310>
 8007044:	2301      	movs	r3, #1
 8007046:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800704a:	461a      	mov	r2, r3
 800704c:	9209      	str	r2, [sp, #36]	; 0x24
 800704e:	e00c      	b.n	800706a <_dtoa_r+0x28a>
 8007050:	2301      	movs	r3, #1
 8007052:	e7f3      	b.n	800703c <_dtoa_r+0x25c>
 8007054:	2300      	movs	r3, #0
 8007056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007058:	9308      	str	r3, [sp, #32]
 800705a:	9b00      	ldr	r3, [sp, #0]
 800705c:	4413      	add	r3, r2
 800705e:	9302      	str	r3, [sp, #8]
 8007060:	3301      	adds	r3, #1
 8007062:	2b01      	cmp	r3, #1
 8007064:	9303      	str	r3, [sp, #12]
 8007066:	bfb8      	it	lt
 8007068:	2301      	movlt	r3, #1
 800706a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800706c:	2200      	movs	r2, #0
 800706e:	6042      	str	r2, [r0, #4]
 8007070:	2204      	movs	r2, #4
 8007072:	f102 0614 	add.w	r6, r2, #20
 8007076:	429e      	cmp	r6, r3
 8007078:	6841      	ldr	r1, [r0, #4]
 800707a:	d93d      	bls.n	80070f8 <_dtoa_r+0x318>
 800707c:	4620      	mov	r0, r4
 800707e:	f000 fcb7 	bl	80079f0 <_Balloc>
 8007082:	9001      	str	r0, [sp, #4]
 8007084:	2800      	cmp	r0, #0
 8007086:	d13b      	bne.n	8007100 <_dtoa_r+0x320>
 8007088:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <_dtoa_r+0x2f0>)
 800708a:	4602      	mov	r2, r0
 800708c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007090:	e6c0      	b.n	8006e14 <_dtoa_r+0x34>
 8007092:	2301      	movs	r3, #1
 8007094:	e7df      	b.n	8007056 <_dtoa_r+0x276>
 8007096:	bf00      	nop
 8007098:	636f4361 	.word	0x636f4361
 800709c:	3fd287a7 	.word	0x3fd287a7
 80070a0:	8b60c8b3 	.word	0x8b60c8b3
 80070a4:	3fc68a28 	.word	0x3fc68a28
 80070a8:	509f79fb 	.word	0x509f79fb
 80070ac:	3fd34413 	.word	0x3fd34413
 80070b0:	08009229 	.word	0x08009229
 80070b4:	08009240 	.word	0x08009240
 80070b8:	7ff00000 	.word	0x7ff00000
 80070bc:	08009225 	.word	0x08009225
 80070c0:	0800921c 	.word	0x0800921c
 80070c4:	080091f9 	.word	0x080091f9
 80070c8:	3ff80000 	.word	0x3ff80000
 80070cc:	08009330 	.word	0x08009330
 80070d0:	0800929b 	.word	0x0800929b
 80070d4:	2501      	movs	r5, #1
 80070d6:	2300      	movs	r3, #0
 80070d8:	9306      	str	r3, [sp, #24]
 80070da:	9508      	str	r5, [sp, #32]
 80070dc:	f04f 33ff 	mov.w	r3, #4294967295
 80070e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070e4:	2200      	movs	r2, #0
 80070e6:	2312      	movs	r3, #18
 80070e8:	e7b0      	b.n	800704c <_dtoa_r+0x26c>
 80070ea:	2301      	movs	r3, #1
 80070ec:	9308      	str	r3, [sp, #32]
 80070ee:	e7f5      	b.n	80070dc <_dtoa_r+0x2fc>
 80070f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070f6:	e7b8      	b.n	800706a <_dtoa_r+0x28a>
 80070f8:	3101      	adds	r1, #1
 80070fa:	6041      	str	r1, [r0, #4]
 80070fc:	0052      	lsls	r2, r2, #1
 80070fe:	e7b8      	b.n	8007072 <_dtoa_r+0x292>
 8007100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007102:	9a01      	ldr	r2, [sp, #4]
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	2b0e      	cmp	r3, #14
 800710a:	f200 809d 	bhi.w	8007248 <_dtoa_r+0x468>
 800710e:	2d00      	cmp	r5, #0
 8007110:	f000 809a 	beq.w	8007248 <_dtoa_r+0x468>
 8007114:	9b00      	ldr	r3, [sp, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	dd32      	ble.n	8007180 <_dtoa_r+0x3a0>
 800711a:	4ab7      	ldr	r2, [pc, #732]	; (80073f8 <_dtoa_r+0x618>)
 800711c:	f003 030f 	and.w	r3, r3, #15
 8007120:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007124:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007128:	9b00      	ldr	r3, [sp, #0]
 800712a:	05d8      	lsls	r0, r3, #23
 800712c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007130:	d516      	bpl.n	8007160 <_dtoa_r+0x380>
 8007132:	4bb2      	ldr	r3, [pc, #712]	; (80073fc <_dtoa_r+0x61c>)
 8007134:	ec51 0b19 	vmov	r0, r1, d9
 8007138:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800713c:	f7f9 fba6 	bl	800088c <__aeabi_ddiv>
 8007140:	f007 070f 	and.w	r7, r7, #15
 8007144:	4682      	mov	sl, r0
 8007146:	468b      	mov	fp, r1
 8007148:	2503      	movs	r5, #3
 800714a:	4eac      	ldr	r6, [pc, #688]	; (80073fc <_dtoa_r+0x61c>)
 800714c:	b957      	cbnz	r7, 8007164 <_dtoa_r+0x384>
 800714e:	4642      	mov	r2, r8
 8007150:	464b      	mov	r3, r9
 8007152:	4650      	mov	r0, sl
 8007154:	4659      	mov	r1, fp
 8007156:	f7f9 fb99 	bl	800088c <__aeabi_ddiv>
 800715a:	4682      	mov	sl, r0
 800715c:	468b      	mov	fp, r1
 800715e:	e028      	b.n	80071b2 <_dtoa_r+0x3d2>
 8007160:	2502      	movs	r5, #2
 8007162:	e7f2      	b.n	800714a <_dtoa_r+0x36a>
 8007164:	07f9      	lsls	r1, r7, #31
 8007166:	d508      	bpl.n	800717a <_dtoa_r+0x39a>
 8007168:	4640      	mov	r0, r8
 800716a:	4649      	mov	r1, r9
 800716c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007170:	f7f9 fa62 	bl	8000638 <__aeabi_dmul>
 8007174:	3501      	adds	r5, #1
 8007176:	4680      	mov	r8, r0
 8007178:	4689      	mov	r9, r1
 800717a:	107f      	asrs	r7, r7, #1
 800717c:	3608      	adds	r6, #8
 800717e:	e7e5      	b.n	800714c <_dtoa_r+0x36c>
 8007180:	f000 809b 	beq.w	80072ba <_dtoa_r+0x4da>
 8007184:	9b00      	ldr	r3, [sp, #0]
 8007186:	4f9d      	ldr	r7, [pc, #628]	; (80073fc <_dtoa_r+0x61c>)
 8007188:	425e      	negs	r6, r3
 800718a:	4b9b      	ldr	r3, [pc, #620]	; (80073f8 <_dtoa_r+0x618>)
 800718c:	f006 020f 	and.w	r2, r6, #15
 8007190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	ec51 0b19 	vmov	r0, r1, d9
 800719c:	f7f9 fa4c 	bl	8000638 <__aeabi_dmul>
 80071a0:	1136      	asrs	r6, r6, #4
 80071a2:	4682      	mov	sl, r0
 80071a4:	468b      	mov	fp, r1
 80071a6:	2300      	movs	r3, #0
 80071a8:	2502      	movs	r5, #2
 80071aa:	2e00      	cmp	r6, #0
 80071ac:	d17a      	bne.n	80072a4 <_dtoa_r+0x4c4>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1d3      	bne.n	800715a <_dtoa_r+0x37a>
 80071b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 8082 	beq.w	80072be <_dtoa_r+0x4de>
 80071ba:	4b91      	ldr	r3, [pc, #580]	; (8007400 <_dtoa_r+0x620>)
 80071bc:	2200      	movs	r2, #0
 80071be:	4650      	mov	r0, sl
 80071c0:	4659      	mov	r1, fp
 80071c2:	f7f9 fcab 	bl	8000b1c <__aeabi_dcmplt>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d079      	beq.n	80072be <_dtoa_r+0x4de>
 80071ca:	9b03      	ldr	r3, [sp, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d076      	beq.n	80072be <_dtoa_r+0x4de>
 80071d0:	9b02      	ldr	r3, [sp, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	dd36      	ble.n	8007244 <_dtoa_r+0x464>
 80071d6:	9b00      	ldr	r3, [sp, #0]
 80071d8:	4650      	mov	r0, sl
 80071da:	4659      	mov	r1, fp
 80071dc:	1e5f      	subs	r7, r3, #1
 80071de:	2200      	movs	r2, #0
 80071e0:	4b88      	ldr	r3, [pc, #544]	; (8007404 <_dtoa_r+0x624>)
 80071e2:	f7f9 fa29 	bl	8000638 <__aeabi_dmul>
 80071e6:	9e02      	ldr	r6, [sp, #8]
 80071e8:	4682      	mov	sl, r0
 80071ea:	468b      	mov	fp, r1
 80071ec:	3501      	adds	r5, #1
 80071ee:	4628      	mov	r0, r5
 80071f0:	f7f9 f9b8 	bl	8000564 <__aeabi_i2d>
 80071f4:	4652      	mov	r2, sl
 80071f6:	465b      	mov	r3, fp
 80071f8:	f7f9 fa1e 	bl	8000638 <__aeabi_dmul>
 80071fc:	4b82      	ldr	r3, [pc, #520]	; (8007408 <_dtoa_r+0x628>)
 80071fe:	2200      	movs	r2, #0
 8007200:	f7f9 f864 	bl	80002cc <__adddf3>
 8007204:	46d0      	mov	r8, sl
 8007206:	46d9      	mov	r9, fp
 8007208:	4682      	mov	sl, r0
 800720a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800720e:	2e00      	cmp	r6, #0
 8007210:	d158      	bne.n	80072c4 <_dtoa_r+0x4e4>
 8007212:	4b7e      	ldr	r3, [pc, #504]	; (800740c <_dtoa_r+0x62c>)
 8007214:	2200      	movs	r2, #0
 8007216:	4640      	mov	r0, r8
 8007218:	4649      	mov	r1, r9
 800721a:	f7f9 f855 	bl	80002c8 <__aeabi_dsub>
 800721e:	4652      	mov	r2, sl
 8007220:	465b      	mov	r3, fp
 8007222:	4680      	mov	r8, r0
 8007224:	4689      	mov	r9, r1
 8007226:	f7f9 fc97 	bl	8000b58 <__aeabi_dcmpgt>
 800722a:	2800      	cmp	r0, #0
 800722c:	f040 8295 	bne.w	800775a <_dtoa_r+0x97a>
 8007230:	4652      	mov	r2, sl
 8007232:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007236:	4640      	mov	r0, r8
 8007238:	4649      	mov	r1, r9
 800723a:	f7f9 fc6f 	bl	8000b1c <__aeabi_dcmplt>
 800723e:	2800      	cmp	r0, #0
 8007240:	f040 8289 	bne.w	8007756 <_dtoa_r+0x976>
 8007244:	ec5b ab19 	vmov	sl, fp, d9
 8007248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800724a:	2b00      	cmp	r3, #0
 800724c:	f2c0 8148 	blt.w	80074e0 <_dtoa_r+0x700>
 8007250:	9a00      	ldr	r2, [sp, #0]
 8007252:	2a0e      	cmp	r2, #14
 8007254:	f300 8144 	bgt.w	80074e0 <_dtoa_r+0x700>
 8007258:	4b67      	ldr	r3, [pc, #412]	; (80073f8 <_dtoa_r+0x618>)
 800725a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800725e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007264:	2b00      	cmp	r3, #0
 8007266:	f280 80d5 	bge.w	8007414 <_dtoa_r+0x634>
 800726a:	9b03      	ldr	r3, [sp, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	f300 80d1 	bgt.w	8007414 <_dtoa_r+0x634>
 8007272:	f040 826f 	bne.w	8007754 <_dtoa_r+0x974>
 8007276:	4b65      	ldr	r3, [pc, #404]	; (800740c <_dtoa_r+0x62c>)
 8007278:	2200      	movs	r2, #0
 800727a:	4640      	mov	r0, r8
 800727c:	4649      	mov	r1, r9
 800727e:	f7f9 f9db 	bl	8000638 <__aeabi_dmul>
 8007282:	4652      	mov	r2, sl
 8007284:	465b      	mov	r3, fp
 8007286:	f7f9 fc5d 	bl	8000b44 <__aeabi_dcmpge>
 800728a:	9e03      	ldr	r6, [sp, #12]
 800728c:	4637      	mov	r7, r6
 800728e:	2800      	cmp	r0, #0
 8007290:	f040 8245 	bne.w	800771e <_dtoa_r+0x93e>
 8007294:	9d01      	ldr	r5, [sp, #4]
 8007296:	2331      	movs	r3, #49	; 0x31
 8007298:	f805 3b01 	strb.w	r3, [r5], #1
 800729c:	9b00      	ldr	r3, [sp, #0]
 800729e:	3301      	adds	r3, #1
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	e240      	b.n	8007726 <_dtoa_r+0x946>
 80072a4:	07f2      	lsls	r2, r6, #31
 80072a6:	d505      	bpl.n	80072b4 <_dtoa_r+0x4d4>
 80072a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072ac:	f7f9 f9c4 	bl	8000638 <__aeabi_dmul>
 80072b0:	3501      	adds	r5, #1
 80072b2:	2301      	movs	r3, #1
 80072b4:	1076      	asrs	r6, r6, #1
 80072b6:	3708      	adds	r7, #8
 80072b8:	e777      	b.n	80071aa <_dtoa_r+0x3ca>
 80072ba:	2502      	movs	r5, #2
 80072bc:	e779      	b.n	80071b2 <_dtoa_r+0x3d2>
 80072be:	9f00      	ldr	r7, [sp, #0]
 80072c0:	9e03      	ldr	r6, [sp, #12]
 80072c2:	e794      	b.n	80071ee <_dtoa_r+0x40e>
 80072c4:	9901      	ldr	r1, [sp, #4]
 80072c6:	4b4c      	ldr	r3, [pc, #304]	; (80073f8 <_dtoa_r+0x618>)
 80072c8:	4431      	add	r1, r6
 80072ca:	910d      	str	r1, [sp, #52]	; 0x34
 80072cc:	9908      	ldr	r1, [sp, #32]
 80072ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80072d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072d6:	2900      	cmp	r1, #0
 80072d8:	d043      	beq.n	8007362 <_dtoa_r+0x582>
 80072da:	494d      	ldr	r1, [pc, #308]	; (8007410 <_dtoa_r+0x630>)
 80072dc:	2000      	movs	r0, #0
 80072de:	f7f9 fad5 	bl	800088c <__aeabi_ddiv>
 80072e2:	4652      	mov	r2, sl
 80072e4:	465b      	mov	r3, fp
 80072e6:	f7f8 ffef 	bl	80002c8 <__aeabi_dsub>
 80072ea:	9d01      	ldr	r5, [sp, #4]
 80072ec:	4682      	mov	sl, r0
 80072ee:	468b      	mov	fp, r1
 80072f0:	4649      	mov	r1, r9
 80072f2:	4640      	mov	r0, r8
 80072f4:	f7f9 fc50 	bl	8000b98 <__aeabi_d2iz>
 80072f8:	4606      	mov	r6, r0
 80072fa:	f7f9 f933 	bl	8000564 <__aeabi_i2d>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4640      	mov	r0, r8
 8007304:	4649      	mov	r1, r9
 8007306:	f7f8 ffdf 	bl	80002c8 <__aeabi_dsub>
 800730a:	3630      	adds	r6, #48	; 0x30
 800730c:	f805 6b01 	strb.w	r6, [r5], #1
 8007310:	4652      	mov	r2, sl
 8007312:	465b      	mov	r3, fp
 8007314:	4680      	mov	r8, r0
 8007316:	4689      	mov	r9, r1
 8007318:	f7f9 fc00 	bl	8000b1c <__aeabi_dcmplt>
 800731c:	2800      	cmp	r0, #0
 800731e:	d163      	bne.n	80073e8 <_dtoa_r+0x608>
 8007320:	4642      	mov	r2, r8
 8007322:	464b      	mov	r3, r9
 8007324:	4936      	ldr	r1, [pc, #216]	; (8007400 <_dtoa_r+0x620>)
 8007326:	2000      	movs	r0, #0
 8007328:	f7f8 ffce 	bl	80002c8 <__aeabi_dsub>
 800732c:	4652      	mov	r2, sl
 800732e:	465b      	mov	r3, fp
 8007330:	f7f9 fbf4 	bl	8000b1c <__aeabi_dcmplt>
 8007334:	2800      	cmp	r0, #0
 8007336:	f040 80b5 	bne.w	80074a4 <_dtoa_r+0x6c4>
 800733a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800733c:	429d      	cmp	r5, r3
 800733e:	d081      	beq.n	8007244 <_dtoa_r+0x464>
 8007340:	4b30      	ldr	r3, [pc, #192]	; (8007404 <_dtoa_r+0x624>)
 8007342:	2200      	movs	r2, #0
 8007344:	4650      	mov	r0, sl
 8007346:	4659      	mov	r1, fp
 8007348:	f7f9 f976 	bl	8000638 <__aeabi_dmul>
 800734c:	4b2d      	ldr	r3, [pc, #180]	; (8007404 <_dtoa_r+0x624>)
 800734e:	4682      	mov	sl, r0
 8007350:	468b      	mov	fp, r1
 8007352:	4640      	mov	r0, r8
 8007354:	4649      	mov	r1, r9
 8007356:	2200      	movs	r2, #0
 8007358:	f7f9 f96e 	bl	8000638 <__aeabi_dmul>
 800735c:	4680      	mov	r8, r0
 800735e:	4689      	mov	r9, r1
 8007360:	e7c6      	b.n	80072f0 <_dtoa_r+0x510>
 8007362:	4650      	mov	r0, sl
 8007364:	4659      	mov	r1, fp
 8007366:	f7f9 f967 	bl	8000638 <__aeabi_dmul>
 800736a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800736c:	9d01      	ldr	r5, [sp, #4]
 800736e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007370:	4682      	mov	sl, r0
 8007372:	468b      	mov	fp, r1
 8007374:	4649      	mov	r1, r9
 8007376:	4640      	mov	r0, r8
 8007378:	f7f9 fc0e 	bl	8000b98 <__aeabi_d2iz>
 800737c:	4606      	mov	r6, r0
 800737e:	f7f9 f8f1 	bl	8000564 <__aeabi_i2d>
 8007382:	3630      	adds	r6, #48	; 0x30
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4640      	mov	r0, r8
 800738a:	4649      	mov	r1, r9
 800738c:	f7f8 ff9c 	bl	80002c8 <__aeabi_dsub>
 8007390:	f805 6b01 	strb.w	r6, [r5], #1
 8007394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007396:	429d      	cmp	r5, r3
 8007398:	4680      	mov	r8, r0
 800739a:	4689      	mov	r9, r1
 800739c:	f04f 0200 	mov.w	r2, #0
 80073a0:	d124      	bne.n	80073ec <_dtoa_r+0x60c>
 80073a2:	4b1b      	ldr	r3, [pc, #108]	; (8007410 <_dtoa_r+0x630>)
 80073a4:	4650      	mov	r0, sl
 80073a6:	4659      	mov	r1, fp
 80073a8:	f7f8 ff90 	bl	80002cc <__adddf3>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4640      	mov	r0, r8
 80073b2:	4649      	mov	r1, r9
 80073b4:	f7f9 fbd0 	bl	8000b58 <__aeabi_dcmpgt>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d173      	bne.n	80074a4 <_dtoa_r+0x6c4>
 80073bc:	4652      	mov	r2, sl
 80073be:	465b      	mov	r3, fp
 80073c0:	4913      	ldr	r1, [pc, #76]	; (8007410 <_dtoa_r+0x630>)
 80073c2:	2000      	movs	r0, #0
 80073c4:	f7f8 ff80 	bl	80002c8 <__aeabi_dsub>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4640      	mov	r0, r8
 80073ce:	4649      	mov	r1, r9
 80073d0:	f7f9 fba4 	bl	8000b1c <__aeabi_dcmplt>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	f43f af35 	beq.w	8007244 <_dtoa_r+0x464>
 80073da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80073dc:	1e6b      	subs	r3, r5, #1
 80073de:	930f      	str	r3, [sp, #60]	; 0x3c
 80073e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80073e4:	2b30      	cmp	r3, #48	; 0x30
 80073e6:	d0f8      	beq.n	80073da <_dtoa_r+0x5fa>
 80073e8:	9700      	str	r7, [sp, #0]
 80073ea:	e049      	b.n	8007480 <_dtoa_r+0x6a0>
 80073ec:	4b05      	ldr	r3, [pc, #20]	; (8007404 <_dtoa_r+0x624>)
 80073ee:	f7f9 f923 	bl	8000638 <__aeabi_dmul>
 80073f2:	4680      	mov	r8, r0
 80073f4:	4689      	mov	r9, r1
 80073f6:	e7bd      	b.n	8007374 <_dtoa_r+0x594>
 80073f8:	08009330 	.word	0x08009330
 80073fc:	08009308 	.word	0x08009308
 8007400:	3ff00000 	.word	0x3ff00000
 8007404:	40240000 	.word	0x40240000
 8007408:	401c0000 	.word	0x401c0000
 800740c:	40140000 	.word	0x40140000
 8007410:	3fe00000 	.word	0x3fe00000
 8007414:	9d01      	ldr	r5, [sp, #4]
 8007416:	4656      	mov	r6, sl
 8007418:	465f      	mov	r7, fp
 800741a:	4642      	mov	r2, r8
 800741c:	464b      	mov	r3, r9
 800741e:	4630      	mov	r0, r6
 8007420:	4639      	mov	r1, r7
 8007422:	f7f9 fa33 	bl	800088c <__aeabi_ddiv>
 8007426:	f7f9 fbb7 	bl	8000b98 <__aeabi_d2iz>
 800742a:	4682      	mov	sl, r0
 800742c:	f7f9 f89a 	bl	8000564 <__aeabi_i2d>
 8007430:	4642      	mov	r2, r8
 8007432:	464b      	mov	r3, r9
 8007434:	f7f9 f900 	bl	8000638 <__aeabi_dmul>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4630      	mov	r0, r6
 800743e:	4639      	mov	r1, r7
 8007440:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007444:	f7f8 ff40 	bl	80002c8 <__aeabi_dsub>
 8007448:	f805 6b01 	strb.w	r6, [r5], #1
 800744c:	9e01      	ldr	r6, [sp, #4]
 800744e:	9f03      	ldr	r7, [sp, #12]
 8007450:	1bae      	subs	r6, r5, r6
 8007452:	42b7      	cmp	r7, r6
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	d135      	bne.n	80074c6 <_dtoa_r+0x6e6>
 800745a:	f7f8 ff37 	bl	80002cc <__adddf3>
 800745e:	4642      	mov	r2, r8
 8007460:	464b      	mov	r3, r9
 8007462:	4606      	mov	r6, r0
 8007464:	460f      	mov	r7, r1
 8007466:	f7f9 fb77 	bl	8000b58 <__aeabi_dcmpgt>
 800746a:	b9d0      	cbnz	r0, 80074a2 <_dtoa_r+0x6c2>
 800746c:	4642      	mov	r2, r8
 800746e:	464b      	mov	r3, r9
 8007470:	4630      	mov	r0, r6
 8007472:	4639      	mov	r1, r7
 8007474:	f7f9 fb48 	bl	8000b08 <__aeabi_dcmpeq>
 8007478:	b110      	cbz	r0, 8007480 <_dtoa_r+0x6a0>
 800747a:	f01a 0f01 	tst.w	sl, #1
 800747e:	d110      	bne.n	80074a2 <_dtoa_r+0x6c2>
 8007480:	4620      	mov	r0, r4
 8007482:	ee18 1a10 	vmov	r1, s16
 8007486:	f000 faf3 	bl	8007a70 <_Bfree>
 800748a:	2300      	movs	r3, #0
 800748c:	9800      	ldr	r0, [sp, #0]
 800748e:	702b      	strb	r3, [r5, #0]
 8007490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007492:	3001      	adds	r0, #1
 8007494:	6018      	str	r0, [r3, #0]
 8007496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007498:	2b00      	cmp	r3, #0
 800749a:	f43f acf1 	beq.w	8006e80 <_dtoa_r+0xa0>
 800749e:	601d      	str	r5, [r3, #0]
 80074a0:	e4ee      	b.n	8006e80 <_dtoa_r+0xa0>
 80074a2:	9f00      	ldr	r7, [sp, #0]
 80074a4:	462b      	mov	r3, r5
 80074a6:	461d      	mov	r5, r3
 80074a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074ac:	2a39      	cmp	r2, #57	; 0x39
 80074ae:	d106      	bne.n	80074be <_dtoa_r+0x6de>
 80074b0:	9a01      	ldr	r2, [sp, #4]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d1f7      	bne.n	80074a6 <_dtoa_r+0x6c6>
 80074b6:	9901      	ldr	r1, [sp, #4]
 80074b8:	2230      	movs	r2, #48	; 0x30
 80074ba:	3701      	adds	r7, #1
 80074bc:	700a      	strb	r2, [r1, #0]
 80074be:	781a      	ldrb	r2, [r3, #0]
 80074c0:	3201      	adds	r2, #1
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	e790      	b.n	80073e8 <_dtoa_r+0x608>
 80074c6:	4ba6      	ldr	r3, [pc, #664]	; (8007760 <_dtoa_r+0x980>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	f7f9 f8b5 	bl	8000638 <__aeabi_dmul>
 80074ce:	2200      	movs	r2, #0
 80074d0:	2300      	movs	r3, #0
 80074d2:	4606      	mov	r6, r0
 80074d4:	460f      	mov	r7, r1
 80074d6:	f7f9 fb17 	bl	8000b08 <__aeabi_dcmpeq>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d09d      	beq.n	800741a <_dtoa_r+0x63a>
 80074de:	e7cf      	b.n	8007480 <_dtoa_r+0x6a0>
 80074e0:	9a08      	ldr	r2, [sp, #32]
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	f000 80d7 	beq.w	8007696 <_dtoa_r+0x8b6>
 80074e8:	9a06      	ldr	r2, [sp, #24]
 80074ea:	2a01      	cmp	r2, #1
 80074ec:	f300 80ba 	bgt.w	8007664 <_dtoa_r+0x884>
 80074f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	f000 80b2 	beq.w	800765c <_dtoa_r+0x87c>
 80074f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074fc:	9e07      	ldr	r6, [sp, #28]
 80074fe:	9d04      	ldr	r5, [sp, #16]
 8007500:	9a04      	ldr	r2, [sp, #16]
 8007502:	441a      	add	r2, r3
 8007504:	9204      	str	r2, [sp, #16]
 8007506:	9a05      	ldr	r2, [sp, #20]
 8007508:	2101      	movs	r1, #1
 800750a:	441a      	add	r2, r3
 800750c:	4620      	mov	r0, r4
 800750e:	9205      	str	r2, [sp, #20]
 8007510:	f000 fb66 	bl	8007be0 <__i2b>
 8007514:	4607      	mov	r7, r0
 8007516:	2d00      	cmp	r5, #0
 8007518:	dd0c      	ble.n	8007534 <_dtoa_r+0x754>
 800751a:	9b05      	ldr	r3, [sp, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	dd09      	ble.n	8007534 <_dtoa_r+0x754>
 8007520:	42ab      	cmp	r3, r5
 8007522:	9a04      	ldr	r2, [sp, #16]
 8007524:	bfa8      	it	ge
 8007526:	462b      	movge	r3, r5
 8007528:	1ad2      	subs	r2, r2, r3
 800752a:	9204      	str	r2, [sp, #16]
 800752c:	9a05      	ldr	r2, [sp, #20]
 800752e:	1aed      	subs	r5, r5, r3
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	9305      	str	r3, [sp, #20]
 8007534:	9b07      	ldr	r3, [sp, #28]
 8007536:	b31b      	cbz	r3, 8007580 <_dtoa_r+0x7a0>
 8007538:	9b08      	ldr	r3, [sp, #32]
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 80af 	beq.w	800769e <_dtoa_r+0x8be>
 8007540:	2e00      	cmp	r6, #0
 8007542:	dd13      	ble.n	800756c <_dtoa_r+0x78c>
 8007544:	4639      	mov	r1, r7
 8007546:	4632      	mov	r2, r6
 8007548:	4620      	mov	r0, r4
 800754a:	f000 fc09 	bl	8007d60 <__pow5mult>
 800754e:	ee18 2a10 	vmov	r2, s16
 8007552:	4601      	mov	r1, r0
 8007554:	4607      	mov	r7, r0
 8007556:	4620      	mov	r0, r4
 8007558:	f000 fb58 	bl	8007c0c <__multiply>
 800755c:	ee18 1a10 	vmov	r1, s16
 8007560:	4680      	mov	r8, r0
 8007562:	4620      	mov	r0, r4
 8007564:	f000 fa84 	bl	8007a70 <_Bfree>
 8007568:	ee08 8a10 	vmov	s16, r8
 800756c:	9b07      	ldr	r3, [sp, #28]
 800756e:	1b9a      	subs	r2, r3, r6
 8007570:	d006      	beq.n	8007580 <_dtoa_r+0x7a0>
 8007572:	ee18 1a10 	vmov	r1, s16
 8007576:	4620      	mov	r0, r4
 8007578:	f000 fbf2 	bl	8007d60 <__pow5mult>
 800757c:	ee08 0a10 	vmov	s16, r0
 8007580:	2101      	movs	r1, #1
 8007582:	4620      	mov	r0, r4
 8007584:	f000 fb2c 	bl	8007be0 <__i2b>
 8007588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800758a:	2b00      	cmp	r3, #0
 800758c:	4606      	mov	r6, r0
 800758e:	f340 8088 	ble.w	80076a2 <_dtoa_r+0x8c2>
 8007592:	461a      	mov	r2, r3
 8007594:	4601      	mov	r1, r0
 8007596:	4620      	mov	r0, r4
 8007598:	f000 fbe2 	bl	8007d60 <__pow5mult>
 800759c:	9b06      	ldr	r3, [sp, #24]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	4606      	mov	r6, r0
 80075a2:	f340 8081 	ble.w	80076a8 <_dtoa_r+0x8c8>
 80075a6:	f04f 0800 	mov.w	r8, #0
 80075aa:	6933      	ldr	r3, [r6, #16]
 80075ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80075b0:	6918      	ldr	r0, [r3, #16]
 80075b2:	f000 fac5 	bl	8007b40 <__hi0bits>
 80075b6:	f1c0 0020 	rsb	r0, r0, #32
 80075ba:	9b05      	ldr	r3, [sp, #20]
 80075bc:	4418      	add	r0, r3
 80075be:	f010 001f 	ands.w	r0, r0, #31
 80075c2:	f000 8092 	beq.w	80076ea <_dtoa_r+0x90a>
 80075c6:	f1c0 0320 	rsb	r3, r0, #32
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	f340 808a 	ble.w	80076e4 <_dtoa_r+0x904>
 80075d0:	f1c0 001c 	rsb	r0, r0, #28
 80075d4:	9b04      	ldr	r3, [sp, #16]
 80075d6:	4403      	add	r3, r0
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	9b05      	ldr	r3, [sp, #20]
 80075dc:	4403      	add	r3, r0
 80075de:	4405      	add	r5, r0
 80075e0:	9305      	str	r3, [sp, #20]
 80075e2:	9b04      	ldr	r3, [sp, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	dd07      	ble.n	80075f8 <_dtoa_r+0x818>
 80075e8:	ee18 1a10 	vmov	r1, s16
 80075ec:	461a      	mov	r2, r3
 80075ee:	4620      	mov	r0, r4
 80075f0:	f000 fc10 	bl	8007e14 <__lshift>
 80075f4:	ee08 0a10 	vmov	s16, r0
 80075f8:	9b05      	ldr	r3, [sp, #20]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	dd05      	ble.n	800760a <_dtoa_r+0x82a>
 80075fe:	4631      	mov	r1, r6
 8007600:	461a      	mov	r2, r3
 8007602:	4620      	mov	r0, r4
 8007604:	f000 fc06 	bl	8007e14 <__lshift>
 8007608:	4606      	mov	r6, r0
 800760a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800760c:	2b00      	cmp	r3, #0
 800760e:	d06e      	beq.n	80076ee <_dtoa_r+0x90e>
 8007610:	ee18 0a10 	vmov	r0, s16
 8007614:	4631      	mov	r1, r6
 8007616:	f000 fc6d 	bl	8007ef4 <__mcmp>
 800761a:	2800      	cmp	r0, #0
 800761c:	da67      	bge.n	80076ee <_dtoa_r+0x90e>
 800761e:	9b00      	ldr	r3, [sp, #0]
 8007620:	3b01      	subs	r3, #1
 8007622:	ee18 1a10 	vmov	r1, s16
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	220a      	movs	r2, #10
 800762a:	2300      	movs	r3, #0
 800762c:	4620      	mov	r0, r4
 800762e:	f000 fa41 	bl	8007ab4 <__multadd>
 8007632:	9b08      	ldr	r3, [sp, #32]
 8007634:	ee08 0a10 	vmov	s16, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 81b1 	beq.w	80079a0 <_dtoa_r+0xbc0>
 800763e:	2300      	movs	r3, #0
 8007640:	4639      	mov	r1, r7
 8007642:	220a      	movs	r2, #10
 8007644:	4620      	mov	r0, r4
 8007646:	f000 fa35 	bl	8007ab4 <__multadd>
 800764a:	9b02      	ldr	r3, [sp, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	4607      	mov	r7, r0
 8007650:	f300 808e 	bgt.w	8007770 <_dtoa_r+0x990>
 8007654:	9b06      	ldr	r3, [sp, #24]
 8007656:	2b02      	cmp	r3, #2
 8007658:	dc51      	bgt.n	80076fe <_dtoa_r+0x91e>
 800765a:	e089      	b.n	8007770 <_dtoa_r+0x990>
 800765c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800765e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007662:	e74b      	b.n	80074fc <_dtoa_r+0x71c>
 8007664:	9b03      	ldr	r3, [sp, #12]
 8007666:	1e5e      	subs	r6, r3, #1
 8007668:	9b07      	ldr	r3, [sp, #28]
 800766a:	42b3      	cmp	r3, r6
 800766c:	bfbf      	itttt	lt
 800766e:	9b07      	ldrlt	r3, [sp, #28]
 8007670:	9607      	strlt	r6, [sp, #28]
 8007672:	1af2      	sublt	r2, r6, r3
 8007674:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007676:	bfb6      	itet	lt
 8007678:	189b      	addlt	r3, r3, r2
 800767a:	1b9e      	subge	r6, r3, r6
 800767c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800767e:	9b03      	ldr	r3, [sp, #12]
 8007680:	bfb8      	it	lt
 8007682:	2600      	movlt	r6, #0
 8007684:	2b00      	cmp	r3, #0
 8007686:	bfb7      	itett	lt
 8007688:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800768c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007690:	1a9d      	sublt	r5, r3, r2
 8007692:	2300      	movlt	r3, #0
 8007694:	e734      	b.n	8007500 <_dtoa_r+0x720>
 8007696:	9e07      	ldr	r6, [sp, #28]
 8007698:	9d04      	ldr	r5, [sp, #16]
 800769a:	9f08      	ldr	r7, [sp, #32]
 800769c:	e73b      	b.n	8007516 <_dtoa_r+0x736>
 800769e:	9a07      	ldr	r2, [sp, #28]
 80076a0:	e767      	b.n	8007572 <_dtoa_r+0x792>
 80076a2:	9b06      	ldr	r3, [sp, #24]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	dc18      	bgt.n	80076da <_dtoa_r+0x8fa>
 80076a8:	f1ba 0f00 	cmp.w	sl, #0
 80076ac:	d115      	bne.n	80076da <_dtoa_r+0x8fa>
 80076ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076b2:	b993      	cbnz	r3, 80076da <_dtoa_r+0x8fa>
 80076b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80076b8:	0d1b      	lsrs	r3, r3, #20
 80076ba:	051b      	lsls	r3, r3, #20
 80076bc:	b183      	cbz	r3, 80076e0 <_dtoa_r+0x900>
 80076be:	9b04      	ldr	r3, [sp, #16]
 80076c0:	3301      	adds	r3, #1
 80076c2:	9304      	str	r3, [sp, #16]
 80076c4:	9b05      	ldr	r3, [sp, #20]
 80076c6:	3301      	adds	r3, #1
 80076c8:	9305      	str	r3, [sp, #20]
 80076ca:	f04f 0801 	mov.w	r8, #1
 80076ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f47f af6a 	bne.w	80075aa <_dtoa_r+0x7ca>
 80076d6:	2001      	movs	r0, #1
 80076d8:	e76f      	b.n	80075ba <_dtoa_r+0x7da>
 80076da:	f04f 0800 	mov.w	r8, #0
 80076de:	e7f6      	b.n	80076ce <_dtoa_r+0x8ee>
 80076e0:	4698      	mov	r8, r3
 80076e2:	e7f4      	b.n	80076ce <_dtoa_r+0x8ee>
 80076e4:	f43f af7d 	beq.w	80075e2 <_dtoa_r+0x802>
 80076e8:	4618      	mov	r0, r3
 80076ea:	301c      	adds	r0, #28
 80076ec:	e772      	b.n	80075d4 <_dtoa_r+0x7f4>
 80076ee:	9b03      	ldr	r3, [sp, #12]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	dc37      	bgt.n	8007764 <_dtoa_r+0x984>
 80076f4:	9b06      	ldr	r3, [sp, #24]
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	dd34      	ble.n	8007764 <_dtoa_r+0x984>
 80076fa:	9b03      	ldr	r3, [sp, #12]
 80076fc:	9302      	str	r3, [sp, #8]
 80076fe:	9b02      	ldr	r3, [sp, #8]
 8007700:	b96b      	cbnz	r3, 800771e <_dtoa_r+0x93e>
 8007702:	4631      	mov	r1, r6
 8007704:	2205      	movs	r2, #5
 8007706:	4620      	mov	r0, r4
 8007708:	f000 f9d4 	bl	8007ab4 <__multadd>
 800770c:	4601      	mov	r1, r0
 800770e:	4606      	mov	r6, r0
 8007710:	ee18 0a10 	vmov	r0, s16
 8007714:	f000 fbee 	bl	8007ef4 <__mcmp>
 8007718:	2800      	cmp	r0, #0
 800771a:	f73f adbb 	bgt.w	8007294 <_dtoa_r+0x4b4>
 800771e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007720:	9d01      	ldr	r5, [sp, #4]
 8007722:	43db      	mvns	r3, r3
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	f04f 0800 	mov.w	r8, #0
 800772a:	4631      	mov	r1, r6
 800772c:	4620      	mov	r0, r4
 800772e:	f000 f99f 	bl	8007a70 <_Bfree>
 8007732:	2f00      	cmp	r7, #0
 8007734:	f43f aea4 	beq.w	8007480 <_dtoa_r+0x6a0>
 8007738:	f1b8 0f00 	cmp.w	r8, #0
 800773c:	d005      	beq.n	800774a <_dtoa_r+0x96a>
 800773e:	45b8      	cmp	r8, r7
 8007740:	d003      	beq.n	800774a <_dtoa_r+0x96a>
 8007742:	4641      	mov	r1, r8
 8007744:	4620      	mov	r0, r4
 8007746:	f000 f993 	bl	8007a70 <_Bfree>
 800774a:	4639      	mov	r1, r7
 800774c:	4620      	mov	r0, r4
 800774e:	f000 f98f 	bl	8007a70 <_Bfree>
 8007752:	e695      	b.n	8007480 <_dtoa_r+0x6a0>
 8007754:	2600      	movs	r6, #0
 8007756:	4637      	mov	r7, r6
 8007758:	e7e1      	b.n	800771e <_dtoa_r+0x93e>
 800775a:	9700      	str	r7, [sp, #0]
 800775c:	4637      	mov	r7, r6
 800775e:	e599      	b.n	8007294 <_dtoa_r+0x4b4>
 8007760:	40240000 	.word	0x40240000
 8007764:	9b08      	ldr	r3, [sp, #32]
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 80ca 	beq.w	8007900 <_dtoa_r+0xb20>
 800776c:	9b03      	ldr	r3, [sp, #12]
 800776e:	9302      	str	r3, [sp, #8]
 8007770:	2d00      	cmp	r5, #0
 8007772:	dd05      	ble.n	8007780 <_dtoa_r+0x9a0>
 8007774:	4639      	mov	r1, r7
 8007776:	462a      	mov	r2, r5
 8007778:	4620      	mov	r0, r4
 800777a:	f000 fb4b 	bl	8007e14 <__lshift>
 800777e:	4607      	mov	r7, r0
 8007780:	f1b8 0f00 	cmp.w	r8, #0
 8007784:	d05b      	beq.n	800783e <_dtoa_r+0xa5e>
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	4620      	mov	r0, r4
 800778a:	f000 f931 	bl	80079f0 <_Balloc>
 800778e:	4605      	mov	r5, r0
 8007790:	b928      	cbnz	r0, 800779e <_dtoa_r+0x9be>
 8007792:	4b87      	ldr	r3, [pc, #540]	; (80079b0 <_dtoa_r+0xbd0>)
 8007794:	4602      	mov	r2, r0
 8007796:	f240 21ea 	movw	r1, #746	; 0x2ea
 800779a:	f7ff bb3b 	b.w	8006e14 <_dtoa_r+0x34>
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	3202      	adds	r2, #2
 80077a2:	0092      	lsls	r2, r2, #2
 80077a4:	f107 010c 	add.w	r1, r7, #12
 80077a8:	300c      	adds	r0, #12
 80077aa:	f000 f913 	bl	80079d4 <memcpy>
 80077ae:	2201      	movs	r2, #1
 80077b0:	4629      	mov	r1, r5
 80077b2:	4620      	mov	r0, r4
 80077b4:	f000 fb2e 	bl	8007e14 <__lshift>
 80077b8:	9b01      	ldr	r3, [sp, #4]
 80077ba:	f103 0901 	add.w	r9, r3, #1
 80077be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80077c2:	4413      	add	r3, r2
 80077c4:	9305      	str	r3, [sp, #20]
 80077c6:	f00a 0301 	and.w	r3, sl, #1
 80077ca:	46b8      	mov	r8, r7
 80077cc:	9304      	str	r3, [sp, #16]
 80077ce:	4607      	mov	r7, r0
 80077d0:	4631      	mov	r1, r6
 80077d2:	ee18 0a10 	vmov	r0, s16
 80077d6:	f7ff fa77 	bl	8006cc8 <quorem>
 80077da:	4641      	mov	r1, r8
 80077dc:	9002      	str	r0, [sp, #8]
 80077de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80077e2:	ee18 0a10 	vmov	r0, s16
 80077e6:	f000 fb85 	bl	8007ef4 <__mcmp>
 80077ea:	463a      	mov	r2, r7
 80077ec:	9003      	str	r0, [sp, #12]
 80077ee:	4631      	mov	r1, r6
 80077f0:	4620      	mov	r0, r4
 80077f2:	f000 fb9b 	bl	8007f2c <__mdiff>
 80077f6:	68c2      	ldr	r2, [r0, #12]
 80077f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80077fc:	4605      	mov	r5, r0
 80077fe:	bb02      	cbnz	r2, 8007842 <_dtoa_r+0xa62>
 8007800:	4601      	mov	r1, r0
 8007802:	ee18 0a10 	vmov	r0, s16
 8007806:	f000 fb75 	bl	8007ef4 <__mcmp>
 800780a:	4602      	mov	r2, r0
 800780c:	4629      	mov	r1, r5
 800780e:	4620      	mov	r0, r4
 8007810:	9207      	str	r2, [sp, #28]
 8007812:	f000 f92d 	bl	8007a70 <_Bfree>
 8007816:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800781a:	ea43 0102 	orr.w	r1, r3, r2
 800781e:	9b04      	ldr	r3, [sp, #16]
 8007820:	430b      	orrs	r3, r1
 8007822:	464d      	mov	r5, r9
 8007824:	d10f      	bne.n	8007846 <_dtoa_r+0xa66>
 8007826:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800782a:	d02a      	beq.n	8007882 <_dtoa_r+0xaa2>
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	dd02      	ble.n	8007838 <_dtoa_r+0xa58>
 8007832:	9b02      	ldr	r3, [sp, #8]
 8007834:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007838:	f88b a000 	strb.w	sl, [fp]
 800783c:	e775      	b.n	800772a <_dtoa_r+0x94a>
 800783e:	4638      	mov	r0, r7
 8007840:	e7ba      	b.n	80077b8 <_dtoa_r+0x9d8>
 8007842:	2201      	movs	r2, #1
 8007844:	e7e2      	b.n	800780c <_dtoa_r+0xa2c>
 8007846:	9b03      	ldr	r3, [sp, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	db04      	blt.n	8007856 <_dtoa_r+0xa76>
 800784c:	9906      	ldr	r1, [sp, #24]
 800784e:	430b      	orrs	r3, r1
 8007850:	9904      	ldr	r1, [sp, #16]
 8007852:	430b      	orrs	r3, r1
 8007854:	d122      	bne.n	800789c <_dtoa_r+0xabc>
 8007856:	2a00      	cmp	r2, #0
 8007858:	ddee      	ble.n	8007838 <_dtoa_r+0xa58>
 800785a:	ee18 1a10 	vmov	r1, s16
 800785e:	2201      	movs	r2, #1
 8007860:	4620      	mov	r0, r4
 8007862:	f000 fad7 	bl	8007e14 <__lshift>
 8007866:	4631      	mov	r1, r6
 8007868:	ee08 0a10 	vmov	s16, r0
 800786c:	f000 fb42 	bl	8007ef4 <__mcmp>
 8007870:	2800      	cmp	r0, #0
 8007872:	dc03      	bgt.n	800787c <_dtoa_r+0xa9c>
 8007874:	d1e0      	bne.n	8007838 <_dtoa_r+0xa58>
 8007876:	f01a 0f01 	tst.w	sl, #1
 800787a:	d0dd      	beq.n	8007838 <_dtoa_r+0xa58>
 800787c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007880:	d1d7      	bne.n	8007832 <_dtoa_r+0xa52>
 8007882:	2339      	movs	r3, #57	; 0x39
 8007884:	f88b 3000 	strb.w	r3, [fp]
 8007888:	462b      	mov	r3, r5
 800788a:	461d      	mov	r5, r3
 800788c:	3b01      	subs	r3, #1
 800788e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007892:	2a39      	cmp	r2, #57	; 0x39
 8007894:	d071      	beq.n	800797a <_dtoa_r+0xb9a>
 8007896:	3201      	adds	r2, #1
 8007898:	701a      	strb	r2, [r3, #0]
 800789a:	e746      	b.n	800772a <_dtoa_r+0x94a>
 800789c:	2a00      	cmp	r2, #0
 800789e:	dd07      	ble.n	80078b0 <_dtoa_r+0xad0>
 80078a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80078a4:	d0ed      	beq.n	8007882 <_dtoa_r+0xaa2>
 80078a6:	f10a 0301 	add.w	r3, sl, #1
 80078aa:	f88b 3000 	strb.w	r3, [fp]
 80078ae:	e73c      	b.n	800772a <_dtoa_r+0x94a>
 80078b0:	9b05      	ldr	r3, [sp, #20]
 80078b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80078b6:	4599      	cmp	r9, r3
 80078b8:	d047      	beq.n	800794a <_dtoa_r+0xb6a>
 80078ba:	ee18 1a10 	vmov	r1, s16
 80078be:	2300      	movs	r3, #0
 80078c0:	220a      	movs	r2, #10
 80078c2:	4620      	mov	r0, r4
 80078c4:	f000 f8f6 	bl	8007ab4 <__multadd>
 80078c8:	45b8      	cmp	r8, r7
 80078ca:	ee08 0a10 	vmov	s16, r0
 80078ce:	f04f 0300 	mov.w	r3, #0
 80078d2:	f04f 020a 	mov.w	r2, #10
 80078d6:	4641      	mov	r1, r8
 80078d8:	4620      	mov	r0, r4
 80078da:	d106      	bne.n	80078ea <_dtoa_r+0xb0a>
 80078dc:	f000 f8ea 	bl	8007ab4 <__multadd>
 80078e0:	4680      	mov	r8, r0
 80078e2:	4607      	mov	r7, r0
 80078e4:	f109 0901 	add.w	r9, r9, #1
 80078e8:	e772      	b.n	80077d0 <_dtoa_r+0x9f0>
 80078ea:	f000 f8e3 	bl	8007ab4 <__multadd>
 80078ee:	4639      	mov	r1, r7
 80078f0:	4680      	mov	r8, r0
 80078f2:	2300      	movs	r3, #0
 80078f4:	220a      	movs	r2, #10
 80078f6:	4620      	mov	r0, r4
 80078f8:	f000 f8dc 	bl	8007ab4 <__multadd>
 80078fc:	4607      	mov	r7, r0
 80078fe:	e7f1      	b.n	80078e4 <_dtoa_r+0xb04>
 8007900:	9b03      	ldr	r3, [sp, #12]
 8007902:	9302      	str	r3, [sp, #8]
 8007904:	9d01      	ldr	r5, [sp, #4]
 8007906:	ee18 0a10 	vmov	r0, s16
 800790a:	4631      	mov	r1, r6
 800790c:	f7ff f9dc 	bl	8006cc8 <quorem>
 8007910:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007914:	9b01      	ldr	r3, [sp, #4]
 8007916:	f805 ab01 	strb.w	sl, [r5], #1
 800791a:	1aea      	subs	r2, r5, r3
 800791c:	9b02      	ldr	r3, [sp, #8]
 800791e:	4293      	cmp	r3, r2
 8007920:	dd09      	ble.n	8007936 <_dtoa_r+0xb56>
 8007922:	ee18 1a10 	vmov	r1, s16
 8007926:	2300      	movs	r3, #0
 8007928:	220a      	movs	r2, #10
 800792a:	4620      	mov	r0, r4
 800792c:	f000 f8c2 	bl	8007ab4 <__multadd>
 8007930:	ee08 0a10 	vmov	s16, r0
 8007934:	e7e7      	b.n	8007906 <_dtoa_r+0xb26>
 8007936:	9b02      	ldr	r3, [sp, #8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	bfc8      	it	gt
 800793c:	461d      	movgt	r5, r3
 800793e:	9b01      	ldr	r3, [sp, #4]
 8007940:	bfd8      	it	le
 8007942:	2501      	movle	r5, #1
 8007944:	441d      	add	r5, r3
 8007946:	f04f 0800 	mov.w	r8, #0
 800794a:	ee18 1a10 	vmov	r1, s16
 800794e:	2201      	movs	r2, #1
 8007950:	4620      	mov	r0, r4
 8007952:	f000 fa5f 	bl	8007e14 <__lshift>
 8007956:	4631      	mov	r1, r6
 8007958:	ee08 0a10 	vmov	s16, r0
 800795c:	f000 faca 	bl	8007ef4 <__mcmp>
 8007960:	2800      	cmp	r0, #0
 8007962:	dc91      	bgt.n	8007888 <_dtoa_r+0xaa8>
 8007964:	d102      	bne.n	800796c <_dtoa_r+0xb8c>
 8007966:	f01a 0f01 	tst.w	sl, #1
 800796a:	d18d      	bne.n	8007888 <_dtoa_r+0xaa8>
 800796c:	462b      	mov	r3, r5
 800796e:	461d      	mov	r5, r3
 8007970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007974:	2a30      	cmp	r2, #48	; 0x30
 8007976:	d0fa      	beq.n	800796e <_dtoa_r+0xb8e>
 8007978:	e6d7      	b.n	800772a <_dtoa_r+0x94a>
 800797a:	9a01      	ldr	r2, [sp, #4]
 800797c:	429a      	cmp	r2, r3
 800797e:	d184      	bne.n	800788a <_dtoa_r+0xaaa>
 8007980:	9b00      	ldr	r3, [sp, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	2331      	movs	r3, #49	; 0x31
 8007988:	7013      	strb	r3, [r2, #0]
 800798a:	e6ce      	b.n	800772a <_dtoa_r+0x94a>
 800798c:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <_dtoa_r+0xbd4>)
 800798e:	f7ff ba95 	b.w	8006ebc <_dtoa_r+0xdc>
 8007992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007994:	2b00      	cmp	r3, #0
 8007996:	f47f aa6e 	bne.w	8006e76 <_dtoa_r+0x96>
 800799a:	4b07      	ldr	r3, [pc, #28]	; (80079b8 <_dtoa_r+0xbd8>)
 800799c:	f7ff ba8e 	b.w	8006ebc <_dtoa_r+0xdc>
 80079a0:	9b02      	ldr	r3, [sp, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	dcae      	bgt.n	8007904 <_dtoa_r+0xb24>
 80079a6:	9b06      	ldr	r3, [sp, #24]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	f73f aea8 	bgt.w	80076fe <_dtoa_r+0x91e>
 80079ae:	e7a9      	b.n	8007904 <_dtoa_r+0xb24>
 80079b0:	0800929b 	.word	0x0800929b
 80079b4:	080091f8 	.word	0x080091f8
 80079b8:	0800921c 	.word	0x0800921c

080079bc <_localeconv_r>:
 80079bc:	4800      	ldr	r0, [pc, #0]	; (80079c0 <_localeconv_r+0x4>)
 80079be:	4770      	bx	lr
 80079c0:	200001c8 	.word	0x200001c8

080079c4 <malloc>:
 80079c4:	4b02      	ldr	r3, [pc, #8]	; (80079d0 <malloc+0xc>)
 80079c6:	4601      	mov	r1, r0
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	f000 bc17 	b.w	80081fc <_malloc_r>
 80079ce:	bf00      	nop
 80079d0:	20000074 	.word	0x20000074

080079d4 <memcpy>:
 80079d4:	440a      	add	r2, r1
 80079d6:	4291      	cmp	r1, r2
 80079d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80079dc:	d100      	bne.n	80079e0 <memcpy+0xc>
 80079de:	4770      	bx	lr
 80079e0:	b510      	push	{r4, lr}
 80079e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ea:	4291      	cmp	r1, r2
 80079ec:	d1f9      	bne.n	80079e2 <memcpy+0xe>
 80079ee:	bd10      	pop	{r4, pc}

080079f0 <_Balloc>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079f4:	4604      	mov	r4, r0
 80079f6:	460d      	mov	r5, r1
 80079f8:	b976      	cbnz	r6, 8007a18 <_Balloc+0x28>
 80079fa:	2010      	movs	r0, #16
 80079fc:	f7ff ffe2 	bl	80079c4 <malloc>
 8007a00:	4602      	mov	r2, r0
 8007a02:	6260      	str	r0, [r4, #36]	; 0x24
 8007a04:	b920      	cbnz	r0, 8007a10 <_Balloc+0x20>
 8007a06:	4b18      	ldr	r3, [pc, #96]	; (8007a68 <_Balloc+0x78>)
 8007a08:	4818      	ldr	r0, [pc, #96]	; (8007a6c <_Balloc+0x7c>)
 8007a0a:	2166      	movs	r1, #102	; 0x66
 8007a0c:	f000 fdd6 	bl	80085bc <__assert_func>
 8007a10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a14:	6006      	str	r6, [r0, #0]
 8007a16:	60c6      	str	r6, [r0, #12]
 8007a18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a1a:	68f3      	ldr	r3, [r6, #12]
 8007a1c:	b183      	cbz	r3, 8007a40 <_Balloc+0x50>
 8007a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a26:	b9b8      	cbnz	r0, 8007a58 <_Balloc+0x68>
 8007a28:	2101      	movs	r1, #1
 8007a2a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a2e:	1d72      	adds	r2, r6, #5
 8007a30:	0092      	lsls	r2, r2, #2
 8007a32:	4620      	mov	r0, r4
 8007a34:	f000 fb60 	bl	80080f8 <_calloc_r>
 8007a38:	b160      	cbz	r0, 8007a54 <_Balloc+0x64>
 8007a3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a3e:	e00e      	b.n	8007a5e <_Balloc+0x6e>
 8007a40:	2221      	movs	r2, #33	; 0x21
 8007a42:	2104      	movs	r1, #4
 8007a44:	4620      	mov	r0, r4
 8007a46:	f000 fb57 	bl	80080f8 <_calloc_r>
 8007a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a4c:	60f0      	str	r0, [r6, #12]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e4      	bne.n	8007a1e <_Balloc+0x2e>
 8007a54:	2000      	movs	r0, #0
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	6802      	ldr	r2, [r0, #0]
 8007a5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a64:	e7f7      	b.n	8007a56 <_Balloc+0x66>
 8007a66:	bf00      	nop
 8007a68:	08009229 	.word	0x08009229
 8007a6c:	080092ac 	.word	0x080092ac

08007a70 <_Bfree>:
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a74:	4605      	mov	r5, r0
 8007a76:	460c      	mov	r4, r1
 8007a78:	b976      	cbnz	r6, 8007a98 <_Bfree+0x28>
 8007a7a:	2010      	movs	r0, #16
 8007a7c:	f7ff ffa2 	bl	80079c4 <malloc>
 8007a80:	4602      	mov	r2, r0
 8007a82:	6268      	str	r0, [r5, #36]	; 0x24
 8007a84:	b920      	cbnz	r0, 8007a90 <_Bfree+0x20>
 8007a86:	4b09      	ldr	r3, [pc, #36]	; (8007aac <_Bfree+0x3c>)
 8007a88:	4809      	ldr	r0, [pc, #36]	; (8007ab0 <_Bfree+0x40>)
 8007a8a:	218a      	movs	r1, #138	; 0x8a
 8007a8c:	f000 fd96 	bl	80085bc <__assert_func>
 8007a90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a94:	6006      	str	r6, [r0, #0]
 8007a96:	60c6      	str	r6, [r0, #12]
 8007a98:	b13c      	cbz	r4, 8007aaa <_Bfree+0x3a>
 8007a9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a9c:	6862      	ldr	r2, [r4, #4]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007aa4:	6021      	str	r1, [r4, #0]
 8007aa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007aaa:	bd70      	pop	{r4, r5, r6, pc}
 8007aac:	08009229 	.word	0x08009229
 8007ab0:	080092ac 	.word	0x080092ac

08007ab4 <__multadd>:
 8007ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab8:	690d      	ldr	r5, [r1, #16]
 8007aba:	4607      	mov	r7, r0
 8007abc:	460c      	mov	r4, r1
 8007abe:	461e      	mov	r6, r3
 8007ac0:	f101 0c14 	add.w	ip, r1, #20
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	f8dc 3000 	ldr.w	r3, [ip]
 8007aca:	b299      	uxth	r1, r3
 8007acc:	fb02 6101 	mla	r1, r2, r1, r6
 8007ad0:	0c1e      	lsrs	r6, r3, #16
 8007ad2:	0c0b      	lsrs	r3, r1, #16
 8007ad4:	fb02 3306 	mla	r3, r2, r6, r3
 8007ad8:	b289      	uxth	r1, r1
 8007ada:	3001      	adds	r0, #1
 8007adc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ae0:	4285      	cmp	r5, r0
 8007ae2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ae6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007aea:	dcec      	bgt.n	8007ac6 <__multadd+0x12>
 8007aec:	b30e      	cbz	r6, 8007b32 <__multadd+0x7e>
 8007aee:	68a3      	ldr	r3, [r4, #8]
 8007af0:	42ab      	cmp	r3, r5
 8007af2:	dc19      	bgt.n	8007b28 <__multadd+0x74>
 8007af4:	6861      	ldr	r1, [r4, #4]
 8007af6:	4638      	mov	r0, r7
 8007af8:	3101      	adds	r1, #1
 8007afa:	f7ff ff79 	bl	80079f0 <_Balloc>
 8007afe:	4680      	mov	r8, r0
 8007b00:	b928      	cbnz	r0, 8007b0e <__multadd+0x5a>
 8007b02:	4602      	mov	r2, r0
 8007b04:	4b0c      	ldr	r3, [pc, #48]	; (8007b38 <__multadd+0x84>)
 8007b06:	480d      	ldr	r0, [pc, #52]	; (8007b3c <__multadd+0x88>)
 8007b08:	21b5      	movs	r1, #181	; 0xb5
 8007b0a:	f000 fd57 	bl	80085bc <__assert_func>
 8007b0e:	6922      	ldr	r2, [r4, #16]
 8007b10:	3202      	adds	r2, #2
 8007b12:	f104 010c 	add.w	r1, r4, #12
 8007b16:	0092      	lsls	r2, r2, #2
 8007b18:	300c      	adds	r0, #12
 8007b1a:	f7ff ff5b 	bl	80079d4 <memcpy>
 8007b1e:	4621      	mov	r1, r4
 8007b20:	4638      	mov	r0, r7
 8007b22:	f7ff ffa5 	bl	8007a70 <_Bfree>
 8007b26:	4644      	mov	r4, r8
 8007b28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b2c:	3501      	adds	r5, #1
 8007b2e:	615e      	str	r6, [r3, #20]
 8007b30:	6125      	str	r5, [r4, #16]
 8007b32:	4620      	mov	r0, r4
 8007b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b38:	0800929b 	.word	0x0800929b
 8007b3c:	080092ac 	.word	0x080092ac

08007b40 <__hi0bits>:
 8007b40:	0c03      	lsrs	r3, r0, #16
 8007b42:	041b      	lsls	r3, r3, #16
 8007b44:	b9d3      	cbnz	r3, 8007b7c <__hi0bits+0x3c>
 8007b46:	0400      	lsls	r0, r0, #16
 8007b48:	2310      	movs	r3, #16
 8007b4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b4e:	bf04      	itt	eq
 8007b50:	0200      	lsleq	r0, r0, #8
 8007b52:	3308      	addeq	r3, #8
 8007b54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b58:	bf04      	itt	eq
 8007b5a:	0100      	lsleq	r0, r0, #4
 8007b5c:	3304      	addeq	r3, #4
 8007b5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b62:	bf04      	itt	eq
 8007b64:	0080      	lsleq	r0, r0, #2
 8007b66:	3302      	addeq	r3, #2
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	db05      	blt.n	8007b78 <__hi0bits+0x38>
 8007b6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b70:	f103 0301 	add.w	r3, r3, #1
 8007b74:	bf08      	it	eq
 8007b76:	2320      	moveq	r3, #32
 8007b78:	4618      	mov	r0, r3
 8007b7a:	4770      	bx	lr
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	e7e4      	b.n	8007b4a <__hi0bits+0xa>

08007b80 <__lo0bits>:
 8007b80:	6803      	ldr	r3, [r0, #0]
 8007b82:	f013 0207 	ands.w	r2, r3, #7
 8007b86:	4601      	mov	r1, r0
 8007b88:	d00b      	beq.n	8007ba2 <__lo0bits+0x22>
 8007b8a:	07da      	lsls	r2, r3, #31
 8007b8c:	d423      	bmi.n	8007bd6 <__lo0bits+0x56>
 8007b8e:	0798      	lsls	r0, r3, #30
 8007b90:	bf49      	itett	mi
 8007b92:	085b      	lsrmi	r3, r3, #1
 8007b94:	089b      	lsrpl	r3, r3, #2
 8007b96:	2001      	movmi	r0, #1
 8007b98:	600b      	strmi	r3, [r1, #0]
 8007b9a:	bf5c      	itt	pl
 8007b9c:	600b      	strpl	r3, [r1, #0]
 8007b9e:	2002      	movpl	r0, #2
 8007ba0:	4770      	bx	lr
 8007ba2:	b298      	uxth	r0, r3
 8007ba4:	b9a8      	cbnz	r0, 8007bd2 <__lo0bits+0x52>
 8007ba6:	0c1b      	lsrs	r3, r3, #16
 8007ba8:	2010      	movs	r0, #16
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	b90a      	cbnz	r2, 8007bb2 <__lo0bits+0x32>
 8007bae:	3008      	adds	r0, #8
 8007bb0:	0a1b      	lsrs	r3, r3, #8
 8007bb2:	071a      	lsls	r2, r3, #28
 8007bb4:	bf04      	itt	eq
 8007bb6:	091b      	lsreq	r3, r3, #4
 8007bb8:	3004      	addeq	r0, #4
 8007bba:	079a      	lsls	r2, r3, #30
 8007bbc:	bf04      	itt	eq
 8007bbe:	089b      	lsreq	r3, r3, #2
 8007bc0:	3002      	addeq	r0, #2
 8007bc2:	07da      	lsls	r2, r3, #31
 8007bc4:	d403      	bmi.n	8007bce <__lo0bits+0x4e>
 8007bc6:	085b      	lsrs	r3, r3, #1
 8007bc8:	f100 0001 	add.w	r0, r0, #1
 8007bcc:	d005      	beq.n	8007bda <__lo0bits+0x5a>
 8007bce:	600b      	str	r3, [r1, #0]
 8007bd0:	4770      	bx	lr
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	e7e9      	b.n	8007baa <__lo0bits+0x2a>
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	4770      	bx	lr
 8007bda:	2020      	movs	r0, #32
 8007bdc:	4770      	bx	lr
	...

08007be0 <__i2b>:
 8007be0:	b510      	push	{r4, lr}
 8007be2:	460c      	mov	r4, r1
 8007be4:	2101      	movs	r1, #1
 8007be6:	f7ff ff03 	bl	80079f0 <_Balloc>
 8007bea:	4602      	mov	r2, r0
 8007bec:	b928      	cbnz	r0, 8007bfa <__i2b+0x1a>
 8007bee:	4b05      	ldr	r3, [pc, #20]	; (8007c04 <__i2b+0x24>)
 8007bf0:	4805      	ldr	r0, [pc, #20]	; (8007c08 <__i2b+0x28>)
 8007bf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007bf6:	f000 fce1 	bl	80085bc <__assert_func>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	6144      	str	r4, [r0, #20]
 8007bfe:	6103      	str	r3, [r0, #16]
 8007c00:	bd10      	pop	{r4, pc}
 8007c02:	bf00      	nop
 8007c04:	0800929b 	.word	0x0800929b
 8007c08:	080092ac 	.word	0x080092ac

08007c0c <__multiply>:
 8007c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c10:	4691      	mov	r9, r2
 8007c12:	690a      	ldr	r2, [r1, #16]
 8007c14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	bfb8      	it	lt
 8007c1c:	460b      	movlt	r3, r1
 8007c1e:	460c      	mov	r4, r1
 8007c20:	bfbc      	itt	lt
 8007c22:	464c      	movlt	r4, r9
 8007c24:	4699      	movlt	r9, r3
 8007c26:	6927      	ldr	r7, [r4, #16]
 8007c28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c2c:	68a3      	ldr	r3, [r4, #8]
 8007c2e:	6861      	ldr	r1, [r4, #4]
 8007c30:	eb07 060a 	add.w	r6, r7, sl
 8007c34:	42b3      	cmp	r3, r6
 8007c36:	b085      	sub	sp, #20
 8007c38:	bfb8      	it	lt
 8007c3a:	3101      	addlt	r1, #1
 8007c3c:	f7ff fed8 	bl	80079f0 <_Balloc>
 8007c40:	b930      	cbnz	r0, 8007c50 <__multiply+0x44>
 8007c42:	4602      	mov	r2, r0
 8007c44:	4b44      	ldr	r3, [pc, #272]	; (8007d58 <__multiply+0x14c>)
 8007c46:	4845      	ldr	r0, [pc, #276]	; (8007d5c <__multiply+0x150>)
 8007c48:	f240 115d 	movw	r1, #349	; 0x15d
 8007c4c:	f000 fcb6 	bl	80085bc <__assert_func>
 8007c50:	f100 0514 	add.w	r5, r0, #20
 8007c54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c58:	462b      	mov	r3, r5
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	4543      	cmp	r3, r8
 8007c5e:	d321      	bcc.n	8007ca4 <__multiply+0x98>
 8007c60:	f104 0314 	add.w	r3, r4, #20
 8007c64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c68:	f109 0314 	add.w	r3, r9, #20
 8007c6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007c70:	9202      	str	r2, [sp, #8]
 8007c72:	1b3a      	subs	r2, r7, r4
 8007c74:	3a15      	subs	r2, #21
 8007c76:	f022 0203 	bic.w	r2, r2, #3
 8007c7a:	3204      	adds	r2, #4
 8007c7c:	f104 0115 	add.w	r1, r4, #21
 8007c80:	428f      	cmp	r7, r1
 8007c82:	bf38      	it	cc
 8007c84:	2204      	movcc	r2, #4
 8007c86:	9201      	str	r2, [sp, #4]
 8007c88:	9a02      	ldr	r2, [sp, #8]
 8007c8a:	9303      	str	r3, [sp, #12]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d80c      	bhi.n	8007caa <__multiply+0x9e>
 8007c90:	2e00      	cmp	r6, #0
 8007c92:	dd03      	ble.n	8007c9c <__multiply+0x90>
 8007c94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d05a      	beq.n	8007d52 <__multiply+0x146>
 8007c9c:	6106      	str	r6, [r0, #16]
 8007c9e:	b005      	add	sp, #20
 8007ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca4:	f843 2b04 	str.w	r2, [r3], #4
 8007ca8:	e7d8      	b.n	8007c5c <__multiply+0x50>
 8007caa:	f8b3 a000 	ldrh.w	sl, [r3]
 8007cae:	f1ba 0f00 	cmp.w	sl, #0
 8007cb2:	d024      	beq.n	8007cfe <__multiply+0xf2>
 8007cb4:	f104 0e14 	add.w	lr, r4, #20
 8007cb8:	46a9      	mov	r9, r5
 8007cba:	f04f 0c00 	mov.w	ip, #0
 8007cbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007cc2:	f8d9 1000 	ldr.w	r1, [r9]
 8007cc6:	fa1f fb82 	uxth.w	fp, r2
 8007cca:	b289      	uxth	r1, r1
 8007ccc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007cd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007cd4:	f8d9 2000 	ldr.w	r2, [r9]
 8007cd8:	4461      	add	r1, ip
 8007cda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007cde:	fb0a c20b 	mla	r2, sl, fp, ip
 8007ce2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007ce6:	b289      	uxth	r1, r1
 8007ce8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007cec:	4577      	cmp	r7, lr
 8007cee:	f849 1b04 	str.w	r1, [r9], #4
 8007cf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007cf6:	d8e2      	bhi.n	8007cbe <__multiply+0xb2>
 8007cf8:	9a01      	ldr	r2, [sp, #4]
 8007cfa:	f845 c002 	str.w	ip, [r5, r2]
 8007cfe:	9a03      	ldr	r2, [sp, #12]
 8007d00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d04:	3304      	adds	r3, #4
 8007d06:	f1b9 0f00 	cmp.w	r9, #0
 8007d0a:	d020      	beq.n	8007d4e <__multiply+0x142>
 8007d0c:	6829      	ldr	r1, [r5, #0]
 8007d0e:	f104 0c14 	add.w	ip, r4, #20
 8007d12:	46ae      	mov	lr, r5
 8007d14:	f04f 0a00 	mov.w	sl, #0
 8007d18:	f8bc b000 	ldrh.w	fp, [ip]
 8007d1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d20:	fb09 220b 	mla	r2, r9, fp, r2
 8007d24:	4492      	add	sl, r2
 8007d26:	b289      	uxth	r1, r1
 8007d28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007d2c:	f84e 1b04 	str.w	r1, [lr], #4
 8007d30:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d34:	f8be 1000 	ldrh.w	r1, [lr]
 8007d38:	0c12      	lsrs	r2, r2, #16
 8007d3a:	fb09 1102 	mla	r1, r9, r2, r1
 8007d3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007d42:	4567      	cmp	r7, ip
 8007d44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d48:	d8e6      	bhi.n	8007d18 <__multiply+0x10c>
 8007d4a:	9a01      	ldr	r2, [sp, #4]
 8007d4c:	50a9      	str	r1, [r5, r2]
 8007d4e:	3504      	adds	r5, #4
 8007d50:	e79a      	b.n	8007c88 <__multiply+0x7c>
 8007d52:	3e01      	subs	r6, #1
 8007d54:	e79c      	b.n	8007c90 <__multiply+0x84>
 8007d56:	bf00      	nop
 8007d58:	0800929b 	.word	0x0800929b
 8007d5c:	080092ac 	.word	0x080092ac

08007d60 <__pow5mult>:
 8007d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d64:	4615      	mov	r5, r2
 8007d66:	f012 0203 	ands.w	r2, r2, #3
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	460f      	mov	r7, r1
 8007d6e:	d007      	beq.n	8007d80 <__pow5mult+0x20>
 8007d70:	4c25      	ldr	r4, [pc, #148]	; (8007e08 <__pow5mult+0xa8>)
 8007d72:	3a01      	subs	r2, #1
 8007d74:	2300      	movs	r3, #0
 8007d76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d7a:	f7ff fe9b 	bl	8007ab4 <__multadd>
 8007d7e:	4607      	mov	r7, r0
 8007d80:	10ad      	asrs	r5, r5, #2
 8007d82:	d03d      	beq.n	8007e00 <__pow5mult+0xa0>
 8007d84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d86:	b97c      	cbnz	r4, 8007da8 <__pow5mult+0x48>
 8007d88:	2010      	movs	r0, #16
 8007d8a:	f7ff fe1b 	bl	80079c4 <malloc>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	6270      	str	r0, [r6, #36]	; 0x24
 8007d92:	b928      	cbnz	r0, 8007da0 <__pow5mult+0x40>
 8007d94:	4b1d      	ldr	r3, [pc, #116]	; (8007e0c <__pow5mult+0xac>)
 8007d96:	481e      	ldr	r0, [pc, #120]	; (8007e10 <__pow5mult+0xb0>)
 8007d98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d9c:	f000 fc0e 	bl	80085bc <__assert_func>
 8007da0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007da4:	6004      	str	r4, [r0, #0]
 8007da6:	60c4      	str	r4, [r0, #12]
 8007da8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007dac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007db0:	b94c      	cbnz	r4, 8007dc6 <__pow5mult+0x66>
 8007db2:	f240 2171 	movw	r1, #625	; 0x271
 8007db6:	4630      	mov	r0, r6
 8007db8:	f7ff ff12 	bl	8007be0 <__i2b>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	6003      	str	r3, [r0, #0]
 8007dc6:	f04f 0900 	mov.w	r9, #0
 8007dca:	07eb      	lsls	r3, r5, #31
 8007dcc:	d50a      	bpl.n	8007de4 <__pow5mult+0x84>
 8007dce:	4639      	mov	r1, r7
 8007dd0:	4622      	mov	r2, r4
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	f7ff ff1a 	bl	8007c0c <__multiply>
 8007dd8:	4639      	mov	r1, r7
 8007dda:	4680      	mov	r8, r0
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f7ff fe47 	bl	8007a70 <_Bfree>
 8007de2:	4647      	mov	r7, r8
 8007de4:	106d      	asrs	r5, r5, #1
 8007de6:	d00b      	beq.n	8007e00 <__pow5mult+0xa0>
 8007de8:	6820      	ldr	r0, [r4, #0]
 8007dea:	b938      	cbnz	r0, 8007dfc <__pow5mult+0x9c>
 8007dec:	4622      	mov	r2, r4
 8007dee:	4621      	mov	r1, r4
 8007df0:	4630      	mov	r0, r6
 8007df2:	f7ff ff0b 	bl	8007c0c <__multiply>
 8007df6:	6020      	str	r0, [r4, #0]
 8007df8:	f8c0 9000 	str.w	r9, [r0]
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	e7e4      	b.n	8007dca <__pow5mult+0x6a>
 8007e00:	4638      	mov	r0, r7
 8007e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e06:	bf00      	nop
 8007e08:	080093f8 	.word	0x080093f8
 8007e0c:	08009229 	.word	0x08009229
 8007e10:	080092ac 	.word	0x080092ac

08007e14 <__lshift>:
 8007e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e18:	460c      	mov	r4, r1
 8007e1a:	6849      	ldr	r1, [r1, #4]
 8007e1c:	6923      	ldr	r3, [r4, #16]
 8007e1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e22:	68a3      	ldr	r3, [r4, #8]
 8007e24:	4607      	mov	r7, r0
 8007e26:	4691      	mov	r9, r2
 8007e28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e2c:	f108 0601 	add.w	r6, r8, #1
 8007e30:	42b3      	cmp	r3, r6
 8007e32:	db0b      	blt.n	8007e4c <__lshift+0x38>
 8007e34:	4638      	mov	r0, r7
 8007e36:	f7ff fddb 	bl	80079f0 <_Balloc>
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	b948      	cbnz	r0, 8007e52 <__lshift+0x3e>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	4b2a      	ldr	r3, [pc, #168]	; (8007eec <__lshift+0xd8>)
 8007e42:	482b      	ldr	r0, [pc, #172]	; (8007ef0 <__lshift+0xdc>)
 8007e44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e48:	f000 fbb8 	bl	80085bc <__assert_func>
 8007e4c:	3101      	adds	r1, #1
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	e7ee      	b.n	8007e30 <__lshift+0x1c>
 8007e52:	2300      	movs	r3, #0
 8007e54:	f100 0114 	add.w	r1, r0, #20
 8007e58:	f100 0210 	add.w	r2, r0, #16
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	4553      	cmp	r3, sl
 8007e60:	db37      	blt.n	8007ed2 <__lshift+0xbe>
 8007e62:	6920      	ldr	r0, [r4, #16]
 8007e64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e68:	f104 0314 	add.w	r3, r4, #20
 8007e6c:	f019 091f 	ands.w	r9, r9, #31
 8007e70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007e78:	d02f      	beq.n	8007eda <__lshift+0xc6>
 8007e7a:	f1c9 0e20 	rsb	lr, r9, #32
 8007e7e:	468a      	mov	sl, r1
 8007e80:	f04f 0c00 	mov.w	ip, #0
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	fa02 f209 	lsl.w	r2, r2, r9
 8007e8a:	ea42 020c 	orr.w	r2, r2, ip
 8007e8e:	f84a 2b04 	str.w	r2, [sl], #4
 8007e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e96:	4298      	cmp	r0, r3
 8007e98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007e9c:	d8f2      	bhi.n	8007e84 <__lshift+0x70>
 8007e9e:	1b03      	subs	r3, r0, r4
 8007ea0:	3b15      	subs	r3, #21
 8007ea2:	f023 0303 	bic.w	r3, r3, #3
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	f104 0215 	add.w	r2, r4, #21
 8007eac:	4290      	cmp	r0, r2
 8007eae:	bf38      	it	cc
 8007eb0:	2304      	movcc	r3, #4
 8007eb2:	f841 c003 	str.w	ip, [r1, r3]
 8007eb6:	f1bc 0f00 	cmp.w	ip, #0
 8007eba:	d001      	beq.n	8007ec0 <__lshift+0xac>
 8007ebc:	f108 0602 	add.w	r6, r8, #2
 8007ec0:	3e01      	subs	r6, #1
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	612e      	str	r6, [r5, #16]
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	f7ff fdd2 	bl	8007a70 <_Bfree>
 8007ecc:	4628      	mov	r0, r5
 8007ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	e7c1      	b.n	8007e5e <__lshift+0x4a>
 8007eda:	3904      	subs	r1, #4
 8007edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ee0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ee4:	4298      	cmp	r0, r3
 8007ee6:	d8f9      	bhi.n	8007edc <__lshift+0xc8>
 8007ee8:	e7ea      	b.n	8007ec0 <__lshift+0xac>
 8007eea:	bf00      	nop
 8007eec:	0800929b 	.word	0x0800929b
 8007ef0:	080092ac 	.word	0x080092ac

08007ef4 <__mcmp>:
 8007ef4:	b530      	push	{r4, r5, lr}
 8007ef6:	6902      	ldr	r2, [r0, #16]
 8007ef8:	690c      	ldr	r4, [r1, #16]
 8007efa:	1b12      	subs	r2, r2, r4
 8007efc:	d10e      	bne.n	8007f1c <__mcmp+0x28>
 8007efe:	f100 0314 	add.w	r3, r0, #20
 8007f02:	3114      	adds	r1, #20
 8007f04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f14:	42a5      	cmp	r5, r4
 8007f16:	d003      	beq.n	8007f20 <__mcmp+0x2c>
 8007f18:	d305      	bcc.n	8007f26 <__mcmp+0x32>
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	bd30      	pop	{r4, r5, pc}
 8007f20:	4283      	cmp	r3, r0
 8007f22:	d3f3      	bcc.n	8007f0c <__mcmp+0x18>
 8007f24:	e7fa      	b.n	8007f1c <__mcmp+0x28>
 8007f26:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2a:	e7f7      	b.n	8007f1c <__mcmp+0x28>

08007f2c <__mdiff>:
 8007f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f30:	460c      	mov	r4, r1
 8007f32:	4606      	mov	r6, r0
 8007f34:	4611      	mov	r1, r2
 8007f36:	4620      	mov	r0, r4
 8007f38:	4690      	mov	r8, r2
 8007f3a:	f7ff ffdb 	bl	8007ef4 <__mcmp>
 8007f3e:	1e05      	subs	r5, r0, #0
 8007f40:	d110      	bne.n	8007f64 <__mdiff+0x38>
 8007f42:	4629      	mov	r1, r5
 8007f44:	4630      	mov	r0, r6
 8007f46:	f7ff fd53 	bl	80079f0 <_Balloc>
 8007f4a:	b930      	cbnz	r0, 8007f5a <__mdiff+0x2e>
 8007f4c:	4b3a      	ldr	r3, [pc, #232]	; (8008038 <__mdiff+0x10c>)
 8007f4e:	4602      	mov	r2, r0
 8007f50:	f240 2132 	movw	r1, #562	; 0x232
 8007f54:	4839      	ldr	r0, [pc, #228]	; (800803c <__mdiff+0x110>)
 8007f56:	f000 fb31 	bl	80085bc <__assert_func>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f64:	bfa4      	itt	ge
 8007f66:	4643      	movge	r3, r8
 8007f68:	46a0      	movge	r8, r4
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f70:	bfa6      	itte	ge
 8007f72:	461c      	movge	r4, r3
 8007f74:	2500      	movge	r5, #0
 8007f76:	2501      	movlt	r5, #1
 8007f78:	f7ff fd3a 	bl	80079f0 <_Balloc>
 8007f7c:	b920      	cbnz	r0, 8007f88 <__mdiff+0x5c>
 8007f7e:	4b2e      	ldr	r3, [pc, #184]	; (8008038 <__mdiff+0x10c>)
 8007f80:	4602      	mov	r2, r0
 8007f82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f86:	e7e5      	b.n	8007f54 <__mdiff+0x28>
 8007f88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f8c:	6926      	ldr	r6, [r4, #16]
 8007f8e:	60c5      	str	r5, [r0, #12]
 8007f90:	f104 0914 	add.w	r9, r4, #20
 8007f94:	f108 0514 	add.w	r5, r8, #20
 8007f98:	f100 0e14 	add.w	lr, r0, #20
 8007f9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007fa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007fa4:	f108 0210 	add.w	r2, r8, #16
 8007fa8:	46f2      	mov	sl, lr
 8007faa:	2100      	movs	r1, #0
 8007fac:	f859 3b04 	ldr.w	r3, [r9], #4
 8007fb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007fb4:	fa1f f883 	uxth.w	r8, r3
 8007fb8:	fa11 f18b 	uxtah	r1, r1, fp
 8007fbc:	0c1b      	lsrs	r3, r3, #16
 8007fbe:	eba1 0808 	sub.w	r8, r1, r8
 8007fc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007fc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007fca:	fa1f f888 	uxth.w	r8, r8
 8007fce:	1419      	asrs	r1, r3, #16
 8007fd0:	454e      	cmp	r6, r9
 8007fd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007fd6:	f84a 3b04 	str.w	r3, [sl], #4
 8007fda:	d8e7      	bhi.n	8007fac <__mdiff+0x80>
 8007fdc:	1b33      	subs	r3, r6, r4
 8007fde:	3b15      	subs	r3, #21
 8007fe0:	f023 0303 	bic.w	r3, r3, #3
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	3415      	adds	r4, #21
 8007fe8:	42a6      	cmp	r6, r4
 8007fea:	bf38      	it	cc
 8007fec:	2304      	movcc	r3, #4
 8007fee:	441d      	add	r5, r3
 8007ff0:	4473      	add	r3, lr
 8007ff2:	469e      	mov	lr, r3
 8007ff4:	462e      	mov	r6, r5
 8007ff6:	4566      	cmp	r6, ip
 8007ff8:	d30e      	bcc.n	8008018 <__mdiff+0xec>
 8007ffa:	f10c 0203 	add.w	r2, ip, #3
 8007ffe:	1b52      	subs	r2, r2, r5
 8008000:	f022 0203 	bic.w	r2, r2, #3
 8008004:	3d03      	subs	r5, #3
 8008006:	45ac      	cmp	ip, r5
 8008008:	bf38      	it	cc
 800800a:	2200      	movcc	r2, #0
 800800c:	441a      	add	r2, r3
 800800e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008012:	b17b      	cbz	r3, 8008034 <__mdiff+0x108>
 8008014:	6107      	str	r7, [r0, #16]
 8008016:	e7a3      	b.n	8007f60 <__mdiff+0x34>
 8008018:	f856 8b04 	ldr.w	r8, [r6], #4
 800801c:	fa11 f288 	uxtah	r2, r1, r8
 8008020:	1414      	asrs	r4, r2, #16
 8008022:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008026:	b292      	uxth	r2, r2
 8008028:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800802c:	f84e 2b04 	str.w	r2, [lr], #4
 8008030:	1421      	asrs	r1, r4, #16
 8008032:	e7e0      	b.n	8007ff6 <__mdiff+0xca>
 8008034:	3f01      	subs	r7, #1
 8008036:	e7ea      	b.n	800800e <__mdiff+0xe2>
 8008038:	0800929b 	.word	0x0800929b
 800803c:	080092ac 	.word	0x080092ac

08008040 <__d2b>:
 8008040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008044:	4689      	mov	r9, r1
 8008046:	2101      	movs	r1, #1
 8008048:	ec57 6b10 	vmov	r6, r7, d0
 800804c:	4690      	mov	r8, r2
 800804e:	f7ff fccf 	bl	80079f0 <_Balloc>
 8008052:	4604      	mov	r4, r0
 8008054:	b930      	cbnz	r0, 8008064 <__d2b+0x24>
 8008056:	4602      	mov	r2, r0
 8008058:	4b25      	ldr	r3, [pc, #148]	; (80080f0 <__d2b+0xb0>)
 800805a:	4826      	ldr	r0, [pc, #152]	; (80080f4 <__d2b+0xb4>)
 800805c:	f240 310a 	movw	r1, #778	; 0x30a
 8008060:	f000 faac 	bl	80085bc <__assert_func>
 8008064:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008068:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800806c:	bb35      	cbnz	r5, 80080bc <__d2b+0x7c>
 800806e:	2e00      	cmp	r6, #0
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	d028      	beq.n	80080c6 <__d2b+0x86>
 8008074:	4668      	mov	r0, sp
 8008076:	9600      	str	r6, [sp, #0]
 8008078:	f7ff fd82 	bl	8007b80 <__lo0bits>
 800807c:	9900      	ldr	r1, [sp, #0]
 800807e:	b300      	cbz	r0, 80080c2 <__d2b+0x82>
 8008080:	9a01      	ldr	r2, [sp, #4]
 8008082:	f1c0 0320 	rsb	r3, r0, #32
 8008086:	fa02 f303 	lsl.w	r3, r2, r3
 800808a:	430b      	orrs	r3, r1
 800808c:	40c2      	lsrs	r2, r0
 800808e:	6163      	str	r3, [r4, #20]
 8008090:	9201      	str	r2, [sp, #4]
 8008092:	9b01      	ldr	r3, [sp, #4]
 8008094:	61a3      	str	r3, [r4, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	bf14      	ite	ne
 800809a:	2202      	movne	r2, #2
 800809c:	2201      	moveq	r2, #1
 800809e:	6122      	str	r2, [r4, #16]
 80080a0:	b1d5      	cbz	r5, 80080d8 <__d2b+0x98>
 80080a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080a6:	4405      	add	r5, r0
 80080a8:	f8c9 5000 	str.w	r5, [r9]
 80080ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080b0:	f8c8 0000 	str.w	r0, [r8]
 80080b4:	4620      	mov	r0, r4
 80080b6:	b003      	add	sp, #12
 80080b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080c0:	e7d5      	b.n	800806e <__d2b+0x2e>
 80080c2:	6161      	str	r1, [r4, #20]
 80080c4:	e7e5      	b.n	8008092 <__d2b+0x52>
 80080c6:	a801      	add	r0, sp, #4
 80080c8:	f7ff fd5a 	bl	8007b80 <__lo0bits>
 80080cc:	9b01      	ldr	r3, [sp, #4]
 80080ce:	6163      	str	r3, [r4, #20]
 80080d0:	2201      	movs	r2, #1
 80080d2:	6122      	str	r2, [r4, #16]
 80080d4:	3020      	adds	r0, #32
 80080d6:	e7e3      	b.n	80080a0 <__d2b+0x60>
 80080d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080e0:	f8c9 0000 	str.w	r0, [r9]
 80080e4:	6918      	ldr	r0, [r3, #16]
 80080e6:	f7ff fd2b 	bl	8007b40 <__hi0bits>
 80080ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080ee:	e7df      	b.n	80080b0 <__d2b+0x70>
 80080f0:	0800929b 	.word	0x0800929b
 80080f4:	080092ac 	.word	0x080092ac

080080f8 <_calloc_r>:
 80080f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080fa:	fba1 2402 	umull	r2, r4, r1, r2
 80080fe:	b94c      	cbnz	r4, 8008114 <_calloc_r+0x1c>
 8008100:	4611      	mov	r1, r2
 8008102:	9201      	str	r2, [sp, #4]
 8008104:	f000 f87a 	bl	80081fc <_malloc_r>
 8008108:	9a01      	ldr	r2, [sp, #4]
 800810a:	4605      	mov	r5, r0
 800810c:	b930      	cbnz	r0, 800811c <_calloc_r+0x24>
 800810e:	4628      	mov	r0, r5
 8008110:	b003      	add	sp, #12
 8008112:	bd30      	pop	{r4, r5, pc}
 8008114:	220c      	movs	r2, #12
 8008116:	6002      	str	r2, [r0, #0]
 8008118:	2500      	movs	r5, #0
 800811a:	e7f8      	b.n	800810e <_calloc_r+0x16>
 800811c:	4621      	mov	r1, r4
 800811e:	f7fe f941 	bl	80063a4 <memset>
 8008122:	e7f4      	b.n	800810e <_calloc_r+0x16>

08008124 <_free_r>:
 8008124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008126:	2900      	cmp	r1, #0
 8008128:	d044      	beq.n	80081b4 <_free_r+0x90>
 800812a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800812e:	9001      	str	r0, [sp, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	f1a1 0404 	sub.w	r4, r1, #4
 8008136:	bfb8      	it	lt
 8008138:	18e4      	addlt	r4, r4, r3
 800813a:	f000 fa9b 	bl	8008674 <__malloc_lock>
 800813e:	4a1e      	ldr	r2, [pc, #120]	; (80081b8 <_free_r+0x94>)
 8008140:	9801      	ldr	r0, [sp, #4]
 8008142:	6813      	ldr	r3, [r2, #0]
 8008144:	b933      	cbnz	r3, 8008154 <_free_r+0x30>
 8008146:	6063      	str	r3, [r4, #4]
 8008148:	6014      	str	r4, [r2, #0]
 800814a:	b003      	add	sp, #12
 800814c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008150:	f000 ba96 	b.w	8008680 <__malloc_unlock>
 8008154:	42a3      	cmp	r3, r4
 8008156:	d908      	bls.n	800816a <_free_r+0x46>
 8008158:	6825      	ldr	r5, [r4, #0]
 800815a:	1961      	adds	r1, r4, r5
 800815c:	428b      	cmp	r3, r1
 800815e:	bf01      	itttt	eq
 8008160:	6819      	ldreq	r1, [r3, #0]
 8008162:	685b      	ldreq	r3, [r3, #4]
 8008164:	1949      	addeq	r1, r1, r5
 8008166:	6021      	streq	r1, [r4, #0]
 8008168:	e7ed      	b.n	8008146 <_free_r+0x22>
 800816a:	461a      	mov	r2, r3
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	b10b      	cbz	r3, 8008174 <_free_r+0x50>
 8008170:	42a3      	cmp	r3, r4
 8008172:	d9fa      	bls.n	800816a <_free_r+0x46>
 8008174:	6811      	ldr	r1, [r2, #0]
 8008176:	1855      	adds	r5, r2, r1
 8008178:	42a5      	cmp	r5, r4
 800817a:	d10b      	bne.n	8008194 <_free_r+0x70>
 800817c:	6824      	ldr	r4, [r4, #0]
 800817e:	4421      	add	r1, r4
 8008180:	1854      	adds	r4, r2, r1
 8008182:	42a3      	cmp	r3, r4
 8008184:	6011      	str	r1, [r2, #0]
 8008186:	d1e0      	bne.n	800814a <_free_r+0x26>
 8008188:	681c      	ldr	r4, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	6053      	str	r3, [r2, #4]
 800818e:	4421      	add	r1, r4
 8008190:	6011      	str	r1, [r2, #0]
 8008192:	e7da      	b.n	800814a <_free_r+0x26>
 8008194:	d902      	bls.n	800819c <_free_r+0x78>
 8008196:	230c      	movs	r3, #12
 8008198:	6003      	str	r3, [r0, #0]
 800819a:	e7d6      	b.n	800814a <_free_r+0x26>
 800819c:	6825      	ldr	r5, [r4, #0]
 800819e:	1961      	adds	r1, r4, r5
 80081a0:	428b      	cmp	r3, r1
 80081a2:	bf04      	itt	eq
 80081a4:	6819      	ldreq	r1, [r3, #0]
 80081a6:	685b      	ldreq	r3, [r3, #4]
 80081a8:	6063      	str	r3, [r4, #4]
 80081aa:	bf04      	itt	eq
 80081ac:	1949      	addeq	r1, r1, r5
 80081ae:	6021      	streq	r1, [r4, #0]
 80081b0:	6054      	str	r4, [r2, #4]
 80081b2:	e7ca      	b.n	800814a <_free_r+0x26>
 80081b4:	b003      	add	sp, #12
 80081b6:	bd30      	pop	{r4, r5, pc}
 80081b8:	200003ec 	.word	0x200003ec

080081bc <sbrk_aligned>:
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	4e0e      	ldr	r6, [pc, #56]	; (80081f8 <sbrk_aligned+0x3c>)
 80081c0:	460c      	mov	r4, r1
 80081c2:	6831      	ldr	r1, [r6, #0]
 80081c4:	4605      	mov	r5, r0
 80081c6:	b911      	cbnz	r1, 80081ce <sbrk_aligned+0x12>
 80081c8:	f000 f9e8 	bl	800859c <_sbrk_r>
 80081cc:	6030      	str	r0, [r6, #0]
 80081ce:	4621      	mov	r1, r4
 80081d0:	4628      	mov	r0, r5
 80081d2:	f000 f9e3 	bl	800859c <_sbrk_r>
 80081d6:	1c43      	adds	r3, r0, #1
 80081d8:	d00a      	beq.n	80081f0 <sbrk_aligned+0x34>
 80081da:	1cc4      	adds	r4, r0, #3
 80081dc:	f024 0403 	bic.w	r4, r4, #3
 80081e0:	42a0      	cmp	r0, r4
 80081e2:	d007      	beq.n	80081f4 <sbrk_aligned+0x38>
 80081e4:	1a21      	subs	r1, r4, r0
 80081e6:	4628      	mov	r0, r5
 80081e8:	f000 f9d8 	bl	800859c <_sbrk_r>
 80081ec:	3001      	adds	r0, #1
 80081ee:	d101      	bne.n	80081f4 <sbrk_aligned+0x38>
 80081f0:	f04f 34ff 	mov.w	r4, #4294967295
 80081f4:	4620      	mov	r0, r4
 80081f6:	bd70      	pop	{r4, r5, r6, pc}
 80081f8:	200003f0 	.word	0x200003f0

080081fc <_malloc_r>:
 80081fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008200:	1ccd      	adds	r5, r1, #3
 8008202:	f025 0503 	bic.w	r5, r5, #3
 8008206:	3508      	adds	r5, #8
 8008208:	2d0c      	cmp	r5, #12
 800820a:	bf38      	it	cc
 800820c:	250c      	movcc	r5, #12
 800820e:	2d00      	cmp	r5, #0
 8008210:	4607      	mov	r7, r0
 8008212:	db01      	blt.n	8008218 <_malloc_r+0x1c>
 8008214:	42a9      	cmp	r1, r5
 8008216:	d905      	bls.n	8008224 <_malloc_r+0x28>
 8008218:	230c      	movs	r3, #12
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	2600      	movs	r6, #0
 800821e:	4630      	mov	r0, r6
 8008220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008224:	4e2e      	ldr	r6, [pc, #184]	; (80082e0 <_malloc_r+0xe4>)
 8008226:	f000 fa25 	bl	8008674 <__malloc_lock>
 800822a:	6833      	ldr	r3, [r6, #0]
 800822c:	461c      	mov	r4, r3
 800822e:	bb34      	cbnz	r4, 800827e <_malloc_r+0x82>
 8008230:	4629      	mov	r1, r5
 8008232:	4638      	mov	r0, r7
 8008234:	f7ff ffc2 	bl	80081bc <sbrk_aligned>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	4604      	mov	r4, r0
 800823c:	d14d      	bne.n	80082da <_malloc_r+0xde>
 800823e:	6834      	ldr	r4, [r6, #0]
 8008240:	4626      	mov	r6, r4
 8008242:	2e00      	cmp	r6, #0
 8008244:	d140      	bne.n	80082c8 <_malloc_r+0xcc>
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	4631      	mov	r1, r6
 800824a:	4638      	mov	r0, r7
 800824c:	eb04 0803 	add.w	r8, r4, r3
 8008250:	f000 f9a4 	bl	800859c <_sbrk_r>
 8008254:	4580      	cmp	r8, r0
 8008256:	d13a      	bne.n	80082ce <_malloc_r+0xd2>
 8008258:	6821      	ldr	r1, [r4, #0]
 800825a:	3503      	adds	r5, #3
 800825c:	1a6d      	subs	r5, r5, r1
 800825e:	f025 0503 	bic.w	r5, r5, #3
 8008262:	3508      	adds	r5, #8
 8008264:	2d0c      	cmp	r5, #12
 8008266:	bf38      	it	cc
 8008268:	250c      	movcc	r5, #12
 800826a:	4629      	mov	r1, r5
 800826c:	4638      	mov	r0, r7
 800826e:	f7ff ffa5 	bl	80081bc <sbrk_aligned>
 8008272:	3001      	adds	r0, #1
 8008274:	d02b      	beq.n	80082ce <_malloc_r+0xd2>
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	442b      	add	r3, r5
 800827a:	6023      	str	r3, [r4, #0]
 800827c:	e00e      	b.n	800829c <_malloc_r+0xa0>
 800827e:	6822      	ldr	r2, [r4, #0]
 8008280:	1b52      	subs	r2, r2, r5
 8008282:	d41e      	bmi.n	80082c2 <_malloc_r+0xc6>
 8008284:	2a0b      	cmp	r2, #11
 8008286:	d916      	bls.n	80082b6 <_malloc_r+0xba>
 8008288:	1961      	adds	r1, r4, r5
 800828a:	42a3      	cmp	r3, r4
 800828c:	6025      	str	r5, [r4, #0]
 800828e:	bf18      	it	ne
 8008290:	6059      	strne	r1, [r3, #4]
 8008292:	6863      	ldr	r3, [r4, #4]
 8008294:	bf08      	it	eq
 8008296:	6031      	streq	r1, [r6, #0]
 8008298:	5162      	str	r2, [r4, r5]
 800829a:	604b      	str	r3, [r1, #4]
 800829c:	4638      	mov	r0, r7
 800829e:	f104 060b 	add.w	r6, r4, #11
 80082a2:	f000 f9ed 	bl	8008680 <__malloc_unlock>
 80082a6:	f026 0607 	bic.w	r6, r6, #7
 80082aa:	1d23      	adds	r3, r4, #4
 80082ac:	1af2      	subs	r2, r6, r3
 80082ae:	d0b6      	beq.n	800821e <_malloc_r+0x22>
 80082b0:	1b9b      	subs	r3, r3, r6
 80082b2:	50a3      	str	r3, [r4, r2]
 80082b4:	e7b3      	b.n	800821e <_malloc_r+0x22>
 80082b6:	6862      	ldr	r2, [r4, #4]
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	bf0c      	ite	eq
 80082bc:	6032      	streq	r2, [r6, #0]
 80082be:	605a      	strne	r2, [r3, #4]
 80082c0:	e7ec      	b.n	800829c <_malloc_r+0xa0>
 80082c2:	4623      	mov	r3, r4
 80082c4:	6864      	ldr	r4, [r4, #4]
 80082c6:	e7b2      	b.n	800822e <_malloc_r+0x32>
 80082c8:	4634      	mov	r4, r6
 80082ca:	6876      	ldr	r6, [r6, #4]
 80082cc:	e7b9      	b.n	8008242 <_malloc_r+0x46>
 80082ce:	230c      	movs	r3, #12
 80082d0:	603b      	str	r3, [r7, #0]
 80082d2:	4638      	mov	r0, r7
 80082d4:	f000 f9d4 	bl	8008680 <__malloc_unlock>
 80082d8:	e7a1      	b.n	800821e <_malloc_r+0x22>
 80082da:	6025      	str	r5, [r4, #0]
 80082dc:	e7de      	b.n	800829c <_malloc_r+0xa0>
 80082de:	bf00      	nop
 80082e0:	200003ec 	.word	0x200003ec

080082e4 <__ssputs_r>:
 80082e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e8:	688e      	ldr	r6, [r1, #8]
 80082ea:	429e      	cmp	r6, r3
 80082ec:	4682      	mov	sl, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	4690      	mov	r8, r2
 80082f2:	461f      	mov	r7, r3
 80082f4:	d838      	bhi.n	8008368 <__ssputs_r+0x84>
 80082f6:	898a      	ldrh	r2, [r1, #12]
 80082f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082fc:	d032      	beq.n	8008364 <__ssputs_r+0x80>
 80082fe:	6825      	ldr	r5, [r4, #0]
 8008300:	6909      	ldr	r1, [r1, #16]
 8008302:	eba5 0901 	sub.w	r9, r5, r1
 8008306:	6965      	ldr	r5, [r4, #20]
 8008308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800830c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008310:	3301      	adds	r3, #1
 8008312:	444b      	add	r3, r9
 8008314:	106d      	asrs	r5, r5, #1
 8008316:	429d      	cmp	r5, r3
 8008318:	bf38      	it	cc
 800831a:	461d      	movcc	r5, r3
 800831c:	0553      	lsls	r3, r2, #21
 800831e:	d531      	bpl.n	8008384 <__ssputs_r+0xa0>
 8008320:	4629      	mov	r1, r5
 8008322:	f7ff ff6b 	bl	80081fc <_malloc_r>
 8008326:	4606      	mov	r6, r0
 8008328:	b950      	cbnz	r0, 8008340 <__ssputs_r+0x5c>
 800832a:	230c      	movs	r3, #12
 800832c:	f8ca 3000 	str.w	r3, [sl]
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008336:	81a3      	strh	r3, [r4, #12]
 8008338:	f04f 30ff 	mov.w	r0, #4294967295
 800833c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008340:	6921      	ldr	r1, [r4, #16]
 8008342:	464a      	mov	r2, r9
 8008344:	f7ff fb46 	bl	80079d4 <memcpy>
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800834e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	6126      	str	r6, [r4, #16]
 8008356:	6165      	str	r5, [r4, #20]
 8008358:	444e      	add	r6, r9
 800835a:	eba5 0509 	sub.w	r5, r5, r9
 800835e:	6026      	str	r6, [r4, #0]
 8008360:	60a5      	str	r5, [r4, #8]
 8008362:	463e      	mov	r6, r7
 8008364:	42be      	cmp	r6, r7
 8008366:	d900      	bls.n	800836a <__ssputs_r+0x86>
 8008368:	463e      	mov	r6, r7
 800836a:	6820      	ldr	r0, [r4, #0]
 800836c:	4632      	mov	r2, r6
 800836e:	4641      	mov	r1, r8
 8008370:	f000 f966 	bl	8008640 <memmove>
 8008374:	68a3      	ldr	r3, [r4, #8]
 8008376:	1b9b      	subs	r3, r3, r6
 8008378:	60a3      	str	r3, [r4, #8]
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	4433      	add	r3, r6
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	2000      	movs	r0, #0
 8008382:	e7db      	b.n	800833c <__ssputs_r+0x58>
 8008384:	462a      	mov	r2, r5
 8008386:	f000 f981 	bl	800868c <_realloc_r>
 800838a:	4606      	mov	r6, r0
 800838c:	2800      	cmp	r0, #0
 800838e:	d1e1      	bne.n	8008354 <__ssputs_r+0x70>
 8008390:	6921      	ldr	r1, [r4, #16]
 8008392:	4650      	mov	r0, sl
 8008394:	f7ff fec6 	bl	8008124 <_free_r>
 8008398:	e7c7      	b.n	800832a <__ssputs_r+0x46>
	...

0800839c <_svfiprintf_r>:
 800839c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a0:	4698      	mov	r8, r3
 80083a2:	898b      	ldrh	r3, [r1, #12]
 80083a4:	061b      	lsls	r3, r3, #24
 80083a6:	b09d      	sub	sp, #116	; 0x74
 80083a8:	4607      	mov	r7, r0
 80083aa:	460d      	mov	r5, r1
 80083ac:	4614      	mov	r4, r2
 80083ae:	d50e      	bpl.n	80083ce <_svfiprintf_r+0x32>
 80083b0:	690b      	ldr	r3, [r1, #16]
 80083b2:	b963      	cbnz	r3, 80083ce <_svfiprintf_r+0x32>
 80083b4:	2140      	movs	r1, #64	; 0x40
 80083b6:	f7ff ff21 	bl	80081fc <_malloc_r>
 80083ba:	6028      	str	r0, [r5, #0]
 80083bc:	6128      	str	r0, [r5, #16]
 80083be:	b920      	cbnz	r0, 80083ca <_svfiprintf_r+0x2e>
 80083c0:	230c      	movs	r3, #12
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295
 80083c8:	e0d1      	b.n	800856e <_svfiprintf_r+0x1d2>
 80083ca:	2340      	movs	r3, #64	; 0x40
 80083cc:	616b      	str	r3, [r5, #20]
 80083ce:	2300      	movs	r3, #0
 80083d0:	9309      	str	r3, [sp, #36]	; 0x24
 80083d2:	2320      	movs	r3, #32
 80083d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80083dc:	2330      	movs	r3, #48	; 0x30
 80083de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008588 <_svfiprintf_r+0x1ec>
 80083e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083e6:	f04f 0901 	mov.w	r9, #1
 80083ea:	4623      	mov	r3, r4
 80083ec:	469a      	mov	sl, r3
 80083ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083f2:	b10a      	cbz	r2, 80083f8 <_svfiprintf_r+0x5c>
 80083f4:	2a25      	cmp	r2, #37	; 0x25
 80083f6:	d1f9      	bne.n	80083ec <_svfiprintf_r+0x50>
 80083f8:	ebba 0b04 	subs.w	fp, sl, r4
 80083fc:	d00b      	beq.n	8008416 <_svfiprintf_r+0x7a>
 80083fe:	465b      	mov	r3, fp
 8008400:	4622      	mov	r2, r4
 8008402:	4629      	mov	r1, r5
 8008404:	4638      	mov	r0, r7
 8008406:	f7ff ff6d 	bl	80082e4 <__ssputs_r>
 800840a:	3001      	adds	r0, #1
 800840c:	f000 80aa 	beq.w	8008564 <_svfiprintf_r+0x1c8>
 8008410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008412:	445a      	add	r2, fp
 8008414:	9209      	str	r2, [sp, #36]	; 0x24
 8008416:	f89a 3000 	ldrb.w	r3, [sl]
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 80a2 	beq.w	8008564 <_svfiprintf_r+0x1c8>
 8008420:	2300      	movs	r3, #0
 8008422:	f04f 32ff 	mov.w	r2, #4294967295
 8008426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800842a:	f10a 0a01 	add.w	sl, sl, #1
 800842e:	9304      	str	r3, [sp, #16]
 8008430:	9307      	str	r3, [sp, #28]
 8008432:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008436:	931a      	str	r3, [sp, #104]	; 0x68
 8008438:	4654      	mov	r4, sl
 800843a:	2205      	movs	r2, #5
 800843c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008440:	4851      	ldr	r0, [pc, #324]	; (8008588 <_svfiprintf_r+0x1ec>)
 8008442:	f7f7 feed 	bl	8000220 <memchr>
 8008446:	9a04      	ldr	r2, [sp, #16]
 8008448:	b9d8      	cbnz	r0, 8008482 <_svfiprintf_r+0xe6>
 800844a:	06d0      	lsls	r0, r2, #27
 800844c:	bf44      	itt	mi
 800844e:	2320      	movmi	r3, #32
 8008450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008454:	0711      	lsls	r1, r2, #28
 8008456:	bf44      	itt	mi
 8008458:	232b      	movmi	r3, #43	; 0x2b
 800845a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800845e:	f89a 3000 	ldrb.w	r3, [sl]
 8008462:	2b2a      	cmp	r3, #42	; 0x2a
 8008464:	d015      	beq.n	8008492 <_svfiprintf_r+0xf6>
 8008466:	9a07      	ldr	r2, [sp, #28]
 8008468:	4654      	mov	r4, sl
 800846a:	2000      	movs	r0, #0
 800846c:	f04f 0c0a 	mov.w	ip, #10
 8008470:	4621      	mov	r1, r4
 8008472:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008476:	3b30      	subs	r3, #48	; 0x30
 8008478:	2b09      	cmp	r3, #9
 800847a:	d94e      	bls.n	800851a <_svfiprintf_r+0x17e>
 800847c:	b1b0      	cbz	r0, 80084ac <_svfiprintf_r+0x110>
 800847e:	9207      	str	r2, [sp, #28]
 8008480:	e014      	b.n	80084ac <_svfiprintf_r+0x110>
 8008482:	eba0 0308 	sub.w	r3, r0, r8
 8008486:	fa09 f303 	lsl.w	r3, r9, r3
 800848a:	4313      	orrs	r3, r2
 800848c:	9304      	str	r3, [sp, #16]
 800848e:	46a2      	mov	sl, r4
 8008490:	e7d2      	b.n	8008438 <_svfiprintf_r+0x9c>
 8008492:	9b03      	ldr	r3, [sp, #12]
 8008494:	1d19      	adds	r1, r3, #4
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	9103      	str	r1, [sp, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	bfbb      	ittet	lt
 800849e:	425b      	neglt	r3, r3
 80084a0:	f042 0202 	orrlt.w	r2, r2, #2
 80084a4:	9307      	strge	r3, [sp, #28]
 80084a6:	9307      	strlt	r3, [sp, #28]
 80084a8:	bfb8      	it	lt
 80084aa:	9204      	strlt	r2, [sp, #16]
 80084ac:	7823      	ldrb	r3, [r4, #0]
 80084ae:	2b2e      	cmp	r3, #46	; 0x2e
 80084b0:	d10c      	bne.n	80084cc <_svfiprintf_r+0x130>
 80084b2:	7863      	ldrb	r3, [r4, #1]
 80084b4:	2b2a      	cmp	r3, #42	; 0x2a
 80084b6:	d135      	bne.n	8008524 <_svfiprintf_r+0x188>
 80084b8:	9b03      	ldr	r3, [sp, #12]
 80084ba:	1d1a      	adds	r2, r3, #4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	9203      	str	r2, [sp, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	bfb8      	it	lt
 80084c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80084c8:	3402      	adds	r4, #2
 80084ca:	9305      	str	r3, [sp, #20]
 80084cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008598 <_svfiprintf_r+0x1fc>
 80084d0:	7821      	ldrb	r1, [r4, #0]
 80084d2:	2203      	movs	r2, #3
 80084d4:	4650      	mov	r0, sl
 80084d6:	f7f7 fea3 	bl	8000220 <memchr>
 80084da:	b140      	cbz	r0, 80084ee <_svfiprintf_r+0x152>
 80084dc:	2340      	movs	r3, #64	; 0x40
 80084de:	eba0 000a 	sub.w	r0, r0, sl
 80084e2:	fa03 f000 	lsl.w	r0, r3, r0
 80084e6:	9b04      	ldr	r3, [sp, #16]
 80084e8:	4303      	orrs	r3, r0
 80084ea:	3401      	adds	r4, #1
 80084ec:	9304      	str	r3, [sp, #16]
 80084ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084f2:	4826      	ldr	r0, [pc, #152]	; (800858c <_svfiprintf_r+0x1f0>)
 80084f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084f8:	2206      	movs	r2, #6
 80084fa:	f7f7 fe91 	bl	8000220 <memchr>
 80084fe:	2800      	cmp	r0, #0
 8008500:	d038      	beq.n	8008574 <_svfiprintf_r+0x1d8>
 8008502:	4b23      	ldr	r3, [pc, #140]	; (8008590 <_svfiprintf_r+0x1f4>)
 8008504:	bb1b      	cbnz	r3, 800854e <_svfiprintf_r+0x1b2>
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	3307      	adds	r3, #7
 800850a:	f023 0307 	bic.w	r3, r3, #7
 800850e:	3308      	adds	r3, #8
 8008510:	9303      	str	r3, [sp, #12]
 8008512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008514:	4433      	add	r3, r6
 8008516:	9309      	str	r3, [sp, #36]	; 0x24
 8008518:	e767      	b.n	80083ea <_svfiprintf_r+0x4e>
 800851a:	fb0c 3202 	mla	r2, ip, r2, r3
 800851e:	460c      	mov	r4, r1
 8008520:	2001      	movs	r0, #1
 8008522:	e7a5      	b.n	8008470 <_svfiprintf_r+0xd4>
 8008524:	2300      	movs	r3, #0
 8008526:	3401      	adds	r4, #1
 8008528:	9305      	str	r3, [sp, #20]
 800852a:	4619      	mov	r1, r3
 800852c:	f04f 0c0a 	mov.w	ip, #10
 8008530:	4620      	mov	r0, r4
 8008532:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008536:	3a30      	subs	r2, #48	; 0x30
 8008538:	2a09      	cmp	r2, #9
 800853a:	d903      	bls.n	8008544 <_svfiprintf_r+0x1a8>
 800853c:	2b00      	cmp	r3, #0
 800853e:	d0c5      	beq.n	80084cc <_svfiprintf_r+0x130>
 8008540:	9105      	str	r1, [sp, #20]
 8008542:	e7c3      	b.n	80084cc <_svfiprintf_r+0x130>
 8008544:	fb0c 2101 	mla	r1, ip, r1, r2
 8008548:	4604      	mov	r4, r0
 800854a:	2301      	movs	r3, #1
 800854c:	e7f0      	b.n	8008530 <_svfiprintf_r+0x194>
 800854e:	ab03      	add	r3, sp, #12
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	462a      	mov	r2, r5
 8008554:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <_svfiprintf_r+0x1f8>)
 8008556:	a904      	add	r1, sp, #16
 8008558:	4638      	mov	r0, r7
 800855a:	f7fd ffcb 	bl	80064f4 <_printf_float>
 800855e:	1c42      	adds	r2, r0, #1
 8008560:	4606      	mov	r6, r0
 8008562:	d1d6      	bne.n	8008512 <_svfiprintf_r+0x176>
 8008564:	89ab      	ldrh	r3, [r5, #12]
 8008566:	065b      	lsls	r3, r3, #25
 8008568:	f53f af2c 	bmi.w	80083c4 <_svfiprintf_r+0x28>
 800856c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800856e:	b01d      	add	sp, #116	; 0x74
 8008570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008574:	ab03      	add	r3, sp, #12
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	462a      	mov	r2, r5
 800857a:	4b06      	ldr	r3, [pc, #24]	; (8008594 <_svfiprintf_r+0x1f8>)
 800857c:	a904      	add	r1, sp, #16
 800857e:	4638      	mov	r0, r7
 8008580:	f7fe fa5c 	bl	8006a3c <_printf_i>
 8008584:	e7eb      	b.n	800855e <_svfiprintf_r+0x1c2>
 8008586:	bf00      	nop
 8008588:	08009404 	.word	0x08009404
 800858c:	0800940e 	.word	0x0800940e
 8008590:	080064f5 	.word	0x080064f5
 8008594:	080082e5 	.word	0x080082e5
 8008598:	0800940a 	.word	0x0800940a

0800859c <_sbrk_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4d06      	ldr	r5, [pc, #24]	; (80085b8 <_sbrk_r+0x1c>)
 80085a0:	2300      	movs	r3, #0
 80085a2:	4604      	mov	r4, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	602b      	str	r3, [r5, #0]
 80085a8:	f7f9 fb5e 	bl	8001c68 <_sbrk>
 80085ac:	1c43      	adds	r3, r0, #1
 80085ae:	d102      	bne.n	80085b6 <_sbrk_r+0x1a>
 80085b0:	682b      	ldr	r3, [r5, #0]
 80085b2:	b103      	cbz	r3, 80085b6 <_sbrk_r+0x1a>
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	bd38      	pop	{r3, r4, r5, pc}
 80085b8:	200003f4 	.word	0x200003f4

080085bc <__assert_func>:
 80085bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085be:	4614      	mov	r4, r2
 80085c0:	461a      	mov	r2, r3
 80085c2:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <__assert_func+0x2c>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4605      	mov	r5, r0
 80085c8:	68d8      	ldr	r0, [r3, #12]
 80085ca:	b14c      	cbz	r4, 80085e0 <__assert_func+0x24>
 80085cc:	4b07      	ldr	r3, [pc, #28]	; (80085ec <__assert_func+0x30>)
 80085ce:	9100      	str	r1, [sp, #0]
 80085d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085d4:	4906      	ldr	r1, [pc, #24]	; (80085f0 <__assert_func+0x34>)
 80085d6:	462b      	mov	r3, r5
 80085d8:	f000 f80e 	bl	80085f8 <fiprintf>
 80085dc:	f000 faac 	bl	8008b38 <abort>
 80085e0:	4b04      	ldr	r3, [pc, #16]	; (80085f4 <__assert_func+0x38>)
 80085e2:	461c      	mov	r4, r3
 80085e4:	e7f3      	b.n	80085ce <__assert_func+0x12>
 80085e6:	bf00      	nop
 80085e8:	20000074 	.word	0x20000074
 80085ec:	08009415 	.word	0x08009415
 80085f0:	08009422 	.word	0x08009422
 80085f4:	08009450 	.word	0x08009450

080085f8 <fiprintf>:
 80085f8:	b40e      	push	{r1, r2, r3}
 80085fa:	b503      	push	{r0, r1, lr}
 80085fc:	4601      	mov	r1, r0
 80085fe:	ab03      	add	r3, sp, #12
 8008600:	4805      	ldr	r0, [pc, #20]	; (8008618 <fiprintf+0x20>)
 8008602:	f853 2b04 	ldr.w	r2, [r3], #4
 8008606:	6800      	ldr	r0, [r0, #0]
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	f000 f897 	bl	800873c <_vfiprintf_r>
 800860e:	b002      	add	sp, #8
 8008610:	f85d eb04 	ldr.w	lr, [sp], #4
 8008614:	b003      	add	sp, #12
 8008616:	4770      	bx	lr
 8008618:	20000074 	.word	0x20000074

0800861c <__ascii_mbtowc>:
 800861c:	b082      	sub	sp, #8
 800861e:	b901      	cbnz	r1, 8008622 <__ascii_mbtowc+0x6>
 8008620:	a901      	add	r1, sp, #4
 8008622:	b142      	cbz	r2, 8008636 <__ascii_mbtowc+0x1a>
 8008624:	b14b      	cbz	r3, 800863a <__ascii_mbtowc+0x1e>
 8008626:	7813      	ldrb	r3, [r2, #0]
 8008628:	600b      	str	r3, [r1, #0]
 800862a:	7812      	ldrb	r2, [r2, #0]
 800862c:	1e10      	subs	r0, r2, #0
 800862e:	bf18      	it	ne
 8008630:	2001      	movne	r0, #1
 8008632:	b002      	add	sp, #8
 8008634:	4770      	bx	lr
 8008636:	4610      	mov	r0, r2
 8008638:	e7fb      	b.n	8008632 <__ascii_mbtowc+0x16>
 800863a:	f06f 0001 	mvn.w	r0, #1
 800863e:	e7f8      	b.n	8008632 <__ascii_mbtowc+0x16>

08008640 <memmove>:
 8008640:	4288      	cmp	r0, r1
 8008642:	b510      	push	{r4, lr}
 8008644:	eb01 0402 	add.w	r4, r1, r2
 8008648:	d902      	bls.n	8008650 <memmove+0x10>
 800864a:	4284      	cmp	r4, r0
 800864c:	4623      	mov	r3, r4
 800864e:	d807      	bhi.n	8008660 <memmove+0x20>
 8008650:	1e43      	subs	r3, r0, #1
 8008652:	42a1      	cmp	r1, r4
 8008654:	d008      	beq.n	8008668 <memmove+0x28>
 8008656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800865a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800865e:	e7f8      	b.n	8008652 <memmove+0x12>
 8008660:	4402      	add	r2, r0
 8008662:	4601      	mov	r1, r0
 8008664:	428a      	cmp	r2, r1
 8008666:	d100      	bne.n	800866a <memmove+0x2a>
 8008668:	bd10      	pop	{r4, pc}
 800866a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800866e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008672:	e7f7      	b.n	8008664 <memmove+0x24>

08008674 <__malloc_lock>:
 8008674:	4801      	ldr	r0, [pc, #4]	; (800867c <__malloc_lock+0x8>)
 8008676:	f000 bc1f 	b.w	8008eb8 <__retarget_lock_acquire_recursive>
 800867a:	bf00      	nop
 800867c:	200003f8 	.word	0x200003f8

08008680 <__malloc_unlock>:
 8008680:	4801      	ldr	r0, [pc, #4]	; (8008688 <__malloc_unlock+0x8>)
 8008682:	f000 bc1a 	b.w	8008eba <__retarget_lock_release_recursive>
 8008686:	bf00      	nop
 8008688:	200003f8 	.word	0x200003f8

0800868c <_realloc_r>:
 800868c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008690:	4680      	mov	r8, r0
 8008692:	4614      	mov	r4, r2
 8008694:	460e      	mov	r6, r1
 8008696:	b921      	cbnz	r1, 80086a2 <_realloc_r+0x16>
 8008698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800869c:	4611      	mov	r1, r2
 800869e:	f7ff bdad 	b.w	80081fc <_malloc_r>
 80086a2:	b92a      	cbnz	r2, 80086b0 <_realloc_r+0x24>
 80086a4:	f7ff fd3e 	bl	8008124 <_free_r>
 80086a8:	4625      	mov	r5, r4
 80086aa:	4628      	mov	r0, r5
 80086ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086b0:	f000 fc6a 	bl	8008f88 <_malloc_usable_size_r>
 80086b4:	4284      	cmp	r4, r0
 80086b6:	4607      	mov	r7, r0
 80086b8:	d802      	bhi.n	80086c0 <_realloc_r+0x34>
 80086ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086be:	d812      	bhi.n	80086e6 <_realloc_r+0x5a>
 80086c0:	4621      	mov	r1, r4
 80086c2:	4640      	mov	r0, r8
 80086c4:	f7ff fd9a 	bl	80081fc <_malloc_r>
 80086c8:	4605      	mov	r5, r0
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d0ed      	beq.n	80086aa <_realloc_r+0x1e>
 80086ce:	42bc      	cmp	r4, r7
 80086d0:	4622      	mov	r2, r4
 80086d2:	4631      	mov	r1, r6
 80086d4:	bf28      	it	cs
 80086d6:	463a      	movcs	r2, r7
 80086d8:	f7ff f97c 	bl	80079d4 <memcpy>
 80086dc:	4631      	mov	r1, r6
 80086de:	4640      	mov	r0, r8
 80086e0:	f7ff fd20 	bl	8008124 <_free_r>
 80086e4:	e7e1      	b.n	80086aa <_realloc_r+0x1e>
 80086e6:	4635      	mov	r5, r6
 80086e8:	e7df      	b.n	80086aa <_realloc_r+0x1e>

080086ea <__sfputc_r>:
 80086ea:	6893      	ldr	r3, [r2, #8]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	b410      	push	{r4}
 80086f2:	6093      	str	r3, [r2, #8]
 80086f4:	da08      	bge.n	8008708 <__sfputc_r+0x1e>
 80086f6:	6994      	ldr	r4, [r2, #24]
 80086f8:	42a3      	cmp	r3, r4
 80086fa:	db01      	blt.n	8008700 <__sfputc_r+0x16>
 80086fc:	290a      	cmp	r1, #10
 80086fe:	d103      	bne.n	8008708 <__sfputc_r+0x1e>
 8008700:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008704:	f000 b94a 	b.w	800899c <__swbuf_r>
 8008708:	6813      	ldr	r3, [r2, #0]
 800870a:	1c58      	adds	r0, r3, #1
 800870c:	6010      	str	r0, [r2, #0]
 800870e:	7019      	strb	r1, [r3, #0]
 8008710:	4608      	mov	r0, r1
 8008712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008716:	4770      	bx	lr

08008718 <__sfputs_r>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	4606      	mov	r6, r0
 800871c:	460f      	mov	r7, r1
 800871e:	4614      	mov	r4, r2
 8008720:	18d5      	adds	r5, r2, r3
 8008722:	42ac      	cmp	r4, r5
 8008724:	d101      	bne.n	800872a <__sfputs_r+0x12>
 8008726:	2000      	movs	r0, #0
 8008728:	e007      	b.n	800873a <__sfputs_r+0x22>
 800872a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800872e:	463a      	mov	r2, r7
 8008730:	4630      	mov	r0, r6
 8008732:	f7ff ffda 	bl	80086ea <__sfputc_r>
 8008736:	1c43      	adds	r3, r0, #1
 8008738:	d1f3      	bne.n	8008722 <__sfputs_r+0xa>
 800873a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800873c <_vfiprintf_r>:
 800873c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008740:	460d      	mov	r5, r1
 8008742:	b09d      	sub	sp, #116	; 0x74
 8008744:	4614      	mov	r4, r2
 8008746:	4698      	mov	r8, r3
 8008748:	4606      	mov	r6, r0
 800874a:	b118      	cbz	r0, 8008754 <_vfiprintf_r+0x18>
 800874c:	6983      	ldr	r3, [r0, #24]
 800874e:	b90b      	cbnz	r3, 8008754 <_vfiprintf_r+0x18>
 8008750:	f000 fb14 	bl	8008d7c <__sinit>
 8008754:	4b89      	ldr	r3, [pc, #548]	; (800897c <_vfiprintf_r+0x240>)
 8008756:	429d      	cmp	r5, r3
 8008758:	d11b      	bne.n	8008792 <_vfiprintf_r+0x56>
 800875a:	6875      	ldr	r5, [r6, #4]
 800875c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800875e:	07d9      	lsls	r1, r3, #31
 8008760:	d405      	bmi.n	800876e <_vfiprintf_r+0x32>
 8008762:	89ab      	ldrh	r3, [r5, #12]
 8008764:	059a      	lsls	r2, r3, #22
 8008766:	d402      	bmi.n	800876e <_vfiprintf_r+0x32>
 8008768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800876a:	f000 fba5 	bl	8008eb8 <__retarget_lock_acquire_recursive>
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	071b      	lsls	r3, r3, #28
 8008772:	d501      	bpl.n	8008778 <_vfiprintf_r+0x3c>
 8008774:	692b      	ldr	r3, [r5, #16]
 8008776:	b9eb      	cbnz	r3, 80087b4 <_vfiprintf_r+0x78>
 8008778:	4629      	mov	r1, r5
 800877a:	4630      	mov	r0, r6
 800877c:	f000 f96e 	bl	8008a5c <__swsetup_r>
 8008780:	b1c0      	cbz	r0, 80087b4 <_vfiprintf_r+0x78>
 8008782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008784:	07dc      	lsls	r4, r3, #31
 8008786:	d50e      	bpl.n	80087a6 <_vfiprintf_r+0x6a>
 8008788:	f04f 30ff 	mov.w	r0, #4294967295
 800878c:	b01d      	add	sp, #116	; 0x74
 800878e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008792:	4b7b      	ldr	r3, [pc, #492]	; (8008980 <_vfiprintf_r+0x244>)
 8008794:	429d      	cmp	r5, r3
 8008796:	d101      	bne.n	800879c <_vfiprintf_r+0x60>
 8008798:	68b5      	ldr	r5, [r6, #8]
 800879a:	e7df      	b.n	800875c <_vfiprintf_r+0x20>
 800879c:	4b79      	ldr	r3, [pc, #484]	; (8008984 <_vfiprintf_r+0x248>)
 800879e:	429d      	cmp	r5, r3
 80087a0:	bf08      	it	eq
 80087a2:	68f5      	ldreq	r5, [r6, #12]
 80087a4:	e7da      	b.n	800875c <_vfiprintf_r+0x20>
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	0598      	lsls	r0, r3, #22
 80087aa:	d4ed      	bmi.n	8008788 <_vfiprintf_r+0x4c>
 80087ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ae:	f000 fb84 	bl	8008eba <__retarget_lock_release_recursive>
 80087b2:	e7e9      	b.n	8008788 <_vfiprintf_r+0x4c>
 80087b4:	2300      	movs	r3, #0
 80087b6:	9309      	str	r3, [sp, #36]	; 0x24
 80087b8:	2320      	movs	r3, #32
 80087ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087be:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c2:	2330      	movs	r3, #48	; 0x30
 80087c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008988 <_vfiprintf_r+0x24c>
 80087c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087cc:	f04f 0901 	mov.w	r9, #1
 80087d0:	4623      	mov	r3, r4
 80087d2:	469a      	mov	sl, r3
 80087d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087d8:	b10a      	cbz	r2, 80087de <_vfiprintf_r+0xa2>
 80087da:	2a25      	cmp	r2, #37	; 0x25
 80087dc:	d1f9      	bne.n	80087d2 <_vfiprintf_r+0x96>
 80087de:	ebba 0b04 	subs.w	fp, sl, r4
 80087e2:	d00b      	beq.n	80087fc <_vfiprintf_r+0xc0>
 80087e4:	465b      	mov	r3, fp
 80087e6:	4622      	mov	r2, r4
 80087e8:	4629      	mov	r1, r5
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7ff ff94 	bl	8008718 <__sfputs_r>
 80087f0:	3001      	adds	r0, #1
 80087f2:	f000 80aa 	beq.w	800894a <_vfiprintf_r+0x20e>
 80087f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087f8:	445a      	add	r2, fp
 80087fa:	9209      	str	r2, [sp, #36]	; 0x24
 80087fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 80a2 	beq.w	800894a <_vfiprintf_r+0x20e>
 8008806:	2300      	movs	r3, #0
 8008808:	f04f 32ff 	mov.w	r2, #4294967295
 800880c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008810:	f10a 0a01 	add.w	sl, sl, #1
 8008814:	9304      	str	r3, [sp, #16]
 8008816:	9307      	str	r3, [sp, #28]
 8008818:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800881c:	931a      	str	r3, [sp, #104]	; 0x68
 800881e:	4654      	mov	r4, sl
 8008820:	2205      	movs	r2, #5
 8008822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008826:	4858      	ldr	r0, [pc, #352]	; (8008988 <_vfiprintf_r+0x24c>)
 8008828:	f7f7 fcfa 	bl	8000220 <memchr>
 800882c:	9a04      	ldr	r2, [sp, #16]
 800882e:	b9d8      	cbnz	r0, 8008868 <_vfiprintf_r+0x12c>
 8008830:	06d1      	lsls	r1, r2, #27
 8008832:	bf44      	itt	mi
 8008834:	2320      	movmi	r3, #32
 8008836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800883a:	0713      	lsls	r3, r2, #28
 800883c:	bf44      	itt	mi
 800883e:	232b      	movmi	r3, #43	; 0x2b
 8008840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008844:	f89a 3000 	ldrb.w	r3, [sl]
 8008848:	2b2a      	cmp	r3, #42	; 0x2a
 800884a:	d015      	beq.n	8008878 <_vfiprintf_r+0x13c>
 800884c:	9a07      	ldr	r2, [sp, #28]
 800884e:	4654      	mov	r4, sl
 8008850:	2000      	movs	r0, #0
 8008852:	f04f 0c0a 	mov.w	ip, #10
 8008856:	4621      	mov	r1, r4
 8008858:	f811 3b01 	ldrb.w	r3, [r1], #1
 800885c:	3b30      	subs	r3, #48	; 0x30
 800885e:	2b09      	cmp	r3, #9
 8008860:	d94e      	bls.n	8008900 <_vfiprintf_r+0x1c4>
 8008862:	b1b0      	cbz	r0, 8008892 <_vfiprintf_r+0x156>
 8008864:	9207      	str	r2, [sp, #28]
 8008866:	e014      	b.n	8008892 <_vfiprintf_r+0x156>
 8008868:	eba0 0308 	sub.w	r3, r0, r8
 800886c:	fa09 f303 	lsl.w	r3, r9, r3
 8008870:	4313      	orrs	r3, r2
 8008872:	9304      	str	r3, [sp, #16]
 8008874:	46a2      	mov	sl, r4
 8008876:	e7d2      	b.n	800881e <_vfiprintf_r+0xe2>
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	1d19      	adds	r1, r3, #4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	9103      	str	r1, [sp, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	bfbb      	ittet	lt
 8008884:	425b      	neglt	r3, r3
 8008886:	f042 0202 	orrlt.w	r2, r2, #2
 800888a:	9307      	strge	r3, [sp, #28]
 800888c:	9307      	strlt	r3, [sp, #28]
 800888e:	bfb8      	it	lt
 8008890:	9204      	strlt	r2, [sp, #16]
 8008892:	7823      	ldrb	r3, [r4, #0]
 8008894:	2b2e      	cmp	r3, #46	; 0x2e
 8008896:	d10c      	bne.n	80088b2 <_vfiprintf_r+0x176>
 8008898:	7863      	ldrb	r3, [r4, #1]
 800889a:	2b2a      	cmp	r3, #42	; 0x2a
 800889c:	d135      	bne.n	800890a <_vfiprintf_r+0x1ce>
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	1d1a      	adds	r2, r3, #4
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	9203      	str	r2, [sp, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	bfb8      	it	lt
 80088aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80088ae:	3402      	adds	r4, #2
 80088b0:	9305      	str	r3, [sp, #20]
 80088b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008998 <_vfiprintf_r+0x25c>
 80088b6:	7821      	ldrb	r1, [r4, #0]
 80088b8:	2203      	movs	r2, #3
 80088ba:	4650      	mov	r0, sl
 80088bc:	f7f7 fcb0 	bl	8000220 <memchr>
 80088c0:	b140      	cbz	r0, 80088d4 <_vfiprintf_r+0x198>
 80088c2:	2340      	movs	r3, #64	; 0x40
 80088c4:	eba0 000a 	sub.w	r0, r0, sl
 80088c8:	fa03 f000 	lsl.w	r0, r3, r0
 80088cc:	9b04      	ldr	r3, [sp, #16]
 80088ce:	4303      	orrs	r3, r0
 80088d0:	3401      	adds	r4, #1
 80088d2:	9304      	str	r3, [sp, #16]
 80088d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d8:	482c      	ldr	r0, [pc, #176]	; (800898c <_vfiprintf_r+0x250>)
 80088da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088de:	2206      	movs	r2, #6
 80088e0:	f7f7 fc9e 	bl	8000220 <memchr>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d03f      	beq.n	8008968 <_vfiprintf_r+0x22c>
 80088e8:	4b29      	ldr	r3, [pc, #164]	; (8008990 <_vfiprintf_r+0x254>)
 80088ea:	bb1b      	cbnz	r3, 8008934 <_vfiprintf_r+0x1f8>
 80088ec:	9b03      	ldr	r3, [sp, #12]
 80088ee:	3307      	adds	r3, #7
 80088f0:	f023 0307 	bic.w	r3, r3, #7
 80088f4:	3308      	adds	r3, #8
 80088f6:	9303      	str	r3, [sp, #12]
 80088f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088fa:	443b      	add	r3, r7
 80088fc:	9309      	str	r3, [sp, #36]	; 0x24
 80088fe:	e767      	b.n	80087d0 <_vfiprintf_r+0x94>
 8008900:	fb0c 3202 	mla	r2, ip, r2, r3
 8008904:	460c      	mov	r4, r1
 8008906:	2001      	movs	r0, #1
 8008908:	e7a5      	b.n	8008856 <_vfiprintf_r+0x11a>
 800890a:	2300      	movs	r3, #0
 800890c:	3401      	adds	r4, #1
 800890e:	9305      	str	r3, [sp, #20]
 8008910:	4619      	mov	r1, r3
 8008912:	f04f 0c0a 	mov.w	ip, #10
 8008916:	4620      	mov	r0, r4
 8008918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800891c:	3a30      	subs	r2, #48	; 0x30
 800891e:	2a09      	cmp	r2, #9
 8008920:	d903      	bls.n	800892a <_vfiprintf_r+0x1ee>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0c5      	beq.n	80088b2 <_vfiprintf_r+0x176>
 8008926:	9105      	str	r1, [sp, #20]
 8008928:	e7c3      	b.n	80088b2 <_vfiprintf_r+0x176>
 800892a:	fb0c 2101 	mla	r1, ip, r1, r2
 800892e:	4604      	mov	r4, r0
 8008930:	2301      	movs	r3, #1
 8008932:	e7f0      	b.n	8008916 <_vfiprintf_r+0x1da>
 8008934:	ab03      	add	r3, sp, #12
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	462a      	mov	r2, r5
 800893a:	4b16      	ldr	r3, [pc, #88]	; (8008994 <_vfiprintf_r+0x258>)
 800893c:	a904      	add	r1, sp, #16
 800893e:	4630      	mov	r0, r6
 8008940:	f7fd fdd8 	bl	80064f4 <_printf_float>
 8008944:	4607      	mov	r7, r0
 8008946:	1c78      	adds	r0, r7, #1
 8008948:	d1d6      	bne.n	80088f8 <_vfiprintf_r+0x1bc>
 800894a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800894c:	07d9      	lsls	r1, r3, #31
 800894e:	d405      	bmi.n	800895c <_vfiprintf_r+0x220>
 8008950:	89ab      	ldrh	r3, [r5, #12]
 8008952:	059a      	lsls	r2, r3, #22
 8008954:	d402      	bmi.n	800895c <_vfiprintf_r+0x220>
 8008956:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008958:	f000 faaf 	bl	8008eba <__retarget_lock_release_recursive>
 800895c:	89ab      	ldrh	r3, [r5, #12]
 800895e:	065b      	lsls	r3, r3, #25
 8008960:	f53f af12 	bmi.w	8008788 <_vfiprintf_r+0x4c>
 8008964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008966:	e711      	b.n	800878c <_vfiprintf_r+0x50>
 8008968:	ab03      	add	r3, sp, #12
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	462a      	mov	r2, r5
 800896e:	4b09      	ldr	r3, [pc, #36]	; (8008994 <_vfiprintf_r+0x258>)
 8008970:	a904      	add	r1, sp, #16
 8008972:	4630      	mov	r0, r6
 8008974:	f7fe f862 	bl	8006a3c <_printf_i>
 8008978:	e7e4      	b.n	8008944 <_vfiprintf_r+0x208>
 800897a:	bf00      	nop
 800897c:	0800957c 	.word	0x0800957c
 8008980:	0800959c 	.word	0x0800959c
 8008984:	0800955c 	.word	0x0800955c
 8008988:	08009404 	.word	0x08009404
 800898c:	0800940e 	.word	0x0800940e
 8008990:	080064f5 	.word	0x080064f5
 8008994:	08008719 	.word	0x08008719
 8008998:	0800940a 	.word	0x0800940a

0800899c <__swbuf_r>:
 800899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899e:	460e      	mov	r6, r1
 80089a0:	4614      	mov	r4, r2
 80089a2:	4605      	mov	r5, r0
 80089a4:	b118      	cbz	r0, 80089ae <__swbuf_r+0x12>
 80089a6:	6983      	ldr	r3, [r0, #24]
 80089a8:	b90b      	cbnz	r3, 80089ae <__swbuf_r+0x12>
 80089aa:	f000 f9e7 	bl	8008d7c <__sinit>
 80089ae:	4b21      	ldr	r3, [pc, #132]	; (8008a34 <__swbuf_r+0x98>)
 80089b0:	429c      	cmp	r4, r3
 80089b2:	d12b      	bne.n	8008a0c <__swbuf_r+0x70>
 80089b4:	686c      	ldr	r4, [r5, #4]
 80089b6:	69a3      	ldr	r3, [r4, #24]
 80089b8:	60a3      	str	r3, [r4, #8]
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	071a      	lsls	r2, r3, #28
 80089be:	d52f      	bpl.n	8008a20 <__swbuf_r+0x84>
 80089c0:	6923      	ldr	r3, [r4, #16]
 80089c2:	b36b      	cbz	r3, 8008a20 <__swbuf_r+0x84>
 80089c4:	6923      	ldr	r3, [r4, #16]
 80089c6:	6820      	ldr	r0, [r4, #0]
 80089c8:	1ac0      	subs	r0, r0, r3
 80089ca:	6963      	ldr	r3, [r4, #20]
 80089cc:	b2f6      	uxtb	r6, r6
 80089ce:	4283      	cmp	r3, r0
 80089d0:	4637      	mov	r7, r6
 80089d2:	dc04      	bgt.n	80089de <__swbuf_r+0x42>
 80089d4:	4621      	mov	r1, r4
 80089d6:	4628      	mov	r0, r5
 80089d8:	f000 f93c 	bl	8008c54 <_fflush_r>
 80089dc:	bb30      	cbnz	r0, 8008a2c <__swbuf_r+0x90>
 80089de:	68a3      	ldr	r3, [r4, #8]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	60a3      	str	r3, [r4, #8]
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	1c5a      	adds	r2, r3, #1
 80089e8:	6022      	str	r2, [r4, #0]
 80089ea:	701e      	strb	r6, [r3, #0]
 80089ec:	6963      	ldr	r3, [r4, #20]
 80089ee:	3001      	adds	r0, #1
 80089f0:	4283      	cmp	r3, r0
 80089f2:	d004      	beq.n	80089fe <__swbuf_r+0x62>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	07db      	lsls	r3, r3, #31
 80089f8:	d506      	bpl.n	8008a08 <__swbuf_r+0x6c>
 80089fa:	2e0a      	cmp	r6, #10
 80089fc:	d104      	bne.n	8008a08 <__swbuf_r+0x6c>
 80089fe:	4621      	mov	r1, r4
 8008a00:	4628      	mov	r0, r5
 8008a02:	f000 f927 	bl	8008c54 <_fflush_r>
 8008a06:	b988      	cbnz	r0, 8008a2c <__swbuf_r+0x90>
 8008a08:	4638      	mov	r0, r7
 8008a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a0c:	4b0a      	ldr	r3, [pc, #40]	; (8008a38 <__swbuf_r+0x9c>)
 8008a0e:	429c      	cmp	r4, r3
 8008a10:	d101      	bne.n	8008a16 <__swbuf_r+0x7a>
 8008a12:	68ac      	ldr	r4, [r5, #8]
 8008a14:	e7cf      	b.n	80089b6 <__swbuf_r+0x1a>
 8008a16:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <__swbuf_r+0xa0>)
 8008a18:	429c      	cmp	r4, r3
 8008a1a:	bf08      	it	eq
 8008a1c:	68ec      	ldreq	r4, [r5, #12]
 8008a1e:	e7ca      	b.n	80089b6 <__swbuf_r+0x1a>
 8008a20:	4621      	mov	r1, r4
 8008a22:	4628      	mov	r0, r5
 8008a24:	f000 f81a 	bl	8008a5c <__swsetup_r>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d0cb      	beq.n	80089c4 <__swbuf_r+0x28>
 8008a2c:	f04f 37ff 	mov.w	r7, #4294967295
 8008a30:	e7ea      	b.n	8008a08 <__swbuf_r+0x6c>
 8008a32:	bf00      	nop
 8008a34:	0800957c 	.word	0x0800957c
 8008a38:	0800959c 	.word	0x0800959c
 8008a3c:	0800955c 	.word	0x0800955c

08008a40 <__ascii_wctomb>:
 8008a40:	b149      	cbz	r1, 8008a56 <__ascii_wctomb+0x16>
 8008a42:	2aff      	cmp	r2, #255	; 0xff
 8008a44:	bf85      	ittet	hi
 8008a46:	238a      	movhi	r3, #138	; 0x8a
 8008a48:	6003      	strhi	r3, [r0, #0]
 8008a4a:	700a      	strbls	r2, [r1, #0]
 8008a4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a50:	bf98      	it	ls
 8008a52:	2001      	movls	r0, #1
 8008a54:	4770      	bx	lr
 8008a56:	4608      	mov	r0, r1
 8008a58:	4770      	bx	lr
	...

08008a5c <__swsetup_r>:
 8008a5c:	4b32      	ldr	r3, [pc, #200]	; (8008b28 <__swsetup_r+0xcc>)
 8008a5e:	b570      	push	{r4, r5, r6, lr}
 8008a60:	681d      	ldr	r5, [r3, #0]
 8008a62:	4606      	mov	r6, r0
 8008a64:	460c      	mov	r4, r1
 8008a66:	b125      	cbz	r5, 8008a72 <__swsetup_r+0x16>
 8008a68:	69ab      	ldr	r3, [r5, #24]
 8008a6a:	b913      	cbnz	r3, 8008a72 <__swsetup_r+0x16>
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	f000 f985 	bl	8008d7c <__sinit>
 8008a72:	4b2e      	ldr	r3, [pc, #184]	; (8008b2c <__swsetup_r+0xd0>)
 8008a74:	429c      	cmp	r4, r3
 8008a76:	d10f      	bne.n	8008a98 <__swsetup_r+0x3c>
 8008a78:	686c      	ldr	r4, [r5, #4]
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a80:	0719      	lsls	r1, r3, #28
 8008a82:	d42c      	bmi.n	8008ade <__swsetup_r+0x82>
 8008a84:	06dd      	lsls	r5, r3, #27
 8008a86:	d411      	bmi.n	8008aac <__swsetup_r+0x50>
 8008a88:	2309      	movs	r3, #9
 8008a8a:	6033      	str	r3, [r6, #0]
 8008a8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a90:	81a3      	strh	r3, [r4, #12]
 8008a92:	f04f 30ff 	mov.w	r0, #4294967295
 8008a96:	e03e      	b.n	8008b16 <__swsetup_r+0xba>
 8008a98:	4b25      	ldr	r3, [pc, #148]	; (8008b30 <__swsetup_r+0xd4>)
 8008a9a:	429c      	cmp	r4, r3
 8008a9c:	d101      	bne.n	8008aa2 <__swsetup_r+0x46>
 8008a9e:	68ac      	ldr	r4, [r5, #8]
 8008aa0:	e7eb      	b.n	8008a7a <__swsetup_r+0x1e>
 8008aa2:	4b24      	ldr	r3, [pc, #144]	; (8008b34 <__swsetup_r+0xd8>)
 8008aa4:	429c      	cmp	r4, r3
 8008aa6:	bf08      	it	eq
 8008aa8:	68ec      	ldreq	r4, [r5, #12]
 8008aaa:	e7e6      	b.n	8008a7a <__swsetup_r+0x1e>
 8008aac:	0758      	lsls	r0, r3, #29
 8008aae:	d512      	bpl.n	8008ad6 <__swsetup_r+0x7a>
 8008ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ab2:	b141      	cbz	r1, 8008ac6 <__swsetup_r+0x6a>
 8008ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ab8:	4299      	cmp	r1, r3
 8008aba:	d002      	beq.n	8008ac2 <__swsetup_r+0x66>
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7ff fb31 	bl	8008124 <_free_r>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008acc:	81a3      	strh	r3, [r4, #12]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	6063      	str	r3, [r4, #4]
 8008ad2:	6923      	ldr	r3, [r4, #16]
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	89a3      	ldrh	r3, [r4, #12]
 8008ad8:	f043 0308 	orr.w	r3, r3, #8
 8008adc:	81a3      	strh	r3, [r4, #12]
 8008ade:	6923      	ldr	r3, [r4, #16]
 8008ae0:	b94b      	cbnz	r3, 8008af6 <__swsetup_r+0x9a>
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aec:	d003      	beq.n	8008af6 <__swsetup_r+0x9a>
 8008aee:	4621      	mov	r1, r4
 8008af0:	4630      	mov	r0, r6
 8008af2:	f000 fa09 	bl	8008f08 <__smakebuf_r>
 8008af6:	89a0      	ldrh	r0, [r4, #12]
 8008af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008afc:	f010 0301 	ands.w	r3, r0, #1
 8008b00:	d00a      	beq.n	8008b18 <__swsetup_r+0xbc>
 8008b02:	2300      	movs	r3, #0
 8008b04:	60a3      	str	r3, [r4, #8]
 8008b06:	6963      	ldr	r3, [r4, #20]
 8008b08:	425b      	negs	r3, r3
 8008b0a:	61a3      	str	r3, [r4, #24]
 8008b0c:	6923      	ldr	r3, [r4, #16]
 8008b0e:	b943      	cbnz	r3, 8008b22 <__swsetup_r+0xc6>
 8008b10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b14:	d1ba      	bne.n	8008a8c <__swsetup_r+0x30>
 8008b16:	bd70      	pop	{r4, r5, r6, pc}
 8008b18:	0781      	lsls	r1, r0, #30
 8008b1a:	bf58      	it	pl
 8008b1c:	6963      	ldrpl	r3, [r4, #20]
 8008b1e:	60a3      	str	r3, [r4, #8]
 8008b20:	e7f4      	b.n	8008b0c <__swsetup_r+0xb0>
 8008b22:	2000      	movs	r0, #0
 8008b24:	e7f7      	b.n	8008b16 <__swsetup_r+0xba>
 8008b26:	bf00      	nop
 8008b28:	20000074 	.word	0x20000074
 8008b2c:	0800957c 	.word	0x0800957c
 8008b30:	0800959c 	.word	0x0800959c
 8008b34:	0800955c 	.word	0x0800955c

08008b38 <abort>:
 8008b38:	b508      	push	{r3, lr}
 8008b3a:	2006      	movs	r0, #6
 8008b3c:	f000 fa54 	bl	8008fe8 <raise>
 8008b40:	2001      	movs	r0, #1
 8008b42:	f7f9 f819 	bl	8001b78 <_exit>
	...

08008b48 <__sflush_r>:
 8008b48:	898a      	ldrh	r2, [r1, #12]
 8008b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4e:	4605      	mov	r5, r0
 8008b50:	0710      	lsls	r0, r2, #28
 8008b52:	460c      	mov	r4, r1
 8008b54:	d458      	bmi.n	8008c08 <__sflush_r+0xc0>
 8008b56:	684b      	ldr	r3, [r1, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	dc05      	bgt.n	8008b68 <__sflush_r+0x20>
 8008b5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	dc02      	bgt.n	8008b68 <__sflush_r+0x20>
 8008b62:	2000      	movs	r0, #0
 8008b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b6a:	2e00      	cmp	r6, #0
 8008b6c:	d0f9      	beq.n	8008b62 <__sflush_r+0x1a>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b74:	682f      	ldr	r7, [r5, #0]
 8008b76:	602b      	str	r3, [r5, #0]
 8008b78:	d032      	beq.n	8008be0 <__sflush_r+0x98>
 8008b7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b7c:	89a3      	ldrh	r3, [r4, #12]
 8008b7e:	075a      	lsls	r2, r3, #29
 8008b80:	d505      	bpl.n	8008b8e <__sflush_r+0x46>
 8008b82:	6863      	ldr	r3, [r4, #4]
 8008b84:	1ac0      	subs	r0, r0, r3
 8008b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b88:	b10b      	cbz	r3, 8008b8e <__sflush_r+0x46>
 8008b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b8c:	1ac0      	subs	r0, r0, r3
 8008b8e:	2300      	movs	r3, #0
 8008b90:	4602      	mov	r2, r0
 8008b92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b94:	6a21      	ldr	r1, [r4, #32]
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b0      	blx	r6
 8008b9a:	1c43      	adds	r3, r0, #1
 8008b9c:	89a3      	ldrh	r3, [r4, #12]
 8008b9e:	d106      	bne.n	8008bae <__sflush_r+0x66>
 8008ba0:	6829      	ldr	r1, [r5, #0]
 8008ba2:	291d      	cmp	r1, #29
 8008ba4:	d82c      	bhi.n	8008c00 <__sflush_r+0xb8>
 8008ba6:	4a2a      	ldr	r2, [pc, #168]	; (8008c50 <__sflush_r+0x108>)
 8008ba8:	40ca      	lsrs	r2, r1
 8008baa:	07d6      	lsls	r6, r2, #31
 8008bac:	d528      	bpl.n	8008c00 <__sflush_r+0xb8>
 8008bae:	2200      	movs	r2, #0
 8008bb0:	6062      	str	r2, [r4, #4]
 8008bb2:	04d9      	lsls	r1, r3, #19
 8008bb4:	6922      	ldr	r2, [r4, #16]
 8008bb6:	6022      	str	r2, [r4, #0]
 8008bb8:	d504      	bpl.n	8008bc4 <__sflush_r+0x7c>
 8008bba:	1c42      	adds	r2, r0, #1
 8008bbc:	d101      	bne.n	8008bc2 <__sflush_r+0x7a>
 8008bbe:	682b      	ldr	r3, [r5, #0]
 8008bc0:	b903      	cbnz	r3, 8008bc4 <__sflush_r+0x7c>
 8008bc2:	6560      	str	r0, [r4, #84]	; 0x54
 8008bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bc6:	602f      	str	r7, [r5, #0]
 8008bc8:	2900      	cmp	r1, #0
 8008bca:	d0ca      	beq.n	8008b62 <__sflush_r+0x1a>
 8008bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bd0:	4299      	cmp	r1, r3
 8008bd2:	d002      	beq.n	8008bda <__sflush_r+0x92>
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	f7ff faa5 	bl	8008124 <_free_r>
 8008bda:	2000      	movs	r0, #0
 8008bdc:	6360      	str	r0, [r4, #52]	; 0x34
 8008bde:	e7c1      	b.n	8008b64 <__sflush_r+0x1c>
 8008be0:	6a21      	ldr	r1, [r4, #32]
 8008be2:	2301      	movs	r3, #1
 8008be4:	4628      	mov	r0, r5
 8008be6:	47b0      	blx	r6
 8008be8:	1c41      	adds	r1, r0, #1
 8008bea:	d1c7      	bne.n	8008b7c <__sflush_r+0x34>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0c4      	beq.n	8008b7c <__sflush_r+0x34>
 8008bf2:	2b1d      	cmp	r3, #29
 8008bf4:	d001      	beq.n	8008bfa <__sflush_r+0xb2>
 8008bf6:	2b16      	cmp	r3, #22
 8008bf8:	d101      	bne.n	8008bfe <__sflush_r+0xb6>
 8008bfa:	602f      	str	r7, [r5, #0]
 8008bfc:	e7b1      	b.n	8008b62 <__sflush_r+0x1a>
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c04:	81a3      	strh	r3, [r4, #12]
 8008c06:	e7ad      	b.n	8008b64 <__sflush_r+0x1c>
 8008c08:	690f      	ldr	r7, [r1, #16]
 8008c0a:	2f00      	cmp	r7, #0
 8008c0c:	d0a9      	beq.n	8008b62 <__sflush_r+0x1a>
 8008c0e:	0793      	lsls	r3, r2, #30
 8008c10:	680e      	ldr	r6, [r1, #0]
 8008c12:	bf08      	it	eq
 8008c14:	694b      	ldreq	r3, [r1, #20]
 8008c16:	600f      	str	r7, [r1, #0]
 8008c18:	bf18      	it	ne
 8008c1a:	2300      	movne	r3, #0
 8008c1c:	eba6 0807 	sub.w	r8, r6, r7
 8008c20:	608b      	str	r3, [r1, #8]
 8008c22:	f1b8 0f00 	cmp.w	r8, #0
 8008c26:	dd9c      	ble.n	8008b62 <__sflush_r+0x1a>
 8008c28:	6a21      	ldr	r1, [r4, #32]
 8008c2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c2c:	4643      	mov	r3, r8
 8008c2e:	463a      	mov	r2, r7
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b0      	blx	r6
 8008c34:	2800      	cmp	r0, #0
 8008c36:	dc06      	bgt.n	8008c46 <__sflush_r+0xfe>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	f04f 30ff 	mov.w	r0, #4294967295
 8008c44:	e78e      	b.n	8008b64 <__sflush_r+0x1c>
 8008c46:	4407      	add	r7, r0
 8008c48:	eba8 0800 	sub.w	r8, r8, r0
 8008c4c:	e7e9      	b.n	8008c22 <__sflush_r+0xda>
 8008c4e:	bf00      	nop
 8008c50:	20400001 	.word	0x20400001

08008c54 <_fflush_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	690b      	ldr	r3, [r1, #16]
 8008c58:	4605      	mov	r5, r0
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	b913      	cbnz	r3, 8008c64 <_fflush_r+0x10>
 8008c5e:	2500      	movs	r5, #0
 8008c60:	4628      	mov	r0, r5
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	b118      	cbz	r0, 8008c6e <_fflush_r+0x1a>
 8008c66:	6983      	ldr	r3, [r0, #24]
 8008c68:	b90b      	cbnz	r3, 8008c6e <_fflush_r+0x1a>
 8008c6a:	f000 f887 	bl	8008d7c <__sinit>
 8008c6e:	4b14      	ldr	r3, [pc, #80]	; (8008cc0 <_fflush_r+0x6c>)
 8008c70:	429c      	cmp	r4, r3
 8008c72:	d11b      	bne.n	8008cac <_fflush_r+0x58>
 8008c74:	686c      	ldr	r4, [r5, #4]
 8008c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0ef      	beq.n	8008c5e <_fflush_r+0xa>
 8008c7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c80:	07d0      	lsls	r0, r2, #31
 8008c82:	d404      	bmi.n	8008c8e <_fflush_r+0x3a>
 8008c84:	0599      	lsls	r1, r3, #22
 8008c86:	d402      	bmi.n	8008c8e <_fflush_r+0x3a>
 8008c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c8a:	f000 f915 	bl	8008eb8 <__retarget_lock_acquire_recursive>
 8008c8e:	4628      	mov	r0, r5
 8008c90:	4621      	mov	r1, r4
 8008c92:	f7ff ff59 	bl	8008b48 <__sflush_r>
 8008c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c98:	07da      	lsls	r2, r3, #31
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	d4e0      	bmi.n	8008c60 <_fflush_r+0xc>
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	059b      	lsls	r3, r3, #22
 8008ca2:	d4dd      	bmi.n	8008c60 <_fflush_r+0xc>
 8008ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ca6:	f000 f908 	bl	8008eba <__retarget_lock_release_recursive>
 8008caa:	e7d9      	b.n	8008c60 <_fflush_r+0xc>
 8008cac:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <_fflush_r+0x70>)
 8008cae:	429c      	cmp	r4, r3
 8008cb0:	d101      	bne.n	8008cb6 <_fflush_r+0x62>
 8008cb2:	68ac      	ldr	r4, [r5, #8]
 8008cb4:	e7df      	b.n	8008c76 <_fflush_r+0x22>
 8008cb6:	4b04      	ldr	r3, [pc, #16]	; (8008cc8 <_fflush_r+0x74>)
 8008cb8:	429c      	cmp	r4, r3
 8008cba:	bf08      	it	eq
 8008cbc:	68ec      	ldreq	r4, [r5, #12]
 8008cbe:	e7da      	b.n	8008c76 <_fflush_r+0x22>
 8008cc0:	0800957c 	.word	0x0800957c
 8008cc4:	0800959c 	.word	0x0800959c
 8008cc8:	0800955c 	.word	0x0800955c

08008ccc <std>:
 8008ccc:	2300      	movs	r3, #0
 8008cce:	b510      	push	{r4, lr}
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8008cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cda:	6083      	str	r3, [r0, #8]
 8008cdc:	8181      	strh	r1, [r0, #12]
 8008cde:	6643      	str	r3, [r0, #100]	; 0x64
 8008ce0:	81c2      	strh	r2, [r0, #14]
 8008ce2:	6183      	str	r3, [r0, #24]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	2208      	movs	r2, #8
 8008ce8:	305c      	adds	r0, #92	; 0x5c
 8008cea:	f7fd fb5b 	bl	80063a4 <memset>
 8008cee:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <std+0x38>)
 8008cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8008cf2:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <std+0x3c>)
 8008cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cf6:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <std+0x40>)
 8008cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cfa:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <std+0x44>)
 8008cfc:	6224      	str	r4, [r4, #32]
 8008cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8008d00:	bd10      	pop	{r4, pc}
 8008d02:	bf00      	nop
 8008d04:	08009021 	.word	0x08009021
 8008d08:	08009043 	.word	0x08009043
 8008d0c:	0800907b 	.word	0x0800907b
 8008d10:	0800909f 	.word	0x0800909f

08008d14 <_cleanup_r>:
 8008d14:	4901      	ldr	r1, [pc, #4]	; (8008d1c <_cleanup_r+0x8>)
 8008d16:	f000 b8af 	b.w	8008e78 <_fwalk_reent>
 8008d1a:	bf00      	nop
 8008d1c:	08008c55 	.word	0x08008c55

08008d20 <__sfmoreglue>:
 8008d20:	b570      	push	{r4, r5, r6, lr}
 8008d22:	2268      	movs	r2, #104	; 0x68
 8008d24:	1e4d      	subs	r5, r1, #1
 8008d26:	4355      	muls	r5, r2
 8008d28:	460e      	mov	r6, r1
 8008d2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d2e:	f7ff fa65 	bl	80081fc <_malloc_r>
 8008d32:	4604      	mov	r4, r0
 8008d34:	b140      	cbz	r0, 8008d48 <__sfmoreglue+0x28>
 8008d36:	2100      	movs	r1, #0
 8008d38:	e9c0 1600 	strd	r1, r6, [r0]
 8008d3c:	300c      	adds	r0, #12
 8008d3e:	60a0      	str	r0, [r4, #8]
 8008d40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d44:	f7fd fb2e 	bl	80063a4 <memset>
 8008d48:	4620      	mov	r0, r4
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}

08008d4c <__sfp_lock_acquire>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	; (8008d54 <__sfp_lock_acquire+0x8>)
 8008d4e:	f000 b8b3 	b.w	8008eb8 <__retarget_lock_acquire_recursive>
 8008d52:	bf00      	nop
 8008d54:	200003f9 	.word	0x200003f9

08008d58 <__sfp_lock_release>:
 8008d58:	4801      	ldr	r0, [pc, #4]	; (8008d60 <__sfp_lock_release+0x8>)
 8008d5a:	f000 b8ae 	b.w	8008eba <__retarget_lock_release_recursive>
 8008d5e:	bf00      	nop
 8008d60:	200003f9 	.word	0x200003f9

08008d64 <__sinit_lock_acquire>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__sinit_lock_acquire+0x8>)
 8008d66:	f000 b8a7 	b.w	8008eb8 <__retarget_lock_acquire_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	200003fa 	.word	0x200003fa

08008d70 <__sinit_lock_release>:
 8008d70:	4801      	ldr	r0, [pc, #4]	; (8008d78 <__sinit_lock_release+0x8>)
 8008d72:	f000 b8a2 	b.w	8008eba <__retarget_lock_release_recursive>
 8008d76:	bf00      	nop
 8008d78:	200003fa 	.word	0x200003fa

08008d7c <__sinit>:
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	4604      	mov	r4, r0
 8008d80:	f7ff fff0 	bl	8008d64 <__sinit_lock_acquire>
 8008d84:	69a3      	ldr	r3, [r4, #24]
 8008d86:	b11b      	cbz	r3, 8008d90 <__sinit+0x14>
 8008d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d8c:	f7ff bff0 	b.w	8008d70 <__sinit_lock_release>
 8008d90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d94:	6523      	str	r3, [r4, #80]	; 0x50
 8008d96:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <__sinit+0x68>)
 8008d98:	4a13      	ldr	r2, [pc, #76]	; (8008de8 <__sinit+0x6c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d9e:	42a3      	cmp	r3, r4
 8008da0:	bf04      	itt	eq
 8008da2:	2301      	moveq	r3, #1
 8008da4:	61a3      	streq	r3, [r4, #24]
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 f820 	bl	8008dec <__sfp>
 8008dac:	6060      	str	r0, [r4, #4]
 8008dae:	4620      	mov	r0, r4
 8008db0:	f000 f81c 	bl	8008dec <__sfp>
 8008db4:	60a0      	str	r0, [r4, #8]
 8008db6:	4620      	mov	r0, r4
 8008db8:	f000 f818 	bl	8008dec <__sfp>
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	60e0      	str	r0, [r4, #12]
 8008dc0:	2104      	movs	r1, #4
 8008dc2:	6860      	ldr	r0, [r4, #4]
 8008dc4:	f7ff ff82 	bl	8008ccc <std>
 8008dc8:	68a0      	ldr	r0, [r4, #8]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	2109      	movs	r1, #9
 8008dce:	f7ff ff7d 	bl	8008ccc <std>
 8008dd2:	68e0      	ldr	r0, [r4, #12]
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	2112      	movs	r1, #18
 8008dd8:	f7ff ff78 	bl	8008ccc <std>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	61a3      	str	r3, [r4, #24]
 8008de0:	e7d2      	b.n	8008d88 <__sinit+0xc>
 8008de2:	bf00      	nop
 8008de4:	080091e4 	.word	0x080091e4
 8008de8:	08008d15 	.word	0x08008d15

08008dec <__sfp>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	4607      	mov	r7, r0
 8008df0:	f7ff ffac 	bl	8008d4c <__sfp_lock_acquire>
 8008df4:	4b1e      	ldr	r3, [pc, #120]	; (8008e70 <__sfp+0x84>)
 8008df6:	681e      	ldr	r6, [r3, #0]
 8008df8:	69b3      	ldr	r3, [r6, #24]
 8008dfa:	b913      	cbnz	r3, 8008e02 <__sfp+0x16>
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7ff ffbd 	bl	8008d7c <__sinit>
 8008e02:	3648      	adds	r6, #72	; 0x48
 8008e04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	d503      	bpl.n	8008e14 <__sfp+0x28>
 8008e0c:	6833      	ldr	r3, [r6, #0]
 8008e0e:	b30b      	cbz	r3, 8008e54 <__sfp+0x68>
 8008e10:	6836      	ldr	r6, [r6, #0]
 8008e12:	e7f7      	b.n	8008e04 <__sfp+0x18>
 8008e14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e18:	b9d5      	cbnz	r5, 8008e50 <__sfp+0x64>
 8008e1a:	4b16      	ldr	r3, [pc, #88]	; (8008e74 <__sfp+0x88>)
 8008e1c:	60e3      	str	r3, [r4, #12]
 8008e1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e22:	6665      	str	r5, [r4, #100]	; 0x64
 8008e24:	f000 f847 	bl	8008eb6 <__retarget_lock_init_recursive>
 8008e28:	f7ff ff96 	bl	8008d58 <__sfp_lock_release>
 8008e2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e34:	6025      	str	r5, [r4, #0]
 8008e36:	61a5      	str	r5, [r4, #24]
 8008e38:	2208      	movs	r2, #8
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e40:	f7fd fab0 	bl	80063a4 <memset>
 8008e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e50:	3468      	adds	r4, #104	; 0x68
 8008e52:	e7d9      	b.n	8008e08 <__sfp+0x1c>
 8008e54:	2104      	movs	r1, #4
 8008e56:	4638      	mov	r0, r7
 8008e58:	f7ff ff62 	bl	8008d20 <__sfmoreglue>
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	6030      	str	r0, [r6, #0]
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d1d5      	bne.n	8008e10 <__sfp+0x24>
 8008e64:	f7ff ff78 	bl	8008d58 <__sfp_lock_release>
 8008e68:	230c      	movs	r3, #12
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	e7ee      	b.n	8008e4c <__sfp+0x60>
 8008e6e:	bf00      	nop
 8008e70:	080091e4 	.word	0x080091e4
 8008e74:	ffff0001 	.word	0xffff0001

08008e78 <_fwalk_reent>:
 8008e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	4688      	mov	r8, r1
 8008e80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e84:	2700      	movs	r7, #0
 8008e86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e8a:	f1b9 0901 	subs.w	r9, r9, #1
 8008e8e:	d505      	bpl.n	8008e9c <_fwalk_reent+0x24>
 8008e90:	6824      	ldr	r4, [r4, #0]
 8008e92:	2c00      	cmp	r4, #0
 8008e94:	d1f7      	bne.n	8008e86 <_fwalk_reent+0xe>
 8008e96:	4638      	mov	r0, r7
 8008e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e9c:	89ab      	ldrh	r3, [r5, #12]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d907      	bls.n	8008eb2 <_fwalk_reent+0x3a>
 8008ea2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	d003      	beq.n	8008eb2 <_fwalk_reent+0x3a>
 8008eaa:	4629      	mov	r1, r5
 8008eac:	4630      	mov	r0, r6
 8008eae:	47c0      	blx	r8
 8008eb0:	4307      	orrs	r7, r0
 8008eb2:	3568      	adds	r5, #104	; 0x68
 8008eb4:	e7e9      	b.n	8008e8a <_fwalk_reent+0x12>

08008eb6 <__retarget_lock_init_recursive>:
 8008eb6:	4770      	bx	lr

08008eb8 <__retarget_lock_acquire_recursive>:
 8008eb8:	4770      	bx	lr

08008eba <__retarget_lock_release_recursive>:
 8008eba:	4770      	bx	lr

08008ebc <__swhatbuf_r>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	460e      	mov	r6, r1
 8008ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec4:	2900      	cmp	r1, #0
 8008ec6:	b096      	sub	sp, #88	; 0x58
 8008ec8:	4614      	mov	r4, r2
 8008eca:	461d      	mov	r5, r3
 8008ecc:	da08      	bge.n	8008ee0 <__swhatbuf_r+0x24>
 8008ece:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	602a      	str	r2, [r5, #0]
 8008ed6:	061a      	lsls	r2, r3, #24
 8008ed8:	d410      	bmi.n	8008efc <__swhatbuf_r+0x40>
 8008eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ede:	e00e      	b.n	8008efe <__swhatbuf_r+0x42>
 8008ee0:	466a      	mov	r2, sp
 8008ee2:	f000 f903 	bl	80090ec <_fstat_r>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	dbf1      	blt.n	8008ece <__swhatbuf_r+0x12>
 8008eea:	9a01      	ldr	r2, [sp, #4]
 8008eec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ef0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ef4:	425a      	negs	r2, r3
 8008ef6:	415a      	adcs	r2, r3
 8008ef8:	602a      	str	r2, [r5, #0]
 8008efa:	e7ee      	b.n	8008eda <__swhatbuf_r+0x1e>
 8008efc:	2340      	movs	r3, #64	; 0x40
 8008efe:	2000      	movs	r0, #0
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	b016      	add	sp, #88	; 0x58
 8008f04:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f08 <__smakebuf_r>:
 8008f08:	898b      	ldrh	r3, [r1, #12]
 8008f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f0c:	079d      	lsls	r5, r3, #30
 8008f0e:	4606      	mov	r6, r0
 8008f10:	460c      	mov	r4, r1
 8008f12:	d507      	bpl.n	8008f24 <__smakebuf_r+0x1c>
 8008f14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	6123      	str	r3, [r4, #16]
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	6163      	str	r3, [r4, #20]
 8008f20:	b002      	add	sp, #8
 8008f22:	bd70      	pop	{r4, r5, r6, pc}
 8008f24:	ab01      	add	r3, sp, #4
 8008f26:	466a      	mov	r2, sp
 8008f28:	f7ff ffc8 	bl	8008ebc <__swhatbuf_r>
 8008f2c:	9900      	ldr	r1, [sp, #0]
 8008f2e:	4605      	mov	r5, r0
 8008f30:	4630      	mov	r0, r6
 8008f32:	f7ff f963 	bl	80081fc <_malloc_r>
 8008f36:	b948      	cbnz	r0, 8008f4c <__smakebuf_r+0x44>
 8008f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f3c:	059a      	lsls	r2, r3, #22
 8008f3e:	d4ef      	bmi.n	8008f20 <__smakebuf_r+0x18>
 8008f40:	f023 0303 	bic.w	r3, r3, #3
 8008f44:	f043 0302 	orr.w	r3, r3, #2
 8008f48:	81a3      	strh	r3, [r4, #12]
 8008f4a:	e7e3      	b.n	8008f14 <__smakebuf_r+0xc>
 8008f4c:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <__smakebuf_r+0x7c>)
 8008f4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	6020      	str	r0, [r4, #0]
 8008f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f58:	81a3      	strh	r3, [r4, #12]
 8008f5a:	9b00      	ldr	r3, [sp, #0]
 8008f5c:	6163      	str	r3, [r4, #20]
 8008f5e:	9b01      	ldr	r3, [sp, #4]
 8008f60:	6120      	str	r0, [r4, #16]
 8008f62:	b15b      	cbz	r3, 8008f7c <__smakebuf_r+0x74>
 8008f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f000 f8d1 	bl	8009110 <_isatty_r>
 8008f6e:	b128      	cbz	r0, 8008f7c <__smakebuf_r+0x74>
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	f023 0303 	bic.w	r3, r3, #3
 8008f76:	f043 0301 	orr.w	r3, r3, #1
 8008f7a:	81a3      	strh	r3, [r4, #12]
 8008f7c:	89a0      	ldrh	r0, [r4, #12]
 8008f7e:	4305      	orrs	r5, r0
 8008f80:	81a5      	strh	r5, [r4, #12]
 8008f82:	e7cd      	b.n	8008f20 <__smakebuf_r+0x18>
 8008f84:	08008d15 	.word	0x08008d15

08008f88 <_malloc_usable_size_r>:
 8008f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f8c:	1f18      	subs	r0, r3, #4
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	bfbc      	itt	lt
 8008f92:	580b      	ldrlt	r3, [r1, r0]
 8008f94:	18c0      	addlt	r0, r0, r3
 8008f96:	4770      	bx	lr

08008f98 <_raise_r>:
 8008f98:	291f      	cmp	r1, #31
 8008f9a:	b538      	push	{r3, r4, r5, lr}
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	460d      	mov	r5, r1
 8008fa0:	d904      	bls.n	8008fac <_raise_r+0x14>
 8008fa2:	2316      	movs	r3, #22
 8008fa4:	6003      	str	r3, [r0, #0]
 8008fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8008faa:	bd38      	pop	{r3, r4, r5, pc}
 8008fac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008fae:	b112      	cbz	r2, 8008fb6 <_raise_r+0x1e>
 8008fb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fb4:	b94b      	cbnz	r3, 8008fca <_raise_r+0x32>
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 f830 	bl	800901c <_getpid_r>
 8008fbc:	462a      	mov	r2, r5
 8008fbe:	4601      	mov	r1, r0
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fc6:	f000 b817 	b.w	8008ff8 <_kill_r>
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d00a      	beq.n	8008fe4 <_raise_r+0x4c>
 8008fce:	1c59      	adds	r1, r3, #1
 8008fd0:	d103      	bne.n	8008fda <_raise_r+0x42>
 8008fd2:	2316      	movs	r3, #22
 8008fd4:	6003      	str	r3, [r0, #0]
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	e7e7      	b.n	8008faa <_raise_r+0x12>
 8008fda:	2400      	movs	r4, #0
 8008fdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	4798      	blx	r3
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	e7e0      	b.n	8008faa <_raise_r+0x12>

08008fe8 <raise>:
 8008fe8:	4b02      	ldr	r3, [pc, #8]	; (8008ff4 <raise+0xc>)
 8008fea:	4601      	mov	r1, r0
 8008fec:	6818      	ldr	r0, [r3, #0]
 8008fee:	f7ff bfd3 	b.w	8008f98 <_raise_r>
 8008ff2:	bf00      	nop
 8008ff4:	20000074 	.word	0x20000074

08008ff8 <_kill_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d07      	ldr	r5, [pc, #28]	; (8009018 <_kill_r+0x20>)
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4604      	mov	r4, r0
 8009000:	4608      	mov	r0, r1
 8009002:	4611      	mov	r1, r2
 8009004:	602b      	str	r3, [r5, #0]
 8009006:	f7f8 fda7 	bl	8001b58 <_kill>
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	d102      	bne.n	8009014 <_kill_r+0x1c>
 800900e:	682b      	ldr	r3, [r5, #0]
 8009010:	b103      	cbz	r3, 8009014 <_kill_r+0x1c>
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	bd38      	pop	{r3, r4, r5, pc}
 8009016:	bf00      	nop
 8009018:	200003f4 	.word	0x200003f4

0800901c <_getpid_r>:
 800901c:	f7f8 bd94 	b.w	8001b48 <_getpid>

08009020 <__sread>:
 8009020:	b510      	push	{r4, lr}
 8009022:	460c      	mov	r4, r1
 8009024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009028:	f000 f894 	bl	8009154 <_read_r>
 800902c:	2800      	cmp	r0, #0
 800902e:	bfab      	itete	ge
 8009030:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009032:	89a3      	ldrhlt	r3, [r4, #12]
 8009034:	181b      	addge	r3, r3, r0
 8009036:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800903a:	bfac      	ite	ge
 800903c:	6563      	strge	r3, [r4, #84]	; 0x54
 800903e:	81a3      	strhlt	r3, [r4, #12]
 8009040:	bd10      	pop	{r4, pc}

08009042 <__swrite>:
 8009042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009046:	461f      	mov	r7, r3
 8009048:	898b      	ldrh	r3, [r1, #12]
 800904a:	05db      	lsls	r3, r3, #23
 800904c:	4605      	mov	r5, r0
 800904e:	460c      	mov	r4, r1
 8009050:	4616      	mov	r6, r2
 8009052:	d505      	bpl.n	8009060 <__swrite+0x1e>
 8009054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009058:	2302      	movs	r3, #2
 800905a:	2200      	movs	r2, #0
 800905c:	f000 f868 	bl	8009130 <_lseek_r>
 8009060:	89a3      	ldrh	r3, [r4, #12]
 8009062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800906a:	81a3      	strh	r3, [r4, #12]
 800906c:	4632      	mov	r2, r6
 800906e:	463b      	mov	r3, r7
 8009070:	4628      	mov	r0, r5
 8009072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009076:	f000 b817 	b.w	80090a8 <_write_r>

0800907a <__sseek>:
 800907a:	b510      	push	{r4, lr}
 800907c:	460c      	mov	r4, r1
 800907e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009082:	f000 f855 	bl	8009130 <_lseek_r>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	89a3      	ldrh	r3, [r4, #12]
 800908a:	bf15      	itete	ne
 800908c:	6560      	strne	r0, [r4, #84]	; 0x54
 800908e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009096:	81a3      	strheq	r3, [r4, #12]
 8009098:	bf18      	it	ne
 800909a:	81a3      	strhne	r3, [r4, #12]
 800909c:	bd10      	pop	{r4, pc}

0800909e <__sclose>:
 800909e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a2:	f000 b813 	b.w	80090cc <_close_r>
	...

080090a8 <_write_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4d07      	ldr	r5, [pc, #28]	; (80090c8 <_write_r+0x20>)
 80090ac:	4604      	mov	r4, r0
 80090ae:	4608      	mov	r0, r1
 80090b0:	4611      	mov	r1, r2
 80090b2:	2200      	movs	r2, #0
 80090b4:	602a      	str	r2, [r5, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	f7f8 fd85 	bl	8001bc6 <_write>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	d102      	bne.n	80090c6 <_write_r+0x1e>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	b103      	cbz	r3, 80090c6 <_write_r+0x1e>
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	200003f4 	.word	0x200003f4

080090cc <_close_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	4d06      	ldr	r5, [pc, #24]	; (80090e8 <_close_r+0x1c>)
 80090d0:	2300      	movs	r3, #0
 80090d2:	4604      	mov	r4, r0
 80090d4:	4608      	mov	r0, r1
 80090d6:	602b      	str	r3, [r5, #0]
 80090d8:	f7f8 fd91 	bl	8001bfe <_close>
 80090dc:	1c43      	adds	r3, r0, #1
 80090de:	d102      	bne.n	80090e6 <_close_r+0x1a>
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	b103      	cbz	r3, 80090e6 <_close_r+0x1a>
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
 80090e8:	200003f4 	.word	0x200003f4

080090ec <_fstat_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d07      	ldr	r5, [pc, #28]	; (800910c <_fstat_r+0x20>)
 80090f0:	2300      	movs	r3, #0
 80090f2:	4604      	mov	r4, r0
 80090f4:	4608      	mov	r0, r1
 80090f6:	4611      	mov	r1, r2
 80090f8:	602b      	str	r3, [r5, #0]
 80090fa:	f7f8 fd8c 	bl	8001c16 <_fstat>
 80090fe:	1c43      	adds	r3, r0, #1
 8009100:	d102      	bne.n	8009108 <_fstat_r+0x1c>
 8009102:	682b      	ldr	r3, [r5, #0]
 8009104:	b103      	cbz	r3, 8009108 <_fstat_r+0x1c>
 8009106:	6023      	str	r3, [r4, #0]
 8009108:	bd38      	pop	{r3, r4, r5, pc}
 800910a:	bf00      	nop
 800910c:	200003f4 	.word	0x200003f4

08009110 <_isatty_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4d06      	ldr	r5, [pc, #24]	; (800912c <_isatty_r+0x1c>)
 8009114:	2300      	movs	r3, #0
 8009116:	4604      	mov	r4, r0
 8009118:	4608      	mov	r0, r1
 800911a:	602b      	str	r3, [r5, #0]
 800911c:	f7f8 fd8b 	bl	8001c36 <_isatty>
 8009120:	1c43      	adds	r3, r0, #1
 8009122:	d102      	bne.n	800912a <_isatty_r+0x1a>
 8009124:	682b      	ldr	r3, [r5, #0]
 8009126:	b103      	cbz	r3, 800912a <_isatty_r+0x1a>
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	bd38      	pop	{r3, r4, r5, pc}
 800912c:	200003f4 	.word	0x200003f4

08009130 <_lseek_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	4d07      	ldr	r5, [pc, #28]	; (8009150 <_lseek_r+0x20>)
 8009134:	4604      	mov	r4, r0
 8009136:	4608      	mov	r0, r1
 8009138:	4611      	mov	r1, r2
 800913a:	2200      	movs	r2, #0
 800913c:	602a      	str	r2, [r5, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	f7f8 fd84 	bl	8001c4c <_lseek>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	d102      	bne.n	800914e <_lseek_r+0x1e>
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	b103      	cbz	r3, 800914e <_lseek_r+0x1e>
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	bd38      	pop	{r3, r4, r5, pc}
 8009150:	200003f4 	.word	0x200003f4

08009154 <_read_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4d07      	ldr	r5, [pc, #28]	; (8009174 <_read_r+0x20>)
 8009158:	4604      	mov	r4, r0
 800915a:	4608      	mov	r0, r1
 800915c:	4611      	mov	r1, r2
 800915e:	2200      	movs	r2, #0
 8009160:	602a      	str	r2, [r5, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	f7f8 fd12 	bl	8001b8c <_read>
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	d102      	bne.n	8009172 <_read_r+0x1e>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	b103      	cbz	r3, 8009172 <_read_r+0x1e>
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	200003f4 	.word	0x200003f4

08009178 <_init>:
 8009178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917a:	bf00      	nop
 800917c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917e:	bc08      	pop	{r3}
 8009180:	469e      	mov	lr, r3
 8009182:	4770      	bx	lr

08009184 <_fini>:
 8009184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009186:	bf00      	nop
 8009188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800918a:	bc08      	pop	{r3}
 800918c:	469e      	mov	lr, r3
 800918e:	4770      	bx	lr
